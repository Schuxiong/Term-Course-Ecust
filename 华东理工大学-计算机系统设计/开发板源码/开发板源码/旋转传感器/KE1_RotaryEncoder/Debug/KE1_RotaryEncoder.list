
KE1_RotaryEncoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000466c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c8  080050c8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050d0  080050d0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d0  080050d0  000150d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080050d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000068  08005140  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08005140  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000089e5  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e11  00000000  00000000  00028ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  0002a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000783  00000000  00000000  0002b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022eb6  00000000  00000000  0002ba7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c2c1  00000000  00000000  0004e931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd0f3  00000000  00000000  0005abf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003090  00000000  00000000  00127ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047e4 	.word	0x080047e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080047e4 	.word	0x080047e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	4b36      	ldr	r3, [pc, #216]	; (800066c <MX_GPIO_Init+0xf0>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	4a35      	ldr	r2, [pc, #212]	; (800066c <MX_GPIO_Init+0xf0>)
 8000598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800059c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059e:	4b33      	ldr	r3, [pc, #204]	; (800066c <MX_GPIO_Init+0xf0>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b30      	ldr	r3, [pc, #192]	; (800066c <MX_GPIO_Init+0xf0>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a2f      	ldr	r2, [pc, #188]	; (800066c <MX_GPIO_Init+0xf0>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b2d      	ldr	r3, [pc, #180]	; (800066c <MX_GPIO_Init+0xf0>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	4b2a      	ldr	r3, [pc, #168]	; (800066c <MX_GPIO_Init+0xf0>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a29      	ldr	r2, [pc, #164]	; (800066c <MX_GPIO_Init+0xf0>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b27      	ldr	r3, [pc, #156]	; (800066c <MX_GPIO_Init+0xf0>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80005e0:	4823      	ldr	r0, [pc, #140]	; (8000670 <MX_GPIO_Init+0xf4>)
 80005e2:	f000 fe8d 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005e6:	2320      	movs	r3, #32
 80005e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	4619      	mov	r1, r3
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f000 fcee 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	4816      	ldr	r0, [pc, #88]	; (8000670 <MX_GPIO_Init+0xf4>)
 8000616:	f000 fce1 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800061a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_GPIO_Init+0xf8>)
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f000 fcd3 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800063a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	4808      	ldr	r0, [pc, #32]	; (8000670 <MX_GPIO_Init+0xf4>)
 8000650:	f000 fcc4 	bl	8000fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2028      	movs	r0, #40	; 0x28
 800065a:	f000 fc88 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800065e:	2028      	movs	r0, #40	; 0x28
 8000660:	f000 fca1 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000
 8000670:	48000400 	.word	0x48000400
 8000674:	10310000 	.word	0x10310000

08000678 <oled_show_count>:

/* USER CODE BEGIN 2 */
void oled_show_count(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	; 0x30
 800067c:	af00      	add	r7, sp, #0
	uint8_t   strBuf[17] = {0};
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	731a      	strb	r2, [r3, #12]
	uint8_t   show_str[17] = {0};
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	731a      	strb	r2, [r3, #12]
	int       iLen = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c

	memset(strBuf, 0, sizeof(strBuf));
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	2211      	movs	r2, #17
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 f8bf 	bl	8003832 <memset>
	memset(show_str, ' ', sizeof(show_str));
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2211      	movs	r2, #17
 80006b8:	2120      	movs	r1, #32
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 f8b9 	bl	8003832 <memset>

	snprintf((char *)strBuf, sizeof(strBuf), "Count: %d", count);
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <oled_show_count+0x88>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	f107 0018 	add.w	r0, r7, #24
 80006c8:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <oled_show_count+0x8c>)
 80006ca:	2111      	movs	r1, #17
 80006cc:	f003 f83a 	bl	8003744 <sniprintf>

	iLen = strlen((char *)strBuf);
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fd7b 	bl	80001d0 <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	memcpy(show_str, strBuf, iLen);
 80006de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006e0:	f107 0118 	add.w	r1, r7, #24
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 f91f 	bl	800392a <memcpy>
	OLED_ShowString(0,3, show_str, 8);
 80006ec:	1d3a      	adds	r2, r7, #4
 80006ee:	2308      	movs	r3, #8
 80006f0:	2103      	movs	r1, #3
 80006f2:	2000      	movs	r0, #0
 80006f4:	f002 febc 	bl	8003470 <OLED_ShowString>
}
 80006f8:	bf00      	nop
 80006fa:	3730      	adds	r7, #48	; 0x30
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000084 	.word	0x20000084
 8000704:	080047fc 	.word	0x080047fc

08000708 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	80fb      	strh	r3, [r7, #6]
	uint8_t clk_value = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	73fb      	strb	r3, [r7, #15]
	uint8_t dt_value  = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	73bb      	strb	r3, [r7, #14]

	if(GPIO_Pin == GPIO_PIN_11){
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000720:	d12b      	bne.n	800077a <HAL_GPIO_EXTI_Callback+0x72>
		clk_value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8000722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fdd1 	bl	80012d0 <HAL_GPIO_ReadPin>
 800072e:	4603      	mov	r3, r0
 8000730:	73fb      	strb	r3, [r7, #15]
		dt_value  = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000736:	4813      	ldr	r0, [pc, #76]	; (8000784 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000738:	f000 fdca 	bl	80012d0 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	73bb      	strb	r3, [r7, #14]
		if(lastCLK != clk_value){
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <HAL_GPIO_EXTI_Callback+0x80>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	7bfa      	ldrb	r2, [r7, #15]
 8000746:	429a      	cmp	r2, r3
 8000748:	d017      	beq.n	800077a <HAL_GPIO_EXTI_Callback+0x72>
			lastCLK = clk_value;
 800074a:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <HAL_GPIO_EXTI_Callback+0x80>)
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	7013      	strb	r3, [r2, #0]
			count += (clk_value != dt_value ? -1:1);
 8000750:	7bfa      	ldrb	r2, [r7, #15]
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	429a      	cmp	r2, r3
 8000756:	d001      	beq.n	800075c <HAL_GPIO_EXTI_Callback+0x54>
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	e000      	b.n	800075e <HAL_GPIO_EXTI_Callback+0x56>
 800075c:	2201      	movs	r2, #1
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_GPIO_EXTI_Callback+0x84>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_GPIO_EXTI_Callback+0x84>)
 8000768:	701a      	strb	r2, [r3, #0]
			printf("Count: %d\r\n", count);
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_GPIO_EXTI_Callback+0x84>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	4619      	mov	r1, r3
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <HAL_GPIO_EXTI_Callback+0x88>)
 8000772:	f002 ffd5 	bl	8003720 <iprintf>
			oled_show_count();
 8000776:	f7ff ff7f 	bl	8000678 <oled_show_count>
		}
	}
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	48000400 	.word	0x48000400
 8000788:	20000085 	.word	0x20000085
 800078c:	20000084 	.word	0x20000084
 8000790:	08004808 	.word	0x08004808

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 fa7b 	bl	8000c92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f82e 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f7ff feec 	bl	800057c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007a4:	f000 f9c6 	bl	8000b34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 80007a8:	f002 fe92 	bl	80034d0 <OLED_Init>
  OLED_Clear();
 80007ac:	f002 fdb4 	bl	8003318 <OLED_Clear>
  OLED_ShowString(0,0, (uint8_t *)"****Encoder****", 8);
 80007b0:	2308      	movs	r3, #8
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <main+0x5c>)
 80007b4:	2100      	movs	r1, #0
 80007b6:	2000      	movs	r0, #0
 80007b8:	f002 fe5a 	bl	8003470 <OLED_ShowString>
  oled_show_count();
 80007bc:	f7ff ff5c 	bl	8000678 <oled_show_count>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if( (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) && (count != 0) ){
 80007c0:	2120      	movs	r1, #32
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f000 fd83 	bl	80012d0 <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1f7      	bne.n	80007c0 <main+0x2c>
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <main+0x60>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0f3      	beq.n	80007c0 <main+0x2c>
		  count = 0;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <main+0x60>)
 80007da:	2200      	movs	r2, #0
 80007dc:	801a      	strh	r2, [r3, #0]
		  printf("Count = %d\r\n", count);
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <main+0x60>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	4619      	mov	r1, r3
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <main+0x64>)
 80007e6:	f002 ff9b 	bl	8003720 <iprintf>
		  oled_show_count();
 80007ea:	f7ff ff45 	bl	8000678 <oled_show_count>
	  if( (GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) && (count != 0) ){
 80007ee:	e7e7      	b.n	80007c0 <main+0x2c>
 80007f0:	08004814 	.word	0x08004814
 80007f4:	20000084 	.word	0x20000084
 80007f8:	08004824 	.word	0x08004824

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0ae      	sub	sp, #184	; 0xb8
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000806:	2244      	movs	r2, #68	; 0x44
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f003 f811 	bl	8003832 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2260      	movs	r2, #96	; 0x60
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f003 f803 	bl	8003832 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083c:	2303      	movs	r3, #3
 800083e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000848:	2314      	movs	r3, #20
 800084a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800084e:	2307      	movs	r3, #7
 8000850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fddf 	bl	8001428 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000870:	f000 f82f 	bl	80008d2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2303      	movs	r3, #3
 800087a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000888:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800088c:	2104      	movs	r1, #4
 800088e:	4618      	mov	r0, r3
 8000890:	f001 f9ba 	bl	8001c08 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800089a:	f000 f81a 	bl	80008d2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800089e:	2301      	movs	r3, #1
 80008a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fbb3 	bl	8002014 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80008b4:	f000 f80d 	bl	80008d2 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008bc:	f000 fd5e 	bl	800137c <HAL_PWREx_ControlVoltageScaling>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008c6:	f000 f804 	bl	80008d2 <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	37b8      	adds	r7, #184	; 0xb8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6613      	str	r3, [r2, #96]	; 0x60
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x44>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6593      	str	r3, [r2, #88]	; 0x58
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 f9dc 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000988:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800098c:	f000 fcd0 	bl	8001330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	e00a      	b.n	80009bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009a6:	f3af 8000 	nop.w
 80009aa:	4601      	mov	r1, r0
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	60ba      	str	r2, [r7, #8]
 80009b2:	b2ca      	uxtb	r2, r1
 80009b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dbf0      	blt.n	80009a6 <_read+0x12>
	}

return len;
 80009c4:	687b      	ldr	r3, [r7, #4]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b086      	sub	sp, #24
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	e009      	b.n	80009f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	60ba      	str	r2, [r7, #8]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f917 	bl	8000c1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf1      	blt.n	80009e0 <_write+0x12>
	}
	return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_close>:

int _close(int file)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_isatty>:

int _isatty(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	return 1;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x50>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x16>
		heap_end = &end;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <_sbrk+0x50>)
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <_sbrk+0x54>)
 8000a84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <_sbrk+0x50>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <_sbrk+0x50>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	466a      	mov	r2, sp
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d907      	bls.n	8000aaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a9a:	f002 ff19 	bl	80038d0 <__errno>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	220c      	movs	r2, #12
 8000aa2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	e006      	b.n	8000ab8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <_sbrk+0x50>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <_sbrk+0x50>)
 8000ab4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000088 	.word	0x20000088
 8000ac4:	20000260 	.word	0x20000260

08000ac8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <SystemInit+0x64>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <SystemInit+0x64>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <SystemInit+0x68>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <SystemInit+0x68>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <SystemInit+0x68>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <SystemInit+0x68>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <SystemInit+0x68>)
 8000af4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000af8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000afc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <SystemInit+0x68>)
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <SystemInit+0x68>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <SystemInit+0x68>)
 8000b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <SystemInit+0x68>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SystemInit+0x64>)
 8000b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	40021000 	.word	0x40021000

08000b34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <MX_USART1_UART_Init+0x5c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART1_UART_Init+0x58>)
 8000b78:	f001 fd88 	bl	800268c <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b82:	f7ff fea6 	bl	80008d2 <Error_Handler>
  }

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000008c 	.word	0x2000008c
 8000b90:	40013800 	.word	0x40013800

08000b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <HAL_UART_MspInit+0x80>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000be6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c06:	f000 f9e9 	bl	8000fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40013800 	.word	0x40013800
 8000c18:	40021000 	.word	0x40021000

08000c1c <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000c24:	1d39      	adds	r1, r7, #4
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <__io_putchar+0x20>)
 8000c2e:	f001 fd7b 	bl	8002728 <HAL_UART_Transmit>
    return ch;
 8000c32:	687b      	ldr	r3, [r7, #4]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2000008c 	.word	0x2000008c

08000c40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c46:	e003      	b.n	8000c50 <LoopCopyDataInit>

08000c48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c4e:	3104      	adds	r1, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c50:	480b      	ldr	r0, [pc, #44]	; (8000c80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c58:	d3f6      	bcc.n	8000c48 <CopyDataInit>
	ldr	r2, =_sbss
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c5c:	e002      	b.n	8000c64 <LoopFillZerobss>

08000c5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c60:	f842 3b04 	str.w	r3, [r2], #4

08000c64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <LoopForever+0x16>)
	cmp	r2, r3
 8000c66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c68:	d3f9      	bcc.n	8000c5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c6a:	f7ff ff2d 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f002 fe35 	bl	80038dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c72:	f7ff fd8f 	bl	8000794 <main>

08000c76 <LoopForever>:

LoopForever:
    b LoopForever
 8000c76:	e7fe      	b.n	8000c76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c78:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000c7c:	080050d8 	.word	0x080050d8
	ldr	r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c84:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8000c88:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8000c8c:	2000025c 	.word	0x2000025c

08000c90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_IRQHandler>

08000c92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f95b 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f80e 	bl	8000cc4 <HAL_InitTick>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	e001      	b.n	8000cb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb4:	f7ff fe14 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_InitTick+0x68>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d022      	beq.n	8000d1e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_InitTick+0x6c>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_InitTick+0x68>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f968 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d10f      	bne.n	8000d18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	d809      	bhi.n	8000d12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	f04f 30ff 	mov.w	r0, #4294967295
 8000d06:	f000 f932 	bl	8000f6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_InitTick+0x70>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	e007      	b.n	8000d22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e004      	b.n	8000d22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e001      	b.n	8000d22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_IncTick+0x1c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_IncTick+0x20>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a03      	ldr	r2, [pc, #12]	; (8000d54 <HAL_IncTick+0x1c>)
 8000d48:	6013      	str	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	2000010c 	.word	0x2000010c
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000010c 	.word	0x2000010c

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffee 	bl	8000d5c <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d004      	beq.n	8000d98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_Delay+0x40>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	4413      	add	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d98:	bf00      	nop
 8000d9a:	f7ff ffdf 	bl	8000d5c <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d8f7      	bhi.n	8000d9a <HAL_Delay+0x26>
  {
  }
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000008 	.word	0x20000008

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e154      	b.n	8001296 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8146 	beq.w	8001290 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x38>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b12      	cmp	r3, #18
 8001012:	d123      	bne.n	800105c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	6939      	ldr	r1, [r7, #16]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d00b      	beq.n	80010b0 <HAL_GPIO_Init+0xd4>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d007      	beq.n	80010b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a4:	2b11      	cmp	r3, #17
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b12      	cmp	r3, #18
 80010ae:	d130      	bne.n	8001112 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010e6:	2201      	movs	r2, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	f003 0201 	and.w	r2, r3, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80a0 	beq.w	8001290 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <HAL_GPIO_Init+0x2d8>)
 8001152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001154:	4a57      	ldr	r2, [pc, #348]	; (80012b4 <HAL_GPIO_Init+0x2d8>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6613      	str	r3, [r2, #96]	; 0x60
 800115c:	4b55      	ldr	r3, [pc, #340]	; (80012b4 <HAL_GPIO_Init+0x2d8>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001168:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001192:	d019      	beq.n	80011c8 <HAL_GPIO_Init+0x1ec>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a49      	ldr	r2, [pc, #292]	; (80012bc <HAL_GPIO_Init+0x2e0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d013      	beq.n	80011c4 <HAL_GPIO_Init+0x1e8>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a48      	ldr	r2, [pc, #288]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00d      	beq.n	80011c0 <HAL_GPIO_Init+0x1e4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a47      	ldr	r2, [pc, #284]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d007      	beq.n	80011bc <HAL_GPIO_Init+0x1e0>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a46      	ldr	r2, [pc, #280]	; (80012c8 <HAL_GPIO_Init+0x2ec>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_GPIO_Init+0x1dc>
 80011b4:	2304      	movs	r3, #4
 80011b6:	e008      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011b8:	2307      	movs	r3, #7
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011bc:	2303      	movs	r3, #3
 80011be:	e004      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011c8:	2300      	movs	r3, #0
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	f002 0203 	and.w	r2, r2, #3
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	4093      	lsls	r3, r2
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011da:	4937      	ldr	r1, [pc, #220]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800120c:	4a2f      	ldr	r2, [pc, #188]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001236:	4a25      	ldr	r2, [pc, #148]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001260:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800128a:	4a10      	ldr	r2, [pc, #64]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f47f aea3 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	371c      	adds	r7, #28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000
 80012bc:	48000400 	.word	0x48000400
 80012c0:	48000800 	.word	0x48000800
 80012c4:	48000c00 	.word	0x48000c00
 80012c8:	48001000 	.word	0x48001000
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e001      	b.n	80012f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800131c:	e002      	b.n	8001324 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f9da 	bl	8000708 <HAL_GPIO_EXTI_Callback>
  }
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <HAL_PWREx_GetVoltageRange+0x18>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40007000 	.word	0x40007000

0800137c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800138a:	d130      	bne.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001398:	d038      	beq.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2232      	movs	r2, #50	; 0x32
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	3301      	adds	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c0:	e002      	b.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d4:	d102      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f2      	bne.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e8:	d110      	bne.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e00f      	b.n	800140e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fa:	d007      	beq.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001404:	4a05      	ldr	r2, [pc, #20]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000
 8001420:	20000000 	.word	0x20000000
 8001424:	431bde83 	.word	0x431bde83

08001428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e3e0      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143a:	4b95      	ldr	r3, [pc, #596]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001444:	4b92      	ldr	r3, [pc, #584]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80e1 	beq.w	800161e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d007      	beq.n	8001472 <HAL_RCC_OscConfig+0x4a>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b0c      	cmp	r3, #12
 8001466:	f040 8088 	bne.w	800157a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2b01      	cmp	r3, #1
 800146e:	f040 8084 	bne.w	800157a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001472:	4b87      	ldr	r3, [pc, #540]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_RCC_OscConfig+0x62>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e3b8      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1a      	ldr	r2, [r3, #32]
 800148e:	4b80      	ldr	r3, [pc, #512]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d004      	beq.n	80014a4 <HAL_RCC_OscConfig+0x7c>
 800149a:	4b7d      	ldr	r3, [pc, #500]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a2:	e005      	b.n	80014b0 <HAL_RCC_OscConfig+0x88>
 80014a4:	4b7a      	ldr	r3, [pc, #488]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80014a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d223      	bcs.n	80014fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fd4b 	bl	8001f54 <RCC_SetFlashLatencyFromMSIRange>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e399      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c8:	4b71      	ldr	r3, [pc, #452]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a70      	ldr	r2, [pc, #448]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80014ce:	f043 0308 	orr.w	r3, r3, #8
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b6e      	ldr	r3, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	496b      	ldr	r1, [pc, #428]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e6:	4b6a      	ldr	r3, [pc, #424]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	4966      	ldr	r1, [pc, #408]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
 80014fa:	e022      	b.n	8001542 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014fc:	4b64      	ldr	r3, [pc, #400]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a63      	ldr	r2, [pc, #396]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	495e      	ldr	r1, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800151a:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	4959      	ldr	r1, [pc, #356]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fd0e 	bl	8001f54 <RCC_SetFlashLatencyFromMSIRange>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e35c      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001542:	f000 fc43 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001546:	4602      	mov	r2, r0
 8001548:	4b51      	ldr	r3, [pc, #324]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	4950      	ldr	r1, [pc, #320]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001554:	5ccb      	ldrb	r3, [r1, r3]
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	fa22 f303 	lsr.w	r3, r2, r3
 800155e:	4a4e      	ldr	r2, [pc, #312]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001560:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001562:	4b4e      	ldr	r3, [pc, #312]	; (800169c <HAL_RCC_OscConfig+0x274>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fbac 	bl	8000cc4 <HAL_InitTick>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d052      	beq.n	800161c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	e340      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d032      	beq.n	80015e8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001582:	4b43      	ldr	r3, [pc, #268]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a42      	ldr	r2, [pc, #264]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158e:	f7ff fbe5 	bl	8000d5c <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001596:	f7ff fbe1 	bl	8000d5c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e329      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a8:	4b39      	ldr	r3, [pc, #228]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a35      	ldr	r2, [pc, #212]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4930      	ldr	r1, [pc, #192]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d2:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	492b      	ldr	r1, [pc, #172]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
 80015e6:	e01a      	b.n	800161e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a28      	ldr	r2, [pc, #160]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fbb2 	bl	8000d5c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fc:	f7ff fbae 	bl	8000d5c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e2f6      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x1d4>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d073      	beq.n	8001712 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b08      	cmp	r3, #8
 800162e:	d005      	beq.n	800163c <HAL_RCC_OscConfig+0x214>
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d10e      	bne.n	8001654 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d063      	beq.n	8001710 <HAL_RCC_OscConfig+0x2e8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d15f      	bne.n	8001710 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e2d3      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d106      	bne.n	800166c <HAL_RCC_OscConfig+0x244>
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e025      	b.n	80016b8 <HAL_RCC_OscConfig+0x290>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001674:	d114      	bne.n	80016a0 <HAL_RCC_OscConfig+0x278>
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a02      	ldr	r2, [pc, #8]	; (8001690 <HAL_RCC_OscConfig+0x268>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e013      	b.n	80016b8 <HAL_RCC_OscConfig+0x290>
 8001690:	40021000 	.word	0x40021000
 8001694:	08004834 	.word	0x08004834
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004
 80016a0:	4ba0      	ldr	r3, [pc, #640]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a9f      	ldr	r2, [pc, #636]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b9d      	ldr	r3, [pc, #628]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a9c      	ldr	r2, [pc, #624]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fb4c 	bl	8000d5c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x2b2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fb48 	bl	8000d5c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x2b2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e290      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	4b92      	ldr	r3, [pc, #584]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x2a0>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb38 	bl	8000d5c <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x2da>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fb34 	bl	8000d5c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x2da>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e27c      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x2ea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d060      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3b8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d005      	beq.n	8001730 <HAL_RCC_OscConfig+0x308>
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d119      	bne.n	800175e <HAL_RCC_OscConfig+0x336>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d116      	bne.n	800175e <HAL_RCC_OscConfig+0x336>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001730:	4b7c      	ldr	r3, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x320>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e259      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b76      	ldr	r3, [pc, #472]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	4973      	ldr	r1, [pc, #460]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175c:	e040      	b.n	80017e0 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d023      	beq.n	80017ae <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001766:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6e      	ldr	r2, [pc, #440]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff faf3 	bl	8000d5c <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x364>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff faef 	bl	8000d5c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x364>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e237      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	4b65      	ldr	r3, [pc, #404]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x352>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	4b62      	ldr	r3, [pc, #392]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	061b      	lsls	r3, r3, #24
 80017a6:	495f      	ldr	r1, [pc, #380]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
 80017ac:	e018      	b.n	80017e0 <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a5c      	ldr	r2, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80017b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff facf 	bl	8000d5c <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x3ac>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff facb 	bl	8000d5c <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e213      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d03c      	beq.n	8001866 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01c      	beq.n	800182e <HAL_RCC_OscConfig+0x406>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f4:	4b4b      	ldr	r3, [pc, #300]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fa:	4a4a      	ldr	r2, [pc, #296]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff faaa 	bl	8000d5c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x3f6>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff faa6 	bl	8000d5c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1ee      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ef      	beq.n	800180c <HAL_RCC_OscConfig+0x3e4>
 800182c:	e01b      	b.n	8001866 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001834:	4a3b      	ldr	r2, [pc, #236]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff fa8d 	bl	8000d5c <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff fa89 	bl	8000d5c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1d1      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	4b32      	ldr	r3, [pc, #200]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 800185a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ef      	bne.n	8001846 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80a6 	beq.w	80019c0 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10d      	bne.n	80018a0 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	4a26      	ldr	r2, [pc, #152]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 800188a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	; 0x58
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189c:	2301      	movs	r3, #1
 800189e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <HAL_RCC_OscConfig+0x500>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d118      	bne.n	80018de <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_RCC_OscConfig+0x500>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_RCC_OscConfig+0x500>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa50 	bl	8000d5c <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c0:	f7ff fa4c 	bl	8000d5c <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e194      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_RCC_OscConfig+0x500>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x498>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d108      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4d0>
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80018e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f6:	e029      	b.n	800194c <HAL_RCC_OscConfig+0x524>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d115      	bne.n	800192c <HAL_RCC_OscConfig+0x504>
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	4a03      	ldr	r2, [pc, #12]	; (8001924 <HAL_RCC_OscConfig+0x4fc>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001920:	e014      	b.n	800194c <HAL_RCC_OscConfig+0x524>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40007000 	.word	0x40007000
 800192c:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	4a93      	ldr	r2, [pc, #588]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800193c:	4b90      	ldr	r3, [pc, #576]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 800193e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001942:	4a8f      	ldr	r2, [pc, #572]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d016      	beq.n	8001982 <HAL_RCC_OscConfig+0x55a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff fa02 	bl	8000d5c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195a:	e00a      	b.n	8001972 <HAL_RCC_OscConfig+0x54a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff f9fe 	bl	8000d5c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x54a>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e144      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001972:	4b83      	ldr	r3, [pc, #524]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ed      	beq.n	800195c <HAL_RCC_OscConfig+0x534>
 8001980:	e015      	b.n	80019ae <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001982:	f7ff f9eb 	bl	8000d5c <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff f9e7 	bl	8000d5c <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	; 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e12d      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a0:	4b77      	ldr	r3, [pc, #476]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ed      	bne.n	800198a <HAL_RCC_OscConfig+0x562>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	4a71      	ldr	r2, [pc, #452]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 80019ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0320 	and.w	r3, r3, #32
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d03c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019d4:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 80019d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019da:	4a69      	ldr	r2, [pc, #420]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e4:	f7ff f9ba 	bl	8000d5c <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ec:	f7ff f9b6 	bl	8000d5c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e0fe      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019fe:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001a00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0ef      	beq.n	80019ec <HAL_RCC_OscConfig+0x5c4>
 8001a0c:	e01b      	b.n	8001a46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a0e:	4b5c      	ldr	r3, [pc, #368]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a14:	4a5a      	ldr	r2, [pc, #360]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f99d 	bl	8000d5c <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a26:	f7ff f999 	bl	8000d5c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0e1      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a38:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ef      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80d5 	beq.w	8001bfa <HAL_RCC_OscConfig+0x7d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	f000 808d 	beq.w	8001b72 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d15a      	bne.n	8001b16 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a60:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a46      	ldr	r2, [pc, #280]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f976 	bl	8000d5c <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff f972 	bl	8000d5c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e0ba      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a86:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a92:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x75c>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aa2:	3a01      	subs	r2, #1
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	4311      	orrs	r1, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aac:	0212      	lsls	r2, r2, #8
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ab4:	0852      	lsrs	r2, r2, #1
 8001ab6:	3a01      	subs	r2, #1
 8001ab8:	0552      	lsls	r2, r2, #21
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ac0:	0852      	lsrs	r2, r2, #1
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	0652      	lsls	r2, r2, #25
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001acc:	06d2      	lsls	r2, r2, #27
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	492b      	ldr	r1, [pc, #172]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001adc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001ae8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aec:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff f935 	bl	8000d5c <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff f931 	bl	8000d5c <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e079      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x6ce>
 8001b14:	e071      	b.n	8001bfa <HAL_RCC_OscConfig+0x7d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b20:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001b34:	f023 0303 	bic.w	r3, r3, #3
 8001b38:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001b40:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b48:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f907 	bl	8000d5c <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff f903 	bl	8000d5c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e04b      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_RCC_OscConfig+0x758>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x72a>
 8001b70:	e043      	b.n	8001bfa <HAL_RCC_OscConfig+0x7d2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d106      	bne.n	8001b88 <HAL_RCC_OscConfig+0x760>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e03e      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	019d808c 	.word	0x019d808c
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_RCC_OscConfig+0x7dc>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d12c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x7ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d123      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x7ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d11b      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x7ce>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc8:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d113      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x7ce>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d109      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x7ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x7d2>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0c8      	b.n	8001dae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b66      	ldr	r3, [pc, #408]	; (8001db8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d910      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b63      	ldr	r3, [pc, #396]	; (8001db8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	4961      	ldr	r1, [pc, #388]	; (8001db8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b5f      	ldr	r3, [pc, #380]	; (8001db8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0b0      	b.n	8001dae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d04c      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c60:	4b56      	ldr	r3, [pc, #344]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d121      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e09e      	b.n	8001dae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c78:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d115      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e092      	b.n	8001dae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c90:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d109      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e086      	b.n	8001dae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e07e      	b.n	8001dae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb0:	4b42      	ldr	r3, [pc, #264]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 0203 	bic.w	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	493f      	ldr	r1, [pc, #252]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc2:	f7ff f84b 	bl	8000d5c <HAL_GetTick>
 8001cc6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cca:	f7ff f847 	bl	8000d5c <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e066      	b.n	8001dae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce0:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 020c 	and.w	r2, r3, #12
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d1eb      	bne.n	8001cca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	492c      	ldr	r1, [pc, #176]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <HAL_RCC_ClockConfig+0x1b0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d210      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_RCC_ClockConfig+0x1b0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 0207 	bic.w	r2, r3, #7
 8001d26:	4924      	ldr	r1, [pc, #144]	; (8001db8 <HAL_RCC_ClockConfig+0x1b0>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <HAL_RCC_ClockConfig+0x1b0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e036      	b.n	8001dae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4918      	ldr	r1, [pc, #96]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4910      	ldr	r1, [pc, #64]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d7e:	f000 f825 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_RCC_ClockConfig+0x1b4>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	5ccb      	ldrb	r3, [r1, r3]
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe ff8e 	bl	8000cc4 <HAL_InitTick>
 8001da8:	4603      	mov	r3, r0
 8001daa:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dac:	7afb      	ldrb	r3, [r7, #11]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	08004834 	.word	0x08004834
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dda:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x34>
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d121      	bne.n	8001e3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d11e      	bne.n	8001e3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e00:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e005      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e28:	4a2b      	ldr	r2, [pc, #172]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10d      	bne.n	8001e54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e44:	4b25      	ldr	r3, [pc, #148]	; (8001edc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	e004      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d134      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d003      	beq.n	8001e72 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d003      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0xac>
 8001e70:	e005      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e74:	617b      	str	r3, [r7, #20]
      break;
 8001e76:	e005      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e7a:	617b      	str	r3, [r7, #20]
      break;
 8001e7c:	e002      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	617b      	str	r3, [r7, #20]
      break;
 8001e82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	3301      	adds	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	0e5b      	lsrs	r3, r3, #25
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	0800484c 	.word	0x0800484c
 8001edc:	00f42400 	.word	0x00f42400
 8001ee0:	007a1200 	.word	0x007a1200

08001ee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000

08001efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f00:	f7ff fff0 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4904      	ldr	r1, [pc, #16]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08004844 	.word	0x08004844

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f2c:	f7ff ffda 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0adb      	lsrs	r3, r3, #11
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4904      	ldr	r1, [pc, #16]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	08004844 	.word	0x08004844

08001f54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f60:	4b2a      	ldr	r3, [pc, #168]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f6c:	f7ff f9f8 	bl	8001360 <HAL_PWREx_GetVoltageRange>
 8001f70:	6178      	str	r0, [r7, #20]
 8001f72:	e014      	b.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	4a24      	ldr	r2, [pc, #144]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f8c:	f7ff f9e8 	bl	8001360 <HAL_PWREx_GetVoltageRange>
 8001f90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	4a1d      	ldr	r2, [pc, #116]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa4:	d10b      	bne.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d919      	bls.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb0:	d902      	bls.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e013      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	e010      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b80      	cmp	r3, #128	; 0x80
 8001fc2:	d902      	bls.n	8001fca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	e00a      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b80      	cmp	r3, #128	; 0x80
 8001fce:	d102      	bne.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e004      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b70      	cmp	r3, #112	; 0x70
 8001fda:	d101      	bne.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 0207 	bic.w	r2, r3, #7
 8001fe8:	4909      	ldr	r1, [pc, #36]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d001      	beq.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	40022000 	.word	0x40022000

08002014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800201c:	2300      	movs	r3, #0
 800201e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002020:	2300      	movs	r3, #0
 8002022:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800202c:	2b00      	cmp	r3, #0
 800202e:	d031      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002038:	d01a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800203a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800203e:	d814      	bhi.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002048:	d10f      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4a5c      	ldr	r2, [pc, #368]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002056:	e00c      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fa22 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002068:	e003      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	74fb      	strb	r3, [r7, #19]
      break;
 800206e:	e000      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002072:	7cfb      	ldrb	r3, [r7, #19]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002078:	4b51      	ldr	r3, [pc, #324]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	494e      	ldr	r1, [pc, #312]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800208e:	e001      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 809e 	beq.w	80021de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020a6:	4b46      	ldr	r3, [pc, #280]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020b6:	2300      	movs	r3, #0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020bc:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	4a3f      	ldr	r2, [pc, #252]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c6:	6593      	str	r3, [r2, #88]	; 0x58
 80020c8:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d4:	2301      	movs	r3, #1
 80020d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d8:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a39      	ldr	r2, [pc, #228]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020e4:	f7fe fe3a 	bl	8000d5c <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ea:	e009      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ec:	f7fe fe36 	bl	8000d5c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d902      	bls.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	74fb      	strb	r3, [r7, #19]
        break;
 80020fe:	e005      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002100:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0ef      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d15a      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002112:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01e      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	429a      	cmp	r2, r3
 800212c:	d019      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002138:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800215a:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d016      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe fdf6 	bl	8000d5c <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002172:	e00b      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7fe fdf2 	bl	8000d5c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d902      	bls.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	74fb      	strb	r3, [r7, #19]
            break;
 800218a:	e006      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0ec      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800219a:	7cfb      	ldrb	r3, [r7, #19]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	4904      	ldr	r1, [pc, #16]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021b6:	e009      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	74bb      	strb	r3, [r7, #18]
 80021bc:	e006      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021cc:	7c7b      	ldrb	r3, [r7, #17]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b8d      	ldr	r3, [pc, #564]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	4a8c      	ldr	r2, [pc, #560]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ea:	4b87      	ldr	r3, [pc, #540]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f0:	f023 0203 	bic.w	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4983      	ldr	r1, [pc, #524]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800220c:	4b7e      	ldr	r3, [pc, #504]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	f023 020c 	bic.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	497b      	ldr	r1, [pc, #492]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800222e:	4b76      	ldr	r3, [pc, #472]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	4972      	ldr	r1, [pc, #456]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002250:	4b6d      	ldr	r3, [pc, #436]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	496a      	ldr	r1, [pc, #424]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002272:	4b65      	ldr	r3, [pc, #404]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	4961      	ldr	r1, [pc, #388]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002294:	4b5c      	ldr	r3, [pc, #368]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4959      	ldr	r1, [pc, #356]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b6:	4b54      	ldr	r3, [pc, #336]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	4950      	ldr	r1, [pc, #320]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022d8:	4b4b      	ldr	r3, [pc, #300]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e6:	4948      	ldr	r1, [pc, #288]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022fa:	4b43      	ldr	r3, [pc, #268]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	493f      	ldr	r1, [pc, #252]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d028      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800231c:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232a:	4937      	ldr	r1, [pc, #220]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800233a:	d106      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800233c:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a31      	ldr	r2, [pc, #196]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002346:	60d3      	str	r3, [r2, #12]
 8002348:	e011      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002352:	d10c      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	2101      	movs	r1, #1
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f8a4 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d028      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002388:	491f      	ldr	r1, [pc, #124]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002398:	d106      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a4:	60d3      	str	r3, [r2, #12]
 80023a6:	e011      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2101      	movs	r1, #1
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f875 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02b      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023f6:	d109      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a02      	ldr	r2, [pc, #8]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002402:	60d3      	str	r3, [r2, #12]
 8002404:	e014      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002414:	d10c      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f843 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002422:	4603      	mov	r3, r0
 8002424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01c      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	4916      	ldr	r1, [pc, #88]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800245a:	d10c      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	2102      	movs	r1, #2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f820 	bl	80024a8 <RCCEx_PLLSAI1_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	4904      	ldr	r1, [pc, #16]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002498:	7cbb      	ldrb	r3, [r7, #18]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000

080024a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024b6:	4b74      	ldr	r3, [pc, #464]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d018      	beq.n	80024f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024c2:	4b71      	ldr	r3, [pc, #452]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0203 	and.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d10d      	bne.n	80024ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
       ||
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024da:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
       ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d047      	beq.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e044      	b.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d018      	beq.n	800252e <RCCEx_PLLSAI1_Config+0x86>
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d825      	bhi.n	800254c <RCCEx_PLLSAI1_Config+0xa4>
 8002500:	2b01      	cmp	r3, #1
 8002502:	d002      	beq.n	800250a <RCCEx_PLLSAI1_Config+0x62>
 8002504:	2b02      	cmp	r3, #2
 8002506:	d009      	beq.n	800251c <RCCEx_PLLSAI1_Config+0x74>
 8002508:	e020      	b.n	800254c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800250a:	4b5f      	ldr	r3, [pc, #380]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11d      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251a:	e01a      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800251c:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d116      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252c:	e013      	b.n	8002556 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800252e:	4b56      	ldr	r3, [pc, #344]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800253a:	4b53      	ldr	r3, [pc, #332]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800254a:	e006      	b.n	800255a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      break;
 8002550:	e004      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002552:	bf00      	nop
 8002554:	e002      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255a:	bf00      	nop
    }

    if(status == HAL_OK)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002562:	4b49      	ldr	r3, [pc, #292]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	430b      	orrs	r3, r1
 8002578:	4943      	ldr	r1, [pc, #268]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257a:	4313      	orrs	r3, r2
 800257c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d17c      	bne.n	800267e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002584:	4b40      	ldr	r3, [pc, #256]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800258e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002590:	f7fe fbe4 	bl	8000d5c <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002596:	e009      	b.n	80025ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002598:	f7fe fbe0 	bl	8000d5c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d902      	bls.n	80025ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	73fb      	strb	r3, [r7, #15]
        break;
 80025aa:	e005      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ac:	4b36      	ldr	r3, [pc, #216]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ef      	bne.n	8002598 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d15f      	bne.n	800267e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d110      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80025cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6892      	ldr	r2, [r2, #8]
 80025d4:	0211      	lsls	r1, r2, #8
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	06d2      	lsls	r2, r2, #27
 80025dc:	430a      	orrs	r2, r1
 80025de:	492a      	ldr	r1, [pc, #168]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	610b      	str	r3, [r1, #16]
 80025e4:	e027      	b.n	8002636 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d112      	bne.n	8002612 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ec:	4b26      	ldr	r3, [pc, #152]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6892      	ldr	r2, [r2, #8]
 80025fc:	0211      	lsls	r1, r2, #8
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6912      	ldr	r2, [r2, #16]
 8002602:	0852      	lsrs	r2, r2, #1
 8002604:	3a01      	subs	r2, #1
 8002606:	0552      	lsls	r2, r2, #21
 8002608:	430a      	orrs	r2, r1
 800260a:	491f      	ldr	r1, [pc, #124]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	610b      	str	r3, [r1, #16]
 8002610:	e011      	b.n	8002636 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800261a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	0211      	lsls	r1, r2, #8
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6952      	ldr	r2, [r2, #20]
 8002628:	0852      	lsrs	r2, r2, #1
 800262a:	3a01      	subs	r2, #1
 800262c:	0652      	lsls	r2, r2, #25
 800262e:	430a      	orrs	r2, r1
 8002630:	4915      	ldr	r1, [pc, #84]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002632:	4313      	orrs	r3, r2
 8002634:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002640:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7fe fb8b 	bl	8000d5c <HAL_GetTick>
 8002646:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002648:	e009      	b.n	800265e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800264a:	f7fe fb87 	bl	8000d5c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d902      	bls.n	800265e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	73fb      	strb	r3, [r7, #15]
          break;
 800265c:	e005      	b.n	800266a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0ef      	beq.n	800264a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4903      	ldr	r1, [pc, #12]	; (8002688 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267a:	4313      	orrs	r3, r2
 800267c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000

0800268c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e040      	b.n	8002720 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fa70 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2224      	movs	r2, #36	; 0x24
 80026b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f8c0 	bl	8002850 <UART_SetConfig>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e022      	b.n	8002720 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fbea 	bl	8002ebc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fc71 	bl	8003000 <UART_CheckIdleState>
 800271e:	4603      	mov	r3, r0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273c:	2b20      	cmp	r3, #32
 800273e:	f040 8081 	bne.w	8002844 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <HAL_UART_Transmit+0x26>
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e079      	b.n	8002846 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_UART_Transmit+0x38>
 800275c:	2302      	movs	r3, #2
 800275e:	e072      	b.n	8002846 <HAL_UART_Transmit+0x11e>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2221      	movs	r2, #33	; 0x21
 8002772:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002774:	f7fe faf2 	bl	8000d5c <HAL_GetTick>
 8002778:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	88fa      	ldrh	r2, [r7, #6]
 800277e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002792:	d108      	bne.n	80027a6 <HAL_UART_Transmit+0x7e>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	e003      	b.n	80027ae <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027ae:	e02d      	b.n	800280c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2200      	movs	r2, #0
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fc65 	bl	800308a <UART_WaitOnFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e03d      	b.n	8002846 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10b      	bne.n	80027e8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	881a      	ldrh	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027dc:	b292      	uxth	r2, r2
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	3302      	adds	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	e008      	b.n	80027fa <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b292      	uxth	r2, r2
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	3301      	adds	r3, #1
 80027f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1cb      	bne.n	80027b0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2200      	movs	r2, #0
 8002820:	2140      	movs	r1, #64	; 0x40
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fc31 	bl	800308a <UART_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e009      	b.n	8002846 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002854:	b09e      	sub	sp, #120	; 0x78
 8002856:	af00      	add	r7, sp, #0
 8002858:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800285a:	2300      	movs	r3, #0
 800285c:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002864:	2300      	movs	r3, #0
 8002866:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	431a      	orrs	r2, r3
 8002872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	431a      	orrs	r2, r3
 8002878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	4313      	orrs	r3, r2
 800287e:	677b      	str	r3, [r7, #116]	; 0x74
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	49aa      	ldr	r1, [pc, #680]	; (8002b30 <UART_SetConfig+0x2e0>)
 8002888:	4019      	ands	r1, r3
 800288a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002890:	430b      	orrs	r3, r1
 8002892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800289e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a0:	68d9      	ldr	r1, [r3, #12]
 80028a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	ea40 0301 	orr.w	r3, r0, r1
 80028aa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b9f      	ldr	r3, [pc, #636]	; (8002b34 <UART_SetConfig+0x2e4>)
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d004      	beq.n	80028c6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c2:	4313      	orrs	r3, r2
 80028c4:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d6:	430b      	orrs	r3, r1
 80028d8:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b96      	ldr	r3, [pc, #600]	; (8002b38 <UART_SetConfig+0x2e8>)
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d125      	bne.n	8002930 <UART_SetConfig+0xe0>
 80028e4:	4b95      	ldr	r3, [pc, #596]	; (8002b3c <UART_SetConfig+0x2ec>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d81a      	bhi.n	8002928 <UART_SetConfig+0xd8>
 80028f2:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <UART_SetConfig+0xa8>)
 80028f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f8:	08002909 	.word	0x08002909
 80028fc:	08002919 	.word	0x08002919
 8002900:	08002911 	.word	0x08002911
 8002904:	08002921 	.word	0x08002921
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800290e:	e0ab      	b.n	8002a68 <UART_SetConfig+0x218>
 8002910:	2302      	movs	r3, #2
 8002912:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8002916:	e0a7      	b.n	8002a68 <UART_SetConfig+0x218>
 8002918:	2304      	movs	r3, #4
 800291a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800291e:	e0a3      	b.n	8002a68 <UART_SetConfig+0x218>
 8002920:	2308      	movs	r3, #8
 8002922:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8002926:	e09f      	b.n	8002a68 <UART_SetConfig+0x218>
 8002928:	2310      	movs	r3, #16
 800292a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800292e:	e09b      	b.n	8002a68 <UART_SetConfig+0x218>
 8002930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b82      	ldr	r3, [pc, #520]	; (8002b40 <UART_SetConfig+0x2f0>)
 8002936:	429a      	cmp	r2, r3
 8002938:	d138      	bne.n	80029ac <UART_SetConfig+0x15c>
 800293a:	4b80      	ldr	r3, [pc, #512]	; (8002b3c <UART_SetConfig+0x2ec>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d82d      	bhi.n	80029a4 <UART_SetConfig+0x154>
 8002948:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <UART_SetConfig+0x100>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002985 	.word	0x08002985
 8002954:	080029a5 	.word	0x080029a5
 8002958:	080029a5 	.word	0x080029a5
 800295c:	080029a5 	.word	0x080029a5
 8002960:	08002995 	.word	0x08002995
 8002964:	080029a5 	.word	0x080029a5
 8002968:	080029a5 	.word	0x080029a5
 800296c:	080029a5 	.word	0x080029a5
 8002970:	0800298d 	.word	0x0800298d
 8002974:	080029a5 	.word	0x080029a5
 8002978:	080029a5 	.word	0x080029a5
 800297c:	080029a5 	.word	0x080029a5
 8002980:	0800299d 	.word	0x0800299d
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800298a:	e06d      	b.n	8002a68 <UART_SetConfig+0x218>
 800298c:	2302      	movs	r3, #2
 800298e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8002992:	e069      	b.n	8002a68 <UART_SetConfig+0x218>
 8002994:	2304      	movs	r3, #4
 8002996:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800299a:	e065      	b.n	8002a68 <UART_SetConfig+0x218>
 800299c:	2308      	movs	r3, #8
 800299e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80029a2:	e061      	b.n	8002a68 <UART_SetConfig+0x218>
 80029a4:	2310      	movs	r3, #16
 80029a6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80029aa:	e05d      	b.n	8002a68 <UART_SetConfig+0x218>
 80029ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <UART_SetConfig+0x2f4>)
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d125      	bne.n	8002a02 <UART_SetConfig+0x1b2>
 80029b6:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <UART_SetConfig+0x2ec>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029c0:	2b30      	cmp	r3, #48	; 0x30
 80029c2:	d016      	beq.n	80029f2 <UART_SetConfig+0x1a2>
 80029c4:	2b30      	cmp	r3, #48	; 0x30
 80029c6:	d818      	bhi.n	80029fa <UART_SetConfig+0x1aa>
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d00a      	beq.n	80029e2 <UART_SetConfig+0x192>
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d814      	bhi.n	80029fa <UART_SetConfig+0x1aa>
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <UART_SetConfig+0x18a>
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d008      	beq.n	80029ea <UART_SetConfig+0x19a>
 80029d8:	e00f      	b.n	80029fa <UART_SetConfig+0x1aa>
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80029e0:	e042      	b.n	8002a68 <UART_SetConfig+0x218>
 80029e2:	2302      	movs	r3, #2
 80029e4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80029e8:	e03e      	b.n	8002a68 <UART_SetConfig+0x218>
 80029ea:	2304      	movs	r3, #4
 80029ec:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80029f0:	e03a      	b.n	8002a68 <UART_SetConfig+0x218>
 80029f2:	2308      	movs	r3, #8
 80029f4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80029f8:	e036      	b.n	8002a68 <UART_SetConfig+0x218>
 80029fa:	2310      	movs	r3, #16
 80029fc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8002a00:	e032      	b.n	8002a68 <UART_SetConfig+0x218>
 8002a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b4b      	ldr	r3, [pc, #300]	; (8002b34 <UART_SetConfig+0x2e4>)
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d12a      	bne.n	8002a62 <UART_SetConfig+0x212>
 8002a0c:	4b4b      	ldr	r3, [pc, #300]	; (8002b3c <UART_SetConfig+0x2ec>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a1a:	d01a      	beq.n	8002a52 <UART_SetConfig+0x202>
 8002a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a20:	d81b      	bhi.n	8002a5a <UART_SetConfig+0x20a>
 8002a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a26:	d00c      	beq.n	8002a42 <UART_SetConfig+0x1f2>
 8002a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a2c:	d815      	bhi.n	8002a5a <UART_SetConfig+0x20a>
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <UART_SetConfig+0x1ea>
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a36:	d008      	beq.n	8002a4a <UART_SetConfig+0x1fa>
 8002a38:	e00f      	b.n	8002a5a <UART_SetConfig+0x20a>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8002a40:	e012      	b.n	8002a68 <UART_SetConfig+0x218>
 8002a42:	2302      	movs	r3, #2
 8002a44:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8002a48:	e00e      	b.n	8002a68 <UART_SetConfig+0x218>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8002a50:	e00a      	b.n	8002a68 <UART_SetConfig+0x218>
 8002a52:	2308      	movs	r3, #8
 8002a54:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8002a58:	e006      	b.n	8002a68 <UART_SetConfig+0x218>
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8002a60:	e002      	b.n	8002a68 <UART_SetConfig+0x218>
 8002a62:	2310      	movs	r3, #16
 8002a64:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <UART_SetConfig+0x2e4>)
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	f040 8119 	bne.w	8002ca6 <UART_SetConfig+0x456>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a74:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d824      	bhi.n	8002ac6 <UART_SetConfig+0x276>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <UART_SetConfig+0x234>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002aa9 	.word	0x08002aa9
 8002a88:	08002ac7 	.word	0x08002ac7
 8002a8c:	08002ab1 	.word	0x08002ab1
 8002a90:	08002ac7 	.word	0x08002ac7
 8002a94:	08002ab7 	.word	0x08002ab7
 8002a98:	08002ac7 	.word	0x08002ac7
 8002a9c:	08002ac7 	.word	0x08002ac7
 8002aa0:	08002ac7 	.word	0x08002ac7
 8002aa4:	08002abf 	.word	0x08002abf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002aa8:	f7ff fa28 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002aac:	6678      	str	r0, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8002aae:	e00e      	b.n	8002ace <UART_SetConfig+0x27e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <UART_SetConfig+0x2f8>)
 8002ab2:	667b      	str	r3, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ab4:	e00b      	b.n	8002ace <UART_SetConfig+0x27e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002ab6:	f7ff f989 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8002aba:	6678      	str	r0, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8002abc:	e007      	b.n	8002ace <UART_SetConfig+0x27e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac2:	667b      	str	r3, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ac4:	e003      	b.n	8002ace <UART_SetConfig+0x27e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 8002acc:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 81e6 	beq.w	8002ea2 <UART_SetConfig+0x652>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	441a      	add	r2, r3
 8002ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d305      	bcc.n	8002af2 <UART_SetConfig+0x2a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d903      	bls.n	8002afa <UART_SetConfig+0x2aa>
      {
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002af8:	e1d3      	b.n	8002ea2 <UART_SetConfig+0x652>
      }
      else
      {
        switch (clocksource)
 8002afa:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	f200 80bc 	bhi.w	8002c7c <UART_SetConfig+0x42c>
 8002b04:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <UART_SetConfig+0x2bc>)
 8002b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0a:	bf00      	nop
 8002b0c:	08002b4d 	.word	0x08002b4d
 8002b10:	08002c7d 	.word	0x08002c7d
 8002b14:	08002bab 	.word	0x08002bab
 8002b18:	08002c7d 	.word	0x08002c7d
 8002b1c:	08002beb 	.word	0x08002beb
 8002b20:	08002c7d 	.word	0x08002c7d
 8002b24:	08002c7d 	.word	0x08002c7d
 8002b28:	08002c7d 	.word	0x08002c7d
 8002b2c:	08002c45 	.word	0x08002c45
 8002b30:	efff69f3 	.word	0xefff69f3
 8002b34:	40008000 	.word	0x40008000
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40004400 	.word	0x40004400
 8002b44:	40004800 	.word	0x40004800
 8002b48:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b4c:	f7ff f9d6 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2200      	movs	r2, #0
 8002b54:	4698      	mov	r8, r3
 8002b56:	4691      	mov	r9, r2
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8002b64:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8002b68:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8002b6c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b6e:	6849      	ldr	r1, [r1, #4]
 8002b70:	0849      	lsrs	r1, r1, #1
 8002b72:	2000      	movs	r0, #0
 8002b74:	6539      	str	r1, [r7, #80]	; 0x50
 8002b76:	6578      	str	r0, [r7, #84]	; 0x54
 8002b78:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	1851      	adds	r1, r2, r1
 8002b80:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b82:	4629      	mov	r1, r5
 8002b84:	eb43 0101 	adc.w	r1, r3, r1
 8002b88:	64f9      	str	r1, [r7, #76]	; 0x4c
 8002b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	643b      	str	r3, [r7, #64]	; 0x40
 8002b92:	647a      	str	r2, [r7, #68]	; 0x44
 8002b94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b98:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002b9c:	f7fd fb70 	bl	8000280 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ba8:	e06c      	b.n	8002c84 <UART_SetConfig+0x434>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bb6:	4bb0      	ldr	r3, [pc, #704]	; (8002e78 <UART_SetConfig+0x628>)
 8002bb8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	18d3      	adds	r3, r2, r3
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	f143 0300 	adc.w	r3, r3, #0
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bd8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002bdc:	f7fd fb50 	bl	8000280 <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4613      	mov	r3, r2
 8002be6:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8002be8:	e04c      	b.n	8002c84 <UART_SetConfig+0x434>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bea:	f7ff f8ef 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	461c      	mov	r4, r3
 8002bf4:	4615      	mov	r5, r2
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	022b      	lsls	r3, r5, #8
 8002c00:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c04:	0222      	lsls	r2, r4, #8
 8002c06:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002c08:	6849      	ldr	r1, [r1, #4]
 8002c0a:	0849      	lsrs	r1, r1, #1
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	6239      	str	r1, [r7, #32]
 8002c10:	6278      	str	r0, [r7, #36]	; 0x24
 8002c12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c16:	4621      	mov	r1, r4
 8002c18:	1851      	adds	r1, r2, r1
 8002c1a:	61b9      	str	r1, [r7, #24]
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	eb43 0101 	adc.w	r1, r3, r1
 8002c22:	61f9      	str	r1, [r7, #28]
 8002c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	617a      	str	r2, [r7, #20]
 8002c2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c36:	f7fd fb23 	bl	8000280 <__aeabi_uldivmod>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4613      	mov	r3, r2
 8002c40:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8002c42:	e01f      	b.n	8002c84 <UART_SetConfig+0x434>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	469a      	mov	sl, r3
 8002c4e:	4693      	mov	fp, r2
 8002c50:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	f14b 0300 	adc.w	r3, fp, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c6e:	f7fd fb07 	bl	8000280 <__aeabi_uldivmod>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4613      	mov	r3, r2
 8002c78:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8002c7a:	e003      	b.n	8002c84 <UART_SetConfig+0x434>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 8002c82:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c8a:	d308      	bcc.n	8002c9e <UART_SetConfig+0x44e>
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c92:	d204      	bcs.n	8002c9e <UART_SetConfig+0x44e>
        {
          huart->Instance->BRR = usartdiv;
 8002c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	e101      	b.n	8002ea2 <UART_SetConfig+0x652>
        }
        else
        {
          ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002ca4:	e0fd      	b.n	8002ea2 <UART_SetConfig+0x652>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cae:	f040 8086 	bne.w	8002dbe <UART_SetConfig+0x56e>
  {
    switch (clocksource)
 8002cb2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d85b      	bhi.n	8002d72 <UART_SetConfig+0x522>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <UART_SetConfig+0x470>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002ce5 	.word	0x08002ce5
 8002cc4:	08002d03 	.word	0x08002d03
 8002cc8:	08002d21 	.word	0x08002d21
 8002ccc:	08002d73 	.word	0x08002d73
 8002cd0:	08002d3d 	.word	0x08002d3d
 8002cd4:	08002d73 	.word	0x08002d73
 8002cd8:	08002d73 	.word	0x08002d73
 8002cdc:	08002d73 	.word	0x08002d73
 8002ce0:	08002d5b 	.word	0x08002d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ce4:	f7ff f90a 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	005a      	lsls	r2, r3, #1
 8002cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	441a      	add	r2, r3
 8002cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d00:	e03b      	b.n	8002d7a <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d02:	f7ff f911 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8002d06:	4603      	mov	r3, r0
 8002d08:	005a      	lsls	r2, r3, #1
 8002d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	085b      	lsrs	r3, r3, #1
 8002d10:	441a      	add	r2, r3
 8002d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d1e:	e02c      	b.n	8002d7a <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	085b      	lsrs	r3, r3, #1
 8002d26:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002d2a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002d2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d30:	6852      	ldr	r2, [r2, #4]
 8002d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d3a:	e01e      	b.n	8002d7a <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d3c:	f7ff f846 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8002d40:	4603      	mov	r3, r0
 8002d42:	005a      	lsls	r2, r3, #1
 8002d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	441a      	add	r2, r3
 8002d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d58:	e00f      	b.n	8002d7a <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d70:	e003      	b.n	8002d7a <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 8002d78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7c:	2b0f      	cmp	r3, #15
 8002d7e:	d91a      	bls.n	8002db6 <UART_SetConfig+0x566>
 8002d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d86:	d216      	bcs.n	8002db6 <UART_SetConfig+0x566>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	f023 030f 	bic.w	r3, r3, #15
 8002d90:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      huart->Instance->BRR = brrtemp;
 8002daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	e075      	b.n	8002ea2 <UART_SetConfig+0x652>
    }
    else
    {
      ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002dbc:	e071      	b.n	8002ea2 <UART_SetConfig+0x652>
    }
  }
  else
  {
    switch (clocksource)
 8002dbe:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d85a      	bhi.n	8002e7c <UART_SetConfig+0x62c>
 8002dc6:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <UART_SetConfig+0x57c>)
 8002dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dcc:	08002df1 	.word	0x08002df1
 8002dd0:	08002e0d 	.word	0x08002e0d
 8002dd4:	08002e29 	.word	0x08002e29
 8002dd8:	08002e7d 	.word	0x08002e7d
 8002ddc:	08002e45 	.word	0x08002e45
 8002de0:	08002e7d 	.word	0x08002e7d
 8002de4:	08002e7d 	.word	0x08002e7d
 8002de8:	08002e7d 	.word	0x08002e7d
 8002dec:	08002e61 	.word	0x08002e61
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002df0:	f7ff f884 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	441a      	add	r2, r3
 8002dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e0a:	e03b      	b.n	8002e84 <UART_SetConfig+0x634>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e0c:	f7ff f88c 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	085b      	lsrs	r3, r3, #1
 8002e18:	441a      	add	r2, r3
 8002e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e26:	e02d      	b.n	8002e84 <UART_SetConfig+0x634>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002e32:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002e36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e38:	6852      	ldr	r2, [r2, #4]
 8002e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e42:	e01f      	b.n	8002e84 <UART_SetConfig+0x634>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e44:	f7fe ffc2 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	441a      	add	r2, r3
 8002e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e5e:	e011      	b.n	8002e84 <UART_SetConfig+0x634>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	085b      	lsrs	r3, r3, #1
 8002e66:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e76:	e005      	b.n	8002e84 <UART_SetConfig+0x634>
 8002e78:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 8002e82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	d908      	bls.n	8002e9c <UART_SetConfig+0x64c>
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e90:	d204      	bcs.n	8002e9c <UART_SetConfig+0x64c>
    {
      huart->Instance->BRR = usartdiv;
 8002e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	e002      	b.n	8002ea2 <UART_SetConfig+0x652>
    }
    else
    {
      ret = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eaa:	2200      	movs	r2, #0
 8002eac:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002eae:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3778      	adds	r7, #120	; 0x78
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01a      	beq.n	8002fd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fba:	d10a      	bne.n	8002fd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af02      	add	r7, sp, #8
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800300e:	f7fd fea5 	bl	8000d5c <HAL_GetTick>
 8003012:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b08      	cmp	r3, #8
 8003020:	d10e      	bne.n	8003040 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003022:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f82a 	bl	800308a <UART_WaitOnFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e020      	b.n	8003082 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d10e      	bne.n	800306c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800304e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f814 	bl	800308a <UART_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e00a      	b.n	8003082 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309a:	e02a      	b.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d026      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7fd fe5a 	bl	8000d5c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <UART_WaitOnFlagUntilTimeout+0x30>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d11b      	bne.n	80030f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0201 	bic.w	r2, r2, #1
 80030d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e00f      	b.n	8003112 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4013      	ands	r3, r2
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	429a      	cmp	r2, r3
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	429a      	cmp	r2, r3
 800310e:	d0c5      	beq.n	800309c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <IIC_Start>:
//-----------------------------------			   
/**********************************************
//IIC Start
**********************************************/
void IIC_Start(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
	OLED_SCLK_Set();
 8003120:	2201      	movs	r2, #1
 8003122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003126:	480b      	ldr	r0, [pc, #44]	; (8003154 <IIC_Start+0x38>)
 8003128:	f7fe f8ea 	bl	8001300 <HAL_GPIO_WritePin>
	OLED_SDIN_Set();
 800312c:	2201      	movs	r2, #1
 800312e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003132:	4808      	ldr	r0, [pc, #32]	; (8003154 <IIC_Start+0x38>)
 8003134:	f7fe f8e4 	bl	8001300 <HAL_GPIO_WritePin>
	OLED_SDIN_Clr();
 8003138:	2200      	movs	r2, #0
 800313a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800313e:	4805      	ldr	r0, [pc, #20]	; (8003154 <IIC_Start+0x38>)
 8003140:	f7fe f8de 	bl	8001300 <HAL_GPIO_WritePin>
	OLED_SCLK_Clr();
 8003144:	2200      	movs	r2, #0
 8003146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800314a:	4802      	ldr	r0, [pc, #8]	; (8003154 <IIC_Start+0x38>)
 800314c:	f7fe f8d8 	bl	8001300 <HAL_GPIO_WritePin>
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}
 8003154:	48000400 	.word	0x48000400

08003158 <IIC_Stop>:

/**********************************************
//IIC Stop
**********************************************/
void IIC_Stop(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
	OLED_SCLK_Set();
 800315c:	2201      	movs	r2, #1
 800315e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003162:	4808      	ldr	r0, [pc, #32]	; (8003184 <IIC_Stop+0x2c>)
 8003164:	f7fe f8cc 	bl	8001300 <HAL_GPIO_WritePin>
	OLED_SDIN_Clr();
 8003168:	2200      	movs	r2, #0
 800316a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800316e:	4805      	ldr	r0, [pc, #20]	; (8003184 <IIC_Stop+0x2c>)
 8003170:	f7fe f8c6 	bl	8001300 <HAL_GPIO_WritePin>
	OLED_SDIN_Set();
 8003174:	2201      	movs	r2, #1
 8003176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800317a:	4802      	ldr	r0, [pc, #8]	; (8003184 <IIC_Stop+0x2c>)
 800317c:	f7fe f8c0 	bl	8001300 <HAL_GPIO_WritePin>
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}
 8003184:	48000400 	.word	0x48000400

08003188 <IIC_Wait_Ack>:

void IIC_Wait_Ack(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
	OLED_SCLK_Set();
 800318c:	2201      	movs	r2, #1
 800318e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003192:	4805      	ldr	r0, [pc, #20]	; (80031a8 <IIC_Wait_Ack+0x20>)
 8003194:	f7fe f8b4 	bl	8001300 <HAL_GPIO_WritePin>
	OLED_SCLK_Clr();
 8003198:	2200      	movs	r2, #0
 800319a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800319e:	4802      	ldr	r0, [pc, #8]	; (80031a8 <IIC_Wait_Ack+0x20>)
 80031a0:	f7fe f8ae 	bl	8001300 <HAL_GPIO_WritePin>
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	48000400 	.word	0x48000400

080031ac <Write_IIC_Byte>:
/**********************************************
// IIC Write byte
**********************************************/

void Write_IIC_Byte(unsigned char IIC_Byte)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char m,da;
	da=IIC_Byte;
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	73bb      	strb	r3, [r7, #14]
	OLED_SCLK_Clr();
 80031ba:	2200      	movs	r2, #0
 80031bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031c0:	481a      	ldr	r0, [pc, #104]	; (800322c <Write_IIC_Byte+0x80>)
 80031c2:	f7fe f89d 	bl	8001300 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)		
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
 80031ca:	e027      	b.n	800321c <Write_IIC_Byte+0x70>
	{
		m=da;
 80031cc:	7bbb      	ldrb	r3, [r7, #14]
 80031ce:	737b      	strb	r3, [r7, #13]
		m=m&0x80;
 80031d0:	7b7b      	ldrb	r3, [r7, #13]
 80031d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031d6:	737b      	strb	r3, [r7, #13]
		if(m==0x80)
 80031d8:	7b7b      	ldrb	r3, [r7, #13]
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	d106      	bne.n	80031ec <Write_IIC_Byte+0x40>
		{
			OLED_SDIN_Set();
 80031de:	2201      	movs	r2, #1
 80031e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031e4:	4811      	ldr	r0, [pc, #68]	; (800322c <Write_IIC_Byte+0x80>)
 80031e6:	f7fe f88b 	bl	8001300 <HAL_GPIO_WritePin>
 80031ea:	e005      	b.n	80031f8 <Write_IIC_Byte+0x4c>
		}
		else 
			OLED_SDIN_Clr();
 80031ec:	2200      	movs	r2, #0
 80031ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031f2:	480e      	ldr	r0, [pc, #56]	; (800322c <Write_IIC_Byte+0x80>)
 80031f4:	f7fe f884 	bl	8001300 <HAL_GPIO_WritePin>
		da=da<<1;
 80031f8:	7bbb      	ldrb	r3, [r7, #14]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	73bb      	strb	r3, [r7, #14]
		OLED_SCLK_Set();
 80031fe:	2201      	movs	r2, #1
 8003200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003204:	4809      	ldr	r0, [pc, #36]	; (800322c <Write_IIC_Byte+0x80>)
 8003206:	f7fe f87b 	bl	8001300 <HAL_GPIO_WritePin>
		OLED_SCLK_Clr();
 800320a:	2200      	movs	r2, #0
 800320c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003210:	4806      	ldr	r0, [pc, #24]	; (800322c <Write_IIC_Byte+0x80>)
 8003212:	f7fe f875 	bl	8001300 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)		
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	3301      	adds	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b07      	cmp	r3, #7
 8003220:	d9d4      	bls.n	80031cc <Write_IIC_Byte+0x20>
	}
}
 8003222:	bf00      	nop
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	48000400 	.word	0x48000400

08003230 <Write_IIC_Command>:
/**********************************************
// IIC Write Command
**********************************************/
void Write_IIC_Command(unsigned char IIC_Command)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
	IIC_Start();
 800323a:	f7ff ff6f 	bl	800311c <IIC_Start>
	Write_IIC_Byte(0x78);            //Slave address,SA0=0
 800323e:	2078      	movs	r0, #120	; 0x78
 8003240:	f7ff ffb4 	bl	80031ac <Write_IIC_Byte>
	IIC_Wait_Ack();	
 8003244:	f7ff ffa0 	bl	8003188 <IIC_Wait_Ack>
	Write_IIC_Byte(0x00);			//write command
 8003248:	2000      	movs	r0, #0
 800324a:	f7ff ffaf 	bl	80031ac <Write_IIC_Byte>
	IIC_Wait_Ack();	
 800324e:	f7ff ff9b 	bl	8003188 <IIC_Wait_Ack>
	Write_IIC_Byte(IIC_Command); 
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ffa9 	bl	80031ac <Write_IIC_Byte>
	IIC_Wait_Ack();	
 800325a:	f7ff ff95 	bl	8003188 <IIC_Wait_Ack>
	IIC_Stop();
 800325e:	f7ff ff7b 	bl	8003158 <IIC_Stop>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <Write_IIC_Data>:
/**********************************************
// IIC Write Data
**********************************************/
void Write_IIC_Data(unsigned char IIC_Data)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	71fb      	strb	r3, [r7, #7]
	IIC_Start();
 8003274:	f7ff ff52 	bl	800311c <IIC_Start>
	Write_IIC_Byte(0x78);			//D/C#=0; R/W#=0
 8003278:	2078      	movs	r0, #120	; 0x78
 800327a:	f7ff ff97 	bl	80031ac <Write_IIC_Byte>
	IIC_Wait_Ack();	
 800327e:	f7ff ff83 	bl	8003188 <IIC_Wait_Ack>
	Write_IIC_Byte(0x40);			//write data
 8003282:	2040      	movs	r0, #64	; 0x40
 8003284:	f7ff ff92 	bl	80031ac <Write_IIC_Byte>
	IIC_Wait_Ack();	
 8003288:	f7ff ff7e 	bl	8003188 <IIC_Wait_Ack>
	Write_IIC_Byte(IIC_Data);
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff ff8c 	bl	80031ac <Write_IIC_Byte>
	IIC_Wait_Ack();	
 8003294:	f7ff ff78 	bl	8003188 <IIC_Wait_Ack>
	IIC_Stop();
 8003298:	f7ff ff5e 	bl	8003158 <IIC_Stop>
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <OLED_WR_Byte>:
void OLED_WR_Byte(unsigned dat,unsigned cmd)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
	if(cmd)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <OLED_WR_Byte+0x1c>
	{
		Write_IIC_Data(dat);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ffd6 	bl	800326a <Write_IIC_Data>
	}
	else 
	{
		Write_IIC_Command(dat);	
	}
}
 80032be:	e004      	b.n	80032ca <OLED_WR_Byte+0x26>
		Write_IIC_Command(dat);	
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ffb3 	bl	8003230 <Write_IIC_Command>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <OLED_Set_Pos>:
	}
}

//��������
void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 	
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	460a      	mov	r2, r1
 80032dc:	71fb      	strb	r3, [r7, #7]
 80032de:	4613      	mov	r3, r2
 80032e0:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 80032e2:	79bb      	ldrb	r3, [r7, #6]
 80032e4:	33b0      	adds	r3, #176	; 0xb0
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ffdb 	bl	80032a4 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f043 0310 	orr.w	r3, r3, #16
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ffd1 	bl	80032a4 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f),OLED_CMD); 
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff ffca 	bl	80032a4 <OLED_WR_Byte>
}   	  
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//ע�⣺��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800331e:	2300      	movs	r3, #0
 8003320:	71fb      	strb	r3, [r7, #7]
 8003322:	e01e      	b.n	8003362 <OLED_Clear+0x4a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	33b0      	adds	r3, #176	; 0xb0
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff ffba 	bl	80032a4 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 8003330:	2100      	movs	r1, #0
 8003332:	2000      	movs	r0, #0
 8003334:	f7ff ffb6 	bl	80032a4 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 8003338:	2100      	movs	r1, #0
 800333a:	2010      	movs	r0, #16
 800333c:	f7ff ffb2 	bl	80032a4 <OLED_WR_Byte>
		for(n=0;n<128;n++)
 8003340:	2300      	movs	r3, #0
 8003342:	71bb      	strb	r3, [r7, #6]
 8003344:	e006      	b.n	8003354 <OLED_Clear+0x3c>
			OLED_WR_Byte(0,OLED_DATA); 
 8003346:	2101      	movs	r1, #1
 8003348:	2000      	movs	r0, #0
 800334a:	f7ff ffab 	bl	80032a4 <OLED_WR_Byte>
		for(n=0;n<128;n++)
 800334e:	79bb      	ldrb	r3, [r7, #6]
 8003350:	3301      	adds	r3, #1
 8003352:	71bb      	strb	r3, [r7, #6]
 8003354:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003358:	2b00      	cmp	r3, #0
 800335a:	daf4      	bge.n	8003346 <OLED_Clear+0x2e>
	for(i=0;i<8;i++)  
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	3301      	adds	r3, #1
 8003360:	71fb      	strb	r3, [r7, #7]
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	2b07      	cmp	r3, #7
 8003366:	d9dd      	bls.n	8003324 <OLED_Clear+0xc>
	} //������ʾ
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <OLED_ShowChar>:
//x:0~127
//y:0~63
//				 
//size:ѡ������ 16/12 
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size)
{      	
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	4604      	mov	r4, r0
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4623      	mov	r3, r4
 8003384:	71fb      	strb	r3, [r7, #7]
 8003386:	4603      	mov	r3, r0
 8003388:	71bb      	strb	r3, [r7, #6]
 800338a:	460b      	mov	r3, r1
 800338c:	717b      	strb	r3, [r7, #5]
 800338e:	4613      	mov	r3, r2
 8003390:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 8003392:	2300      	movs	r3, #0
 8003394:	73bb      	strb	r3, [r7, #14]
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
	c=chr-' ';//�õ�ƫ�ƺ��ֵ			
 800339a:	797b      	ldrb	r3, [r7, #5]
 800339c:	3b20      	subs	r3, #32
 800339e:	73bb      	strb	r3, [r7, #14]
	if(x>Max_Column-1){x=0;y=y+2;}
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	da04      	bge.n	80033b2 <OLED_ShowChar+0x3e>
 80033a8:	2300      	movs	r3, #0
 80033aa:	71fb      	strb	r3, [r7, #7]
 80033ac:	79bb      	ldrb	r3, [r7, #6]
 80033ae:	3302      	adds	r3, #2
 80033b0:	71bb      	strb	r3, [r7, #6]
	if(Char_Size ==16)
 80033b2:	793b      	ldrb	r3, [r7, #4]
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d135      	bne.n	8003424 <OLED_ShowChar+0xb0>
	{
		OLED_Set_Pos(x,y);	
 80033b8:	79ba      	ldrb	r2, [r7, #6]
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ff87 	bl	80032d2 <OLED_Set_Pos>
		for(i = 0; i < 8; i++){
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e00c      	b.n	80033e4 <OLED_ShowChar+0x70>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 80033ca:	7bbb      	ldrb	r3, [r7, #14]
 80033cc:	011a      	lsls	r2, r3, #4
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	4413      	add	r3, r2
 80033d2:	4a25      	ldr	r2, [pc, #148]	; (8003468 <OLED_ShowChar+0xf4>)
 80033d4:	5cd3      	ldrb	r3, [r2, r3]
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff63 	bl	80032a4 <OLED_WR_Byte>
		for(i = 0; i < 8; i++){
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	3301      	adds	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b07      	cmp	r3, #7
 80033e8:	d9ef      	bls.n	80033ca <OLED_ShowChar+0x56>
		}
		OLED_Set_Pos(x,y+1);
 80033ea:	79bb      	ldrb	r3, [r7, #6]
 80033ec:	3301      	adds	r3, #1
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff6c 	bl	80032d2 <OLED_Set_Pos>
		for(i=0;i<8;i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
 80033fe:	e00d      	b.n	800341c <OLED_ShowChar+0xa8>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8003400:	7bbb      	ldrb	r3, [r7, #14]
 8003402:	011a      	lsls	r2, r3, #4
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	4413      	add	r3, r2
 8003408:	3308      	adds	r3, #8
 800340a:	4a17      	ldr	r2, [pc, #92]	; (8003468 <OLED_ShowChar+0xf4>)
 800340c:	5cd3      	ldrb	r3, [r2, r3]
 800340e:	2101      	movs	r1, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff47 	bl	80032a4 <OLED_WR_Byte>
		for(i=0;i<8;i++)
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	3301      	adds	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b07      	cmp	r3, #7
 8003420:	d9ee      	bls.n	8003400 <OLED_ShowChar+0x8c>
	{	
		OLED_Set_Pos(x,y);
		for(i=0;i<6;i++)
			OLED_WR_Byte(F6x8[c][i],OLED_DATA);
	}
}
 8003422:	e01c      	b.n	800345e <OLED_ShowChar+0xea>
		OLED_Set_Pos(x,y);
 8003424:	79ba      	ldrb	r2, [r7, #6]
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ff51 	bl	80032d2 <OLED_Set_Pos>
		for(i=0;i<6;i++)
 8003430:	2300      	movs	r3, #0
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e010      	b.n	8003458 <OLED_ShowChar+0xe4>
			OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 8003436:	7bba      	ldrb	r2, [r7, #14]
 8003438:	7bf9      	ldrb	r1, [r7, #15]
 800343a:	480c      	ldr	r0, [pc, #48]	; (800346c <OLED_ShowChar+0xf8>)
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4403      	add	r3, r0
 8003446:	440b      	add	r3, r1
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2101      	movs	r1, #1
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff29 	bl	80032a4 <OLED_WR_Byte>
		for(i=0;i<6;i++)
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	3301      	adds	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b05      	cmp	r3, #5
 800345c:	d9eb      	bls.n	8003436 <OLED_ShowChar+0xc2>
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bd90      	pop	{r4, r7, pc}
 8003466:	bf00      	nop
 8003468:	08004aa4 	.word	0x08004aa4
 800346c:	0800487c 	.word	0x0800487c

08003470 <OLED_ShowString>:
		OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
	}
} 
//��ʾһ���ַ��Ŵ�
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	603a      	str	r2, [r7, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
 800347e:	460b      	mov	r3, r1
 8003480:	71bb      	strb	r3, [r7, #6]
 8003482:	4613      	mov	r3, r2
 8003484:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 800348a:	e016      	b.n	80034ba <OLED_ShowString+0x4a>
	{		
		OLED_ShowChar(x,y,chr[j],Char_Size);
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	4413      	add	r3, r2
 8003492:	781a      	ldrb	r2, [r3, #0]
 8003494:	797b      	ldrb	r3, [r7, #5]
 8003496:	79b9      	ldrb	r1, [r7, #6]
 8003498:	79f8      	ldrb	r0, [r7, #7]
 800349a:	f7ff ff6b 	bl	8003374 <OLED_ShowChar>
		x+=8;
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	3308      	adds	r3, #8
 80034a2:	71fb      	strb	r3, [r7, #7]
		if(x>120)
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	2b78      	cmp	r3, #120	; 0x78
 80034a8:	d904      	bls.n	80034b4 <OLED_ShowString+0x44>
		{
			x=0;y+=2;
 80034aa:	2300      	movs	r3, #0
 80034ac:	71fb      	strb	r3, [r7, #7]
 80034ae:	79bb      	ldrb	r3, [r7, #6]
 80034b0:	3302      	adds	r3, #2
 80034b2:	71bb      	strb	r3, [r7, #6]
		}
		j++;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	3301      	adds	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	4413      	add	r3, r2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e2      	bne.n	800348c <OLED_ShowString+0x1c>
	}
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <OLED_Init>:
	}
} 

//��ʼ��OLED			    
void OLED_Init(void)
{ 	
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 80034d4:	20c8      	movs	r0, #200	; 0xc8
 80034d6:	f7fd fc4d 	bl	8000d74 <HAL_Delay>
	OLED_WR_Byte(0xAE,OLED_CMD);//�ر���ʾ
 80034da:	2100      	movs	r1, #0
 80034dc:	20ae      	movs	r0, #174	; 0xae
 80034de:	f7ff fee1 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD);//---set low column address
 80034e2:	2100      	movs	r1, #0
 80034e4:	2040      	movs	r0, #64	; 0x40
 80034e6:	f7ff fedd 	bl	80032a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//---set high column address
 80034ea:	2100      	movs	r1, #0
 80034ec:	20b0      	movs	r0, #176	; 0xb0
 80034ee:	f7ff fed9 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0xC8,OLED_CMD);//-not offset
 80034f2:	2100      	movs	r1, #0
 80034f4:	20c8      	movs	r0, #200	; 0xc8
 80034f6:	f7ff fed5 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0x81,OLED_CMD);//���öԱȶ�
 80034fa:	2100      	movs	r1, #0
 80034fc:	2081      	movs	r0, #129	; 0x81
 80034fe:	f7ff fed1 	bl	80032a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xff,OLED_CMD);
 8003502:	2100      	movs	r1, #0
 8003504:	20ff      	movs	r0, #255	; 0xff
 8003506:	f7ff fecd 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0xa1,OLED_CMD);//���ض�������
 800350a:	2100      	movs	r1, #0
 800350c:	20a1      	movs	r0, #161	; 0xa1
 800350e:	f7ff fec9 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0xa6,OLED_CMD);//
 8003512:	2100      	movs	r1, #0
 8003514:	20a6      	movs	r0, #166	; 0xa6
 8003516:	f7ff fec5 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0xa8,OLED_CMD);//��������·��
 800351a:	2100      	movs	r1, #0
 800351c:	20a8      	movs	r0, #168	; 0xa8
 800351e:	f7ff fec1 	bl	80032a4 <OLED_WR_Byte>
	OLED_WR_Byte(0x1f,OLED_CMD);
 8003522:	2100      	movs	r1, #0
 8003524:	201f      	movs	r0, #31
 8003526:	f7ff febd 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0xd3,OLED_CMD);
 800352a:	2100      	movs	r1, #0
 800352c:	20d3      	movs	r0, #211	; 0xd3
 800352e:	f7ff feb9 	bl	80032a4 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);
 8003532:	2100      	movs	r1, #0
 8003534:	2000      	movs	r0, #0
 8003536:	f7ff feb5 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0xd5,OLED_CMD);
 800353a:	2100      	movs	r1, #0
 800353c:	20d5      	movs	r0, #213	; 0xd5
 800353e:	f7ff feb1 	bl	80032a4 <OLED_WR_Byte>
	OLED_WR_Byte(0xf0,OLED_CMD);
 8003542:	2100      	movs	r1, #0
 8003544:	20f0      	movs	r0, #240	; 0xf0
 8003546:	f7ff fead 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0xd9,OLED_CMD);
 800354a:	2100      	movs	r1, #0
 800354c:	20d9      	movs	r0, #217	; 0xd9
 800354e:	f7ff fea9 	bl	80032a4 <OLED_WR_Byte>
	OLED_WR_Byte(0x22,OLED_CMD);
 8003552:	2100      	movs	r1, #0
 8003554:	2022      	movs	r0, #34	; 0x22
 8003556:	f7ff fea5 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0xda,OLED_CMD);
 800355a:	2100      	movs	r1, #0
 800355c:	20da      	movs	r0, #218	; 0xda
 800355e:	f7ff fea1 	bl	80032a4 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);
 8003562:	2100      	movs	r1, #0
 8003564:	2002      	movs	r0, #2
 8003566:	f7ff fe9d 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0xdb,OLED_CMD);
 800356a:	2100      	movs	r1, #0
 800356c:	20db      	movs	r0, #219	; 0xdb
 800356e:	f7ff fe99 	bl	80032a4 <OLED_WR_Byte>
	OLED_WR_Byte(0x49,OLED_CMD);
 8003572:	2100      	movs	r1, #0
 8003574:	2049      	movs	r0, #73	; 0x49
 8003576:	f7ff fe95 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0x8d,OLED_CMD);
 800357a:	2100      	movs	r1, #0
 800357c:	208d      	movs	r0, #141	; 0x8d
 800357e:	f7ff fe91 	bl	80032a4 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);
 8003582:	2100      	movs	r1, #0
 8003584:	2014      	movs	r0, #20
 8003586:	f7ff fe8d 	bl	80032a4 <OLED_WR_Byte>

	OLED_WR_Byte(0xaf,OLED_CMD);
 800358a:	2100      	movs	r1, #0
 800358c:	20af      	movs	r0, #175	; 0xaf
 800358e:	f7ff fe89 	bl	80032a4 <OLED_WR_Byte>
	OLED_Clear();
 8003592:	f7ff fec1 	bl	8003318 <OLED_Clear>
}  
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <std>:
 800359c:	2300      	movs	r3, #0
 800359e:	b510      	push	{r4, lr}
 80035a0:	4604      	mov	r4, r0
 80035a2:	e9c0 3300 	strd	r3, r3, [r0]
 80035a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035aa:	6083      	str	r3, [r0, #8]
 80035ac:	8181      	strh	r1, [r0, #12]
 80035ae:	6643      	str	r3, [r0, #100]	; 0x64
 80035b0:	81c2      	strh	r2, [r0, #14]
 80035b2:	6183      	str	r3, [r0, #24]
 80035b4:	4619      	mov	r1, r3
 80035b6:	2208      	movs	r2, #8
 80035b8:	305c      	adds	r0, #92	; 0x5c
 80035ba:	f000 f93a 	bl	8003832 <memset>
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <std+0x58>)
 80035c0:	6263      	str	r3, [r4, #36]	; 0x24
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <std+0x5c>)
 80035c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <std+0x60>)
 80035c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <std+0x64>)
 80035cc:	6323      	str	r3, [r4, #48]	; 0x30
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <std+0x68>)
 80035d0:	6224      	str	r4, [r4, #32]
 80035d2:	429c      	cmp	r4, r3
 80035d4:	d006      	beq.n	80035e4 <std+0x48>
 80035d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80035da:	4294      	cmp	r4, r2
 80035dc:	d002      	beq.n	80035e4 <std+0x48>
 80035de:	33d0      	adds	r3, #208	; 0xd0
 80035e0:	429c      	cmp	r4, r3
 80035e2:	d105      	bne.n	80035f0 <std+0x54>
 80035e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035ec:	f000 b99a 	b.w	8003924 <__retarget_lock_init_recursive>
 80035f0:	bd10      	pop	{r4, pc}
 80035f2:	bf00      	nop
 80035f4:	080037ad 	.word	0x080037ad
 80035f8:	080037cf 	.word	0x080037cf
 80035fc:	08003807 	.word	0x08003807
 8003600:	0800382b 	.word	0x0800382b
 8003604:	20000110 	.word	0x20000110

08003608 <stdio_exit_handler>:
 8003608:	4a02      	ldr	r2, [pc, #8]	; (8003614 <stdio_exit_handler+0xc>)
 800360a:	4903      	ldr	r1, [pc, #12]	; (8003618 <stdio_exit_handler+0x10>)
 800360c:	4803      	ldr	r0, [pc, #12]	; (800361c <stdio_exit_handler+0x14>)
 800360e:	f000 b869 	b.w	80036e4 <_fwalk_sglue>
 8003612:	bf00      	nop
 8003614:	2000000c 	.word	0x2000000c
 8003618:	0800449d 	.word	0x0800449d
 800361c:	20000018 	.word	0x20000018

08003620 <cleanup_stdio>:
 8003620:	6841      	ldr	r1, [r0, #4]
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <cleanup_stdio+0x34>)
 8003624:	4299      	cmp	r1, r3
 8003626:	b510      	push	{r4, lr}
 8003628:	4604      	mov	r4, r0
 800362a:	d001      	beq.n	8003630 <cleanup_stdio+0x10>
 800362c:	f000 ff36 	bl	800449c <_fflush_r>
 8003630:	68a1      	ldr	r1, [r4, #8]
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <cleanup_stdio+0x38>)
 8003634:	4299      	cmp	r1, r3
 8003636:	d002      	beq.n	800363e <cleanup_stdio+0x1e>
 8003638:	4620      	mov	r0, r4
 800363a:	f000 ff2f 	bl	800449c <_fflush_r>
 800363e:	68e1      	ldr	r1, [r4, #12]
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <cleanup_stdio+0x3c>)
 8003642:	4299      	cmp	r1, r3
 8003644:	d004      	beq.n	8003650 <cleanup_stdio+0x30>
 8003646:	4620      	mov	r0, r4
 8003648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800364c:	f000 bf26 	b.w	800449c <_fflush_r>
 8003650:	bd10      	pop	{r4, pc}
 8003652:	bf00      	nop
 8003654:	20000110 	.word	0x20000110
 8003658:	20000178 	.word	0x20000178
 800365c:	200001e0 	.word	0x200001e0

08003660 <global_stdio_init.part.0>:
 8003660:	b510      	push	{r4, lr}
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <global_stdio_init.part.0+0x30>)
 8003664:	4c0b      	ldr	r4, [pc, #44]	; (8003694 <global_stdio_init.part.0+0x34>)
 8003666:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <global_stdio_init.part.0+0x38>)
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	4620      	mov	r0, r4
 800366c:	2200      	movs	r2, #0
 800366e:	2104      	movs	r1, #4
 8003670:	f7ff ff94 	bl	800359c <std>
 8003674:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003678:	2201      	movs	r2, #1
 800367a:	2109      	movs	r1, #9
 800367c:	f7ff ff8e 	bl	800359c <std>
 8003680:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003684:	2202      	movs	r2, #2
 8003686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800368a:	2112      	movs	r1, #18
 800368c:	f7ff bf86 	b.w	800359c <std>
 8003690:	20000248 	.word	0x20000248
 8003694:	20000110 	.word	0x20000110
 8003698:	08003609 	.word	0x08003609

0800369c <__sfp_lock_acquire>:
 800369c:	4801      	ldr	r0, [pc, #4]	; (80036a4 <__sfp_lock_acquire+0x8>)
 800369e:	f000 b942 	b.w	8003926 <__retarget_lock_acquire_recursive>
 80036a2:	bf00      	nop
 80036a4:	20000251 	.word	0x20000251

080036a8 <__sfp_lock_release>:
 80036a8:	4801      	ldr	r0, [pc, #4]	; (80036b0 <__sfp_lock_release+0x8>)
 80036aa:	f000 b93d 	b.w	8003928 <__retarget_lock_release_recursive>
 80036ae:	bf00      	nop
 80036b0:	20000251 	.word	0x20000251

080036b4 <__sinit>:
 80036b4:	b510      	push	{r4, lr}
 80036b6:	4604      	mov	r4, r0
 80036b8:	f7ff fff0 	bl	800369c <__sfp_lock_acquire>
 80036bc:	6a23      	ldr	r3, [r4, #32]
 80036be:	b11b      	cbz	r3, 80036c8 <__sinit+0x14>
 80036c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c4:	f7ff bff0 	b.w	80036a8 <__sfp_lock_release>
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <__sinit+0x28>)
 80036ca:	6223      	str	r3, [r4, #32]
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <__sinit+0x2c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f5      	bne.n	80036c0 <__sinit+0xc>
 80036d4:	f7ff ffc4 	bl	8003660 <global_stdio_init.part.0>
 80036d8:	e7f2      	b.n	80036c0 <__sinit+0xc>
 80036da:	bf00      	nop
 80036dc:	08003621 	.word	0x08003621
 80036e0:	20000248 	.word	0x20000248

080036e4 <_fwalk_sglue>:
 80036e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036e8:	4607      	mov	r7, r0
 80036ea:	4688      	mov	r8, r1
 80036ec:	4614      	mov	r4, r2
 80036ee:	2600      	movs	r6, #0
 80036f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036f4:	f1b9 0901 	subs.w	r9, r9, #1
 80036f8:	d505      	bpl.n	8003706 <_fwalk_sglue+0x22>
 80036fa:	6824      	ldr	r4, [r4, #0]
 80036fc:	2c00      	cmp	r4, #0
 80036fe:	d1f7      	bne.n	80036f0 <_fwalk_sglue+0xc>
 8003700:	4630      	mov	r0, r6
 8003702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003706:	89ab      	ldrh	r3, [r5, #12]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d907      	bls.n	800371c <_fwalk_sglue+0x38>
 800370c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003710:	3301      	adds	r3, #1
 8003712:	d003      	beq.n	800371c <_fwalk_sglue+0x38>
 8003714:	4629      	mov	r1, r5
 8003716:	4638      	mov	r0, r7
 8003718:	47c0      	blx	r8
 800371a:	4306      	orrs	r6, r0
 800371c:	3568      	adds	r5, #104	; 0x68
 800371e:	e7e9      	b.n	80036f4 <_fwalk_sglue+0x10>

08003720 <iprintf>:
 8003720:	b40f      	push	{r0, r1, r2, r3}
 8003722:	b507      	push	{r0, r1, r2, lr}
 8003724:	4906      	ldr	r1, [pc, #24]	; (8003740 <iprintf+0x20>)
 8003726:	ab04      	add	r3, sp, #16
 8003728:	6808      	ldr	r0, [r1, #0]
 800372a:	f853 2b04 	ldr.w	r2, [r3], #4
 800372e:	6881      	ldr	r1, [r0, #8]
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	f000 fb83 	bl	8003e3c <_vfiprintf_r>
 8003736:	b003      	add	sp, #12
 8003738:	f85d eb04 	ldr.w	lr, [sp], #4
 800373c:	b004      	add	sp, #16
 800373e:	4770      	bx	lr
 8003740:	20000064 	.word	0x20000064

08003744 <sniprintf>:
 8003744:	b40c      	push	{r2, r3}
 8003746:	b530      	push	{r4, r5, lr}
 8003748:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <sniprintf+0x64>)
 800374a:	1e0c      	subs	r4, r1, #0
 800374c:	681d      	ldr	r5, [r3, #0]
 800374e:	b09d      	sub	sp, #116	; 0x74
 8003750:	da08      	bge.n	8003764 <sniprintf+0x20>
 8003752:	238b      	movs	r3, #139	; 0x8b
 8003754:	602b      	str	r3, [r5, #0]
 8003756:	f04f 30ff 	mov.w	r0, #4294967295
 800375a:	b01d      	add	sp, #116	; 0x74
 800375c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003760:	b002      	add	sp, #8
 8003762:	4770      	bx	lr
 8003764:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003768:	f8ad 3014 	strh.w	r3, [sp, #20]
 800376c:	bf14      	ite	ne
 800376e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003772:	4623      	moveq	r3, r4
 8003774:	9304      	str	r3, [sp, #16]
 8003776:	9307      	str	r3, [sp, #28]
 8003778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800377c:	9002      	str	r0, [sp, #8]
 800377e:	9006      	str	r0, [sp, #24]
 8003780:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003784:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003786:	ab21      	add	r3, sp, #132	; 0x84
 8003788:	a902      	add	r1, sp, #8
 800378a:	4628      	mov	r0, r5
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	f000 fa2d 	bl	8003bec <_svfiprintf_r>
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	bfbc      	itt	lt
 8003796:	238b      	movlt	r3, #139	; 0x8b
 8003798:	602b      	strlt	r3, [r5, #0]
 800379a:	2c00      	cmp	r4, #0
 800379c:	d0dd      	beq.n	800375a <sniprintf+0x16>
 800379e:	9b02      	ldr	r3, [sp, #8]
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e7d9      	b.n	800375a <sniprintf+0x16>
 80037a6:	bf00      	nop
 80037a8:	20000064 	.word	0x20000064

080037ac <__sread>:
 80037ac:	b510      	push	{r4, lr}
 80037ae:	460c      	mov	r4, r1
 80037b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b4:	f000 f868 	bl	8003888 <_read_r>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	bfab      	itete	ge
 80037bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037be:	89a3      	ldrhlt	r3, [r4, #12]
 80037c0:	181b      	addge	r3, r3, r0
 80037c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037c6:	bfac      	ite	ge
 80037c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80037ca:	81a3      	strhlt	r3, [r4, #12]
 80037cc:	bd10      	pop	{r4, pc}

080037ce <__swrite>:
 80037ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d2:	461f      	mov	r7, r3
 80037d4:	898b      	ldrh	r3, [r1, #12]
 80037d6:	05db      	lsls	r3, r3, #23
 80037d8:	4605      	mov	r5, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	4616      	mov	r6, r2
 80037de:	d505      	bpl.n	80037ec <__swrite+0x1e>
 80037e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e4:	2302      	movs	r3, #2
 80037e6:	2200      	movs	r2, #0
 80037e8:	f000 f83c 	bl	8003864 <_lseek_r>
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f6:	81a3      	strh	r3, [r4, #12]
 80037f8:	4632      	mov	r2, r6
 80037fa:	463b      	mov	r3, r7
 80037fc:	4628      	mov	r0, r5
 80037fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003802:	f000 b853 	b.w	80038ac <_write_r>

08003806 <__sseek>:
 8003806:	b510      	push	{r4, lr}
 8003808:	460c      	mov	r4, r1
 800380a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380e:	f000 f829 	bl	8003864 <_lseek_r>
 8003812:	1c43      	adds	r3, r0, #1
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	bf15      	itete	ne
 8003818:	6560      	strne	r0, [r4, #84]	; 0x54
 800381a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800381e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003822:	81a3      	strheq	r3, [r4, #12]
 8003824:	bf18      	it	ne
 8003826:	81a3      	strhne	r3, [r4, #12]
 8003828:	bd10      	pop	{r4, pc}

0800382a <__sclose>:
 800382a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382e:	f000 b809 	b.w	8003844 <_close_r>

08003832 <memset>:
 8003832:	4402      	add	r2, r0
 8003834:	4603      	mov	r3, r0
 8003836:	4293      	cmp	r3, r2
 8003838:	d100      	bne.n	800383c <memset+0xa>
 800383a:	4770      	bx	lr
 800383c:	f803 1b01 	strb.w	r1, [r3], #1
 8003840:	e7f9      	b.n	8003836 <memset+0x4>
	...

08003844 <_close_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4d06      	ldr	r5, [pc, #24]	; (8003860 <_close_r+0x1c>)
 8003848:	2300      	movs	r3, #0
 800384a:	4604      	mov	r4, r0
 800384c:	4608      	mov	r0, r1
 800384e:	602b      	str	r3, [r5, #0]
 8003850:	f7fd f8d9 	bl	8000a06 <_close>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	d102      	bne.n	800385e <_close_r+0x1a>
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	b103      	cbz	r3, 800385e <_close_r+0x1a>
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	bd38      	pop	{r3, r4, r5, pc}
 8003860:	2000024c 	.word	0x2000024c

08003864 <_lseek_r>:
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4d07      	ldr	r5, [pc, #28]	; (8003884 <_lseek_r+0x20>)
 8003868:	4604      	mov	r4, r0
 800386a:	4608      	mov	r0, r1
 800386c:	4611      	mov	r1, r2
 800386e:	2200      	movs	r2, #0
 8003870:	602a      	str	r2, [r5, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	f7fd f8ee 	bl	8000a54 <_lseek>
 8003878:	1c43      	adds	r3, r0, #1
 800387a:	d102      	bne.n	8003882 <_lseek_r+0x1e>
 800387c:	682b      	ldr	r3, [r5, #0]
 800387e:	b103      	cbz	r3, 8003882 <_lseek_r+0x1e>
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	bd38      	pop	{r3, r4, r5, pc}
 8003884:	2000024c 	.word	0x2000024c

08003888 <_read_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	4d07      	ldr	r5, [pc, #28]	; (80038a8 <_read_r+0x20>)
 800388c:	4604      	mov	r4, r0
 800388e:	4608      	mov	r0, r1
 8003890:	4611      	mov	r1, r2
 8003892:	2200      	movs	r2, #0
 8003894:	602a      	str	r2, [r5, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	f7fd f87c 	bl	8000994 <_read>
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	d102      	bne.n	80038a6 <_read_r+0x1e>
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	b103      	cbz	r3, 80038a6 <_read_r+0x1e>
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	bd38      	pop	{r3, r4, r5, pc}
 80038a8:	2000024c 	.word	0x2000024c

080038ac <_write_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4d07      	ldr	r5, [pc, #28]	; (80038cc <_write_r+0x20>)
 80038b0:	4604      	mov	r4, r0
 80038b2:	4608      	mov	r0, r1
 80038b4:	4611      	mov	r1, r2
 80038b6:	2200      	movs	r2, #0
 80038b8:	602a      	str	r2, [r5, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f7fd f887 	bl	80009ce <_write>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d102      	bne.n	80038ca <_write_r+0x1e>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	b103      	cbz	r3, 80038ca <_write_r+0x1e>
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	2000024c 	.word	0x2000024c

080038d0 <__errno>:
 80038d0:	4b01      	ldr	r3, [pc, #4]	; (80038d8 <__errno+0x8>)
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000064 	.word	0x20000064

080038dc <__libc_init_array>:
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	4d0d      	ldr	r5, [pc, #52]	; (8003914 <__libc_init_array+0x38>)
 80038e0:	4c0d      	ldr	r4, [pc, #52]	; (8003918 <__libc_init_array+0x3c>)
 80038e2:	1b64      	subs	r4, r4, r5
 80038e4:	10a4      	asrs	r4, r4, #2
 80038e6:	2600      	movs	r6, #0
 80038e8:	42a6      	cmp	r6, r4
 80038ea:	d109      	bne.n	8003900 <__libc_init_array+0x24>
 80038ec:	4d0b      	ldr	r5, [pc, #44]	; (800391c <__libc_init_array+0x40>)
 80038ee:	4c0c      	ldr	r4, [pc, #48]	; (8003920 <__libc_init_array+0x44>)
 80038f0:	f000 ff78 	bl	80047e4 <_init>
 80038f4:	1b64      	subs	r4, r4, r5
 80038f6:	10a4      	asrs	r4, r4, #2
 80038f8:	2600      	movs	r6, #0
 80038fa:	42a6      	cmp	r6, r4
 80038fc:	d105      	bne.n	800390a <__libc_init_array+0x2e>
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
 8003900:	f855 3b04 	ldr.w	r3, [r5], #4
 8003904:	4798      	blx	r3
 8003906:	3601      	adds	r6, #1
 8003908:	e7ee      	b.n	80038e8 <__libc_init_array+0xc>
 800390a:	f855 3b04 	ldr.w	r3, [r5], #4
 800390e:	4798      	blx	r3
 8003910:	3601      	adds	r6, #1
 8003912:	e7f2      	b.n	80038fa <__libc_init_array+0x1e>
 8003914:	080050d0 	.word	0x080050d0
 8003918:	080050d0 	.word	0x080050d0
 800391c:	080050d0 	.word	0x080050d0
 8003920:	080050d4 	.word	0x080050d4

08003924 <__retarget_lock_init_recursive>:
 8003924:	4770      	bx	lr

08003926 <__retarget_lock_acquire_recursive>:
 8003926:	4770      	bx	lr

08003928 <__retarget_lock_release_recursive>:
 8003928:	4770      	bx	lr

0800392a <memcpy>:
 800392a:	440a      	add	r2, r1
 800392c:	4291      	cmp	r1, r2
 800392e:	f100 33ff 	add.w	r3, r0, #4294967295
 8003932:	d100      	bne.n	8003936 <memcpy+0xc>
 8003934:	4770      	bx	lr
 8003936:	b510      	push	{r4, lr}
 8003938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800393c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003940:	4291      	cmp	r1, r2
 8003942:	d1f9      	bne.n	8003938 <memcpy+0xe>
 8003944:	bd10      	pop	{r4, pc}
	...

08003948 <_free_r>:
 8003948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800394a:	2900      	cmp	r1, #0
 800394c:	d044      	beq.n	80039d8 <_free_r+0x90>
 800394e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003952:	9001      	str	r0, [sp, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f1a1 0404 	sub.w	r4, r1, #4
 800395a:	bfb8      	it	lt
 800395c:	18e4      	addlt	r4, r4, r3
 800395e:	f000 f8df 	bl	8003b20 <__malloc_lock>
 8003962:	4a1e      	ldr	r2, [pc, #120]	; (80039dc <_free_r+0x94>)
 8003964:	9801      	ldr	r0, [sp, #4]
 8003966:	6813      	ldr	r3, [r2, #0]
 8003968:	b933      	cbnz	r3, 8003978 <_free_r+0x30>
 800396a:	6063      	str	r3, [r4, #4]
 800396c:	6014      	str	r4, [r2, #0]
 800396e:	b003      	add	sp, #12
 8003970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003974:	f000 b8da 	b.w	8003b2c <__malloc_unlock>
 8003978:	42a3      	cmp	r3, r4
 800397a:	d908      	bls.n	800398e <_free_r+0x46>
 800397c:	6825      	ldr	r5, [r4, #0]
 800397e:	1961      	adds	r1, r4, r5
 8003980:	428b      	cmp	r3, r1
 8003982:	bf01      	itttt	eq
 8003984:	6819      	ldreq	r1, [r3, #0]
 8003986:	685b      	ldreq	r3, [r3, #4]
 8003988:	1949      	addeq	r1, r1, r5
 800398a:	6021      	streq	r1, [r4, #0]
 800398c:	e7ed      	b.n	800396a <_free_r+0x22>
 800398e:	461a      	mov	r2, r3
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	b10b      	cbz	r3, 8003998 <_free_r+0x50>
 8003994:	42a3      	cmp	r3, r4
 8003996:	d9fa      	bls.n	800398e <_free_r+0x46>
 8003998:	6811      	ldr	r1, [r2, #0]
 800399a:	1855      	adds	r5, r2, r1
 800399c:	42a5      	cmp	r5, r4
 800399e:	d10b      	bne.n	80039b8 <_free_r+0x70>
 80039a0:	6824      	ldr	r4, [r4, #0]
 80039a2:	4421      	add	r1, r4
 80039a4:	1854      	adds	r4, r2, r1
 80039a6:	42a3      	cmp	r3, r4
 80039a8:	6011      	str	r1, [r2, #0]
 80039aa:	d1e0      	bne.n	800396e <_free_r+0x26>
 80039ac:	681c      	ldr	r4, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	6053      	str	r3, [r2, #4]
 80039b2:	440c      	add	r4, r1
 80039b4:	6014      	str	r4, [r2, #0]
 80039b6:	e7da      	b.n	800396e <_free_r+0x26>
 80039b8:	d902      	bls.n	80039c0 <_free_r+0x78>
 80039ba:	230c      	movs	r3, #12
 80039bc:	6003      	str	r3, [r0, #0]
 80039be:	e7d6      	b.n	800396e <_free_r+0x26>
 80039c0:	6825      	ldr	r5, [r4, #0]
 80039c2:	1961      	adds	r1, r4, r5
 80039c4:	428b      	cmp	r3, r1
 80039c6:	bf04      	itt	eq
 80039c8:	6819      	ldreq	r1, [r3, #0]
 80039ca:	685b      	ldreq	r3, [r3, #4]
 80039cc:	6063      	str	r3, [r4, #4]
 80039ce:	bf04      	itt	eq
 80039d0:	1949      	addeq	r1, r1, r5
 80039d2:	6021      	streq	r1, [r4, #0]
 80039d4:	6054      	str	r4, [r2, #4]
 80039d6:	e7ca      	b.n	800396e <_free_r+0x26>
 80039d8:	b003      	add	sp, #12
 80039da:	bd30      	pop	{r4, r5, pc}
 80039dc:	20000254 	.word	0x20000254

080039e0 <sbrk_aligned>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	4e0e      	ldr	r6, [pc, #56]	; (8003a1c <sbrk_aligned+0x3c>)
 80039e4:	460c      	mov	r4, r1
 80039e6:	6831      	ldr	r1, [r6, #0]
 80039e8:	4605      	mov	r5, r0
 80039ea:	b911      	cbnz	r1, 80039f2 <sbrk_aligned+0x12>
 80039ec:	f000 fe2e 	bl	800464c <_sbrk_r>
 80039f0:	6030      	str	r0, [r6, #0]
 80039f2:	4621      	mov	r1, r4
 80039f4:	4628      	mov	r0, r5
 80039f6:	f000 fe29 	bl	800464c <_sbrk_r>
 80039fa:	1c43      	adds	r3, r0, #1
 80039fc:	d00a      	beq.n	8003a14 <sbrk_aligned+0x34>
 80039fe:	1cc4      	adds	r4, r0, #3
 8003a00:	f024 0403 	bic.w	r4, r4, #3
 8003a04:	42a0      	cmp	r0, r4
 8003a06:	d007      	beq.n	8003a18 <sbrk_aligned+0x38>
 8003a08:	1a21      	subs	r1, r4, r0
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f000 fe1e 	bl	800464c <_sbrk_r>
 8003a10:	3001      	adds	r0, #1
 8003a12:	d101      	bne.n	8003a18 <sbrk_aligned+0x38>
 8003a14:	f04f 34ff 	mov.w	r4, #4294967295
 8003a18:	4620      	mov	r0, r4
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	20000258 	.word	0x20000258

08003a20 <_malloc_r>:
 8003a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a24:	1ccd      	adds	r5, r1, #3
 8003a26:	f025 0503 	bic.w	r5, r5, #3
 8003a2a:	3508      	adds	r5, #8
 8003a2c:	2d0c      	cmp	r5, #12
 8003a2e:	bf38      	it	cc
 8003a30:	250c      	movcc	r5, #12
 8003a32:	2d00      	cmp	r5, #0
 8003a34:	4607      	mov	r7, r0
 8003a36:	db01      	blt.n	8003a3c <_malloc_r+0x1c>
 8003a38:	42a9      	cmp	r1, r5
 8003a3a:	d905      	bls.n	8003a48 <_malloc_r+0x28>
 8003a3c:	230c      	movs	r3, #12
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	2600      	movs	r6, #0
 8003a42:	4630      	mov	r0, r6
 8003a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b1c <_malloc_r+0xfc>
 8003a4c:	f000 f868 	bl	8003b20 <__malloc_lock>
 8003a50:	f8d8 3000 	ldr.w	r3, [r8]
 8003a54:	461c      	mov	r4, r3
 8003a56:	bb5c      	cbnz	r4, 8003ab0 <_malloc_r+0x90>
 8003a58:	4629      	mov	r1, r5
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	f7ff ffc0 	bl	80039e0 <sbrk_aligned>
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	4604      	mov	r4, r0
 8003a64:	d155      	bne.n	8003b12 <_malloc_r+0xf2>
 8003a66:	f8d8 4000 	ldr.w	r4, [r8]
 8003a6a:	4626      	mov	r6, r4
 8003a6c:	2e00      	cmp	r6, #0
 8003a6e:	d145      	bne.n	8003afc <_malloc_r+0xdc>
 8003a70:	2c00      	cmp	r4, #0
 8003a72:	d048      	beq.n	8003b06 <_malloc_r+0xe6>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	4631      	mov	r1, r6
 8003a78:	4638      	mov	r0, r7
 8003a7a:	eb04 0903 	add.w	r9, r4, r3
 8003a7e:	f000 fde5 	bl	800464c <_sbrk_r>
 8003a82:	4581      	cmp	r9, r0
 8003a84:	d13f      	bne.n	8003b06 <_malloc_r+0xe6>
 8003a86:	6821      	ldr	r1, [r4, #0]
 8003a88:	1a6d      	subs	r5, r5, r1
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	f7ff ffa7 	bl	80039e0 <sbrk_aligned>
 8003a92:	3001      	adds	r0, #1
 8003a94:	d037      	beq.n	8003b06 <_malloc_r+0xe6>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	442b      	add	r3, r5
 8003a9a:	6023      	str	r3, [r4, #0]
 8003a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d038      	beq.n	8003b16 <_malloc_r+0xf6>
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	42a2      	cmp	r2, r4
 8003aa8:	d12b      	bne.n	8003b02 <_malloc_r+0xe2>
 8003aaa:	2200      	movs	r2, #0
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	e00f      	b.n	8003ad0 <_malloc_r+0xb0>
 8003ab0:	6822      	ldr	r2, [r4, #0]
 8003ab2:	1b52      	subs	r2, r2, r5
 8003ab4:	d41f      	bmi.n	8003af6 <_malloc_r+0xd6>
 8003ab6:	2a0b      	cmp	r2, #11
 8003ab8:	d917      	bls.n	8003aea <_malloc_r+0xca>
 8003aba:	1961      	adds	r1, r4, r5
 8003abc:	42a3      	cmp	r3, r4
 8003abe:	6025      	str	r5, [r4, #0]
 8003ac0:	bf18      	it	ne
 8003ac2:	6059      	strne	r1, [r3, #4]
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	bf08      	it	eq
 8003ac8:	f8c8 1000 	streq.w	r1, [r8]
 8003acc:	5162      	str	r2, [r4, r5]
 8003ace:	604b      	str	r3, [r1, #4]
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f104 060b 	add.w	r6, r4, #11
 8003ad6:	f000 f829 	bl	8003b2c <__malloc_unlock>
 8003ada:	f026 0607 	bic.w	r6, r6, #7
 8003ade:	1d23      	adds	r3, r4, #4
 8003ae0:	1af2      	subs	r2, r6, r3
 8003ae2:	d0ae      	beq.n	8003a42 <_malloc_r+0x22>
 8003ae4:	1b9b      	subs	r3, r3, r6
 8003ae6:	50a3      	str	r3, [r4, r2]
 8003ae8:	e7ab      	b.n	8003a42 <_malloc_r+0x22>
 8003aea:	42a3      	cmp	r3, r4
 8003aec:	6862      	ldr	r2, [r4, #4]
 8003aee:	d1dd      	bne.n	8003aac <_malloc_r+0x8c>
 8003af0:	f8c8 2000 	str.w	r2, [r8]
 8003af4:	e7ec      	b.n	8003ad0 <_malloc_r+0xb0>
 8003af6:	4623      	mov	r3, r4
 8003af8:	6864      	ldr	r4, [r4, #4]
 8003afa:	e7ac      	b.n	8003a56 <_malloc_r+0x36>
 8003afc:	4634      	mov	r4, r6
 8003afe:	6876      	ldr	r6, [r6, #4]
 8003b00:	e7b4      	b.n	8003a6c <_malloc_r+0x4c>
 8003b02:	4613      	mov	r3, r2
 8003b04:	e7cc      	b.n	8003aa0 <_malloc_r+0x80>
 8003b06:	230c      	movs	r3, #12
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	f000 f80e 	bl	8003b2c <__malloc_unlock>
 8003b10:	e797      	b.n	8003a42 <_malloc_r+0x22>
 8003b12:	6025      	str	r5, [r4, #0]
 8003b14:	e7dc      	b.n	8003ad0 <_malloc_r+0xb0>
 8003b16:	605b      	str	r3, [r3, #4]
 8003b18:	deff      	udf	#255	; 0xff
 8003b1a:	bf00      	nop
 8003b1c:	20000254 	.word	0x20000254

08003b20 <__malloc_lock>:
 8003b20:	4801      	ldr	r0, [pc, #4]	; (8003b28 <__malloc_lock+0x8>)
 8003b22:	f7ff bf00 	b.w	8003926 <__retarget_lock_acquire_recursive>
 8003b26:	bf00      	nop
 8003b28:	20000250 	.word	0x20000250

08003b2c <__malloc_unlock>:
 8003b2c:	4801      	ldr	r0, [pc, #4]	; (8003b34 <__malloc_unlock+0x8>)
 8003b2e:	f7ff befb 	b.w	8003928 <__retarget_lock_release_recursive>
 8003b32:	bf00      	nop
 8003b34:	20000250 	.word	0x20000250

08003b38 <__ssputs_r>:
 8003b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b3c:	688e      	ldr	r6, [r1, #8]
 8003b3e:	461f      	mov	r7, r3
 8003b40:	42be      	cmp	r6, r7
 8003b42:	680b      	ldr	r3, [r1, #0]
 8003b44:	4682      	mov	sl, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	4690      	mov	r8, r2
 8003b4a:	d82c      	bhi.n	8003ba6 <__ssputs_r+0x6e>
 8003b4c:	898a      	ldrh	r2, [r1, #12]
 8003b4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b52:	d026      	beq.n	8003ba2 <__ssputs_r+0x6a>
 8003b54:	6965      	ldr	r5, [r4, #20]
 8003b56:	6909      	ldr	r1, [r1, #16]
 8003b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b5c:	eba3 0901 	sub.w	r9, r3, r1
 8003b60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b64:	1c7b      	adds	r3, r7, #1
 8003b66:	444b      	add	r3, r9
 8003b68:	106d      	asrs	r5, r5, #1
 8003b6a:	429d      	cmp	r5, r3
 8003b6c:	bf38      	it	cc
 8003b6e:	461d      	movcc	r5, r3
 8003b70:	0553      	lsls	r3, r2, #21
 8003b72:	d527      	bpl.n	8003bc4 <__ssputs_r+0x8c>
 8003b74:	4629      	mov	r1, r5
 8003b76:	f7ff ff53 	bl	8003a20 <_malloc_r>
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	b360      	cbz	r0, 8003bd8 <__ssputs_r+0xa0>
 8003b7e:	6921      	ldr	r1, [r4, #16]
 8003b80:	464a      	mov	r2, r9
 8003b82:	f7ff fed2 	bl	800392a <memcpy>
 8003b86:	89a3      	ldrh	r3, [r4, #12]
 8003b88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	6126      	str	r6, [r4, #16]
 8003b94:	6165      	str	r5, [r4, #20]
 8003b96:	444e      	add	r6, r9
 8003b98:	eba5 0509 	sub.w	r5, r5, r9
 8003b9c:	6026      	str	r6, [r4, #0]
 8003b9e:	60a5      	str	r5, [r4, #8]
 8003ba0:	463e      	mov	r6, r7
 8003ba2:	42be      	cmp	r6, r7
 8003ba4:	d900      	bls.n	8003ba8 <__ssputs_r+0x70>
 8003ba6:	463e      	mov	r6, r7
 8003ba8:	6820      	ldr	r0, [r4, #0]
 8003baa:	4632      	mov	r2, r6
 8003bac:	4641      	mov	r1, r8
 8003bae:	f000 fd33 	bl	8004618 <memmove>
 8003bb2:	68a3      	ldr	r3, [r4, #8]
 8003bb4:	1b9b      	subs	r3, r3, r6
 8003bb6:	60a3      	str	r3, [r4, #8]
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	4433      	add	r3, r6
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc4:	462a      	mov	r2, r5
 8003bc6:	f000 fd51 	bl	800466c <_realloc_r>
 8003bca:	4606      	mov	r6, r0
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d1e0      	bne.n	8003b92 <__ssputs_r+0x5a>
 8003bd0:	6921      	ldr	r1, [r4, #16]
 8003bd2:	4650      	mov	r0, sl
 8003bd4:	f7ff feb8 	bl	8003948 <_free_r>
 8003bd8:	230c      	movs	r3, #12
 8003bda:	f8ca 3000 	str.w	r3, [sl]
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be4:	81a3      	strh	r3, [r4, #12]
 8003be6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bea:	e7e9      	b.n	8003bc0 <__ssputs_r+0x88>

08003bec <_svfiprintf_r>:
 8003bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf0:	4698      	mov	r8, r3
 8003bf2:	898b      	ldrh	r3, [r1, #12]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	b09d      	sub	sp, #116	; 0x74
 8003bf8:	4607      	mov	r7, r0
 8003bfa:	460d      	mov	r5, r1
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	d50e      	bpl.n	8003c1e <_svfiprintf_r+0x32>
 8003c00:	690b      	ldr	r3, [r1, #16]
 8003c02:	b963      	cbnz	r3, 8003c1e <_svfiprintf_r+0x32>
 8003c04:	2140      	movs	r1, #64	; 0x40
 8003c06:	f7ff ff0b 	bl	8003a20 <_malloc_r>
 8003c0a:	6028      	str	r0, [r5, #0]
 8003c0c:	6128      	str	r0, [r5, #16]
 8003c0e:	b920      	cbnz	r0, 8003c1a <_svfiprintf_r+0x2e>
 8003c10:	230c      	movs	r3, #12
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	e0d0      	b.n	8003dbc <_svfiprintf_r+0x1d0>
 8003c1a:	2340      	movs	r3, #64	; 0x40
 8003c1c:	616b      	str	r3, [r5, #20]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	9309      	str	r3, [sp, #36]	; 0x24
 8003c22:	2320      	movs	r3, #32
 8003c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c2c:	2330      	movs	r3, #48	; 0x30
 8003c2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003dd4 <_svfiprintf_r+0x1e8>
 8003c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c36:	f04f 0901 	mov.w	r9, #1
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	469a      	mov	sl, r3
 8003c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c42:	b10a      	cbz	r2, 8003c48 <_svfiprintf_r+0x5c>
 8003c44:	2a25      	cmp	r2, #37	; 0x25
 8003c46:	d1f9      	bne.n	8003c3c <_svfiprintf_r+0x50>
 8003c48:	ebba 0b04 	subs.w	fp, sl, r4
 8003c4c:	d00b      	beq.n	8003c66 <_svfiprintf_r+0x7a>
 8003c4e:	465b      	mov	r3, fp
 8003c50:	4622      	mov	r2, r4
 8003c52:	4629      	mov	r1, r5
 8003c54:	4638      	mov	r0, r7
 8003c56:	f7ff ff6f 	bl	8003b38 <__ssputs_r>
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	f000 80a9 	beq.w	8003db2 <_svfiprintf_r+0x1c6>
 8003c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c62:	445a      	add	r2, fp
 8003c64:	9209      	str	r2, [sp, #36]	; 0x24
 8003c66:	f89a 3000 	ldrb.w	r3, [sl]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80a1 	beq.w	8003db2 <_svfiprintf_r+0x1c6>
 8003c70:	2300      	movs	r3, #0
 8003c72:	f04f 32ff 	mov.w	r2, #4294967295
 8003c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c7a:	f10a 0a01 	add.w	sl, sl, #1
 8003c7e:	9304      	str	r3, [sp, #16]
 8003c80:	9307      	str	r3, [sp, #28]
 8003c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c86:	931a      	str	r3, [sp, #104]	; 0x68
 8003c88:	4654      	mov	r4, sl
 8003c8a:	2205      	movs	r2, #5
 8003c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c90:	4850      	ldr	r0, [pc, #320]	; (8003dd4 <_svfiprintf_r+0x1e8>)
 8003c92:	f7fc faa5 	bl	80001e0 <memchr>
 8003c96:	9a04      	ldr	r2, [sp, #16]
 8003c98:	b9d8      	cbnz	r0, 8003cd2 <_svfiprintf_r+0xe6>
 8003c9a:	06d0      	lsls	r0, r2, #27
 8003c9c:	bf44      	itt	mi
 8003c9e:	2320      	movmi	r3, #32
 8003ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ca4:	0711      	lsls	r1, r2, #28
 8003ca6:	bf44      	itt	mi
 8003ca8:	232b      	movmi	r3, #43	; 0x2b
 8003caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cae:	f89a 3000 	ldrb.w	r3, [sl]
 8003cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb4:	d015      	beq.n	8003ce2 <_svfiprintf_r+0xf6>
 8003cb6:	9a07      	ldr	r2, [sp, #28]
 8003cb8:	4654      	mov	r4, sl
 8003cba:	2000      	movs	r0, #0
 8003cbc:	f04f 0c0a 	mov.w	ip, #10
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cc6:	3b30      	subs	r3, #48	; 0x30
 8003cc8:	2b09      	cmp	r3, #9
 8003cca:	d94d      	bls.n	8003d68 <_svfiprintf_r+0x17c>
 8003ccc:	b1b0      	cbz	r0, 8003cfc <_svfiprintf_r+0x110>
 8003cce:	9207      	str	r2, [sp, #28]
 8003cd0:	e014      	b.n	8003cfc <_svfiprintf_r+0x110>
 8003cd2:	eba0 0308 	sub.w	r3, r0, r8
 8003cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	9304      	str	r3, [sp, #16]
 8003cde:	46a2      	mov	sl, r4
 8003ce0:	e7d2      	b.n	8003c88 <_svfiprintf_r+0x9c>
 8003ce2:	9b03      	ldr	r3, [sp, #12]
 8003ce4:	1d19      	adds	r1, r3, #4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	9103      	str	r1, [sp, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bfbb      	ittet	lt
 8003cee:	425b      	neglt	r3, r3
 8003cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8003cf4:	9307      	strge	r3, [sp, #28]
 8003cf6:	9307      	strlt	r3, [sp, #28]
 8003cf8:	bfb8      	it	lt
 8003cfa:	9204      	strlt	r2, [sp, #16]
 8003cfc:	7823      	ldrb	r3, [r4, #0]
 8003cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8003d00:	d10c      	bne.n	8003d1c <_svfiprintf_r+0x130>
 8003d02:	7863      	ldrb	r3, [r4, #1]
 8003d04:	2b2a      	cmp	r3, #42	; 0x2a
 8003d06:	d134      	bne.n	8003d72 <_svfiprintf_r+0x186>
 8003d08:	9b03      	ldr	r3, [sp, #12]
 8003d0a:	1d1a      	adds	r2, r3, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	9203      	str	r2, [sp, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bfb8      	it	lt
 8003d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d18:	3402      	adds	r4, #2
 8003d1a:	9305      	str	r3, [sp, #20]
 8003d1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003de4 <_svfiprintf_r+0x1f8>
 8003d20:	7821      	ldrb	r1, [r4, #0]
 8003d22:	2203      	movs	r2, #3
 8003d24:	4650      	mov	r0, sl
 8003d26:	f7fc fa5b 	bl	80001e0 <memchr>
 8003d2a:	b138      	cbz	r0, 8003d3c <_svfiprintf_r+0x150>
 8003d2c:	9b04      	ldr	r3, [sp, #16]
 8003d2e:	eba0 000a 	sub.w	r0, r0, sl
 8003d32:	2240      	movs	r2, #64	; 0x40
 8003d34:	4082      	lsls	r2, r0
 8003d36:	4313      	orrs	r3, r2
 8003d38:	3401      	adds	r4, #1
 8003d3a:	9304      	str	r3, [sp, #16]
 8003d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d40:	4825      	ldr	r0, [pc, #148]	; (8003dd8 <_svfiprintf_r+0x1ec>)
 8003d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d46:	2206      	movs	r2, #6
 8003d48:	f7fc fa4a 	bl	80001e0 <memchr>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d038      	beq.n	8003dc2 <_svfiprintf_r+0x1d6>
 8003d50:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <_svfiprintf_r+0x1f0>)
 8003d52:	bb1b      	cbnz	r3, 8003d9c <_svfiprintf_r+0x1b0>
 8003d54:	9b03      	ldr	r3, [sp, #12]
 8003d56:	3307      	adds	r3, #7
 8003d58:	f023 0307 	bic.w	r3, r3, #7
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	9303      	str	r3, [sp, #12]
 8003d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d62:	4433      	add	r3, r6
 8003d64:	9309      	str	r3, [sp, #36]	; 0x24
 8003d66:	e768      	b.n	8003c3a <_svfiprintf_r+0x4e>
 8003d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	2001      	movs	r0, #1
 8003d70:	e7a6      	b.n	8003cc0 <_svfiprintf_r+0xd4>
 8003d72:	2300      	movs	r3, #0
 8003d74:	3401      	adds	r4, #1
 8003d76:	9305      	str	r3, [sp, #20]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f04f 0c0a 	mov.w	ip, #10
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d84:	3a30      	subs	r2, #48	; 0x30
 8003d86:	2a09      	cmp	r2, #9
 8003d88:	d903      	bls.n	8003d92 <_svfiprintf_r+0x1a6>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0c6      	beq.n	8003d1c <_svfiprintf_r+0x130>
 8003d8e:	9105      	str	r1, [sp, #20]
 8003d90:	e7c4      	b.n	8003d1c <_svfiprintf_r+0x130>
 8003d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d96:	4604      	mov	r4, r0
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e7f0      	b.n	8003d7e <_svfiprintf_r+0x192>
 8003d9c:	ab03      	add	r3, sp, #12
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	462a      	mov	r2, r5
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <_svfiprintf_r+0x1f4>)
 8003da4:	a904      	add	r1, sp, #16
 8003da6:	4638      	mov	r0, r7
 8003da8:	f3af 8000 	nop.w
 8003dac:	1c42      	adds	r2, r0, #1
 8003dae:	4606      	mov	r6, r0
 8003db0:	d1d6      	bne.n	8003d60 <_svfiprintf_r+0x174>
 8003db2:	89ab      	ldrh	r3, [r5, #12]
 8003db4:	065b      	lsls	r3, r3, #25
 8003db6:	f53f af2d 	bmi.w	8003c14 <_svfiprintf_r+0x28>
 8003dba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dbc:	b01d      	add	sp, #116	; 0x74
 8003dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc2:	ab03      	add	r3, sp, #12
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	462a      	mov	r2, r5
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <_svfiprintf_r+0x1f4>)
 8003dca:	a904      	add	r1, sp, #16
 8003dcc:	4638      	mov	r0, r7
 8003dce:	f000 f9bd 	bl	800414c <_printf_i>
 8003dd2:	e7eb      	b.n	8003dac <_svfiprintf_r+0x1c0>
 8003dd4:	08005094 	.word	0x08005094
 8003dd8:	0800509e 	.word	0x0800509e
 8003ddc:	00000000 	.word	0x00000000
 8003de0:	08003b39 	.word	0x08003b39
 8003de4:	0800509a 	.word	0x0800509a

08003de8 <__sfputc_r>:
 8003de8:	6893      	ldr	r3, [r2, #8]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	b410      	push	{r4}
 8003df0:	6093      	str	r3, [r2, #8]
 8003df2:	da08      	bge.n	8003e06 <__sfputc_r+0x1e>
 8003df4:	6994      	ldr	r4, [r2, #24]
 8003df6:	42a3      	cmp	r3, r4
 8003df8:	db01      	blt.n	8003dfe <__sfputc_r+0x16>
 8003dfa:	290a      	cmp	r1, #10
 8003dfc:	d103      	bne.n	8003e06 <__sfputc_r+0x1e>
 8003dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e02:	f000 bb73 	b.w	80044ec <__swbuf_r>
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	1c58      	adds	r0, r3, #1
 8003e0a:	6010      	str	r0, [r2, #0]
 8003e0c:	7019      	strb	r1, [r3, #0]
 8003e0e:	4608      	mov	r0, r1
 8003e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <__sfputs_r>:
 8003e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e18:	4606      	mov	r6, r0
 8003e1a:	460f      	mov	r7, r1
 8003e1c:	4614      	mov	r4, r2
 8003e1e:	18d5      	adds	r5, r2, r3
 8003e20:	42ac      	cmp	r4, r5
 8003e22:	d101      	bne.n	8003e28 <__sfputs_r+0x12>
 8003e24:	2000      	movs	r0, #0
 8003e26:	e007      	b.n	8003e38 <__sfputs_r+0x22>
 8003e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e2c:	463a      	mov	r2, r7
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f7ff ffda 	bl	8003de8 <__sfputc_r>
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	d1f3      	bne.n	8003e20 <__sfputs_r+0xa>
 8003e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e3c <_vfiprintf_r>:
 8003e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e40:	460d      	mov	r5, r1
 8003e42:	b09d      	sub	sp, #116	; 0x74
 8003e44:	4614      	mov	r4, r2
 8003e46:	4698      	mov	r8, r3
 8003e48:	4606      	mov	r6, r0
 8003e4a:	b118      	cbz	r0, 8003e54 <_vfiprintf_r+0x18>
 8003e4c:	6a03      	ldr	r3, [r0, #32]
 8003e4e:	b90b      	cbnz	r3, 8003e54 <_vfiprintf_r+0x18>
 8003e50:	f7ff fc30 	bl	80036b4 <__sinit>
 8003e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e56:	07d9      	lsls	r1, r3, #31
 8003e58:	d405      	bmi.n	8003e66 <_vfiprintf_r+0x2a>
 8003e5a:	89ab      	ldrh	r3, [r5, #12]
 8003e5c:	059a      	lsls	r2, r3, #22
 8003e5e:	d402      	bmi.n	8003e66 <_vfiprintf_r+0x2a>
 8003e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e62:	f7ff fd60 	bl	8003926 <__retarget_lock_acquire_recursive>
 8003e66:	89ab      	ldrh	r3, [r5, #12]
 8003e68:	071b      	lsls	r3, r3, #28
 8003e6a:	d501      	bpl.n	8003e70 <_vfiprintf_r+0x34>
 8003e6c:	692b      	ldr	r3, [r5, #16]
 8003e6e:	b99b      	cbnz	r3, 8003e98 <_vfiprintf_r+0x5c>
 8003e70:	4629      	mov	r1, r5
 8003e72:	4630      	mov	r0, r6
 8003e74:	f000 fb78 	bl	8004568 <__swsetup_r>
 8003e78:	b170      	cbz	r0, 8003e98 <_vfiprintf_r+0x5c>
 8003e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e7c:	07dc      	lsls	r4, r3, #31
 8003e7e:	d504      	bpl.n	8003e8a <_vfiprintf_r+0x4e>
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295
 8003e84:	b01d      	add	sp, #116	; 0x74
 8003e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8a:	89ab      	ldrh	r3, [r5, #12]
 8003e8c:	0598      	lsls	r0, r3, #22
 8003e8e:	d4f7      	bmi.n	8003e80 <_vfiprintf_r+0x44>
 8003e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e92:	f7ff fd49 	bl	8003928 <__retarget_lock_release_recursive>
 8003e96:	e7f3      	b.n	8003e80 <_vfiprintf_r+0x44>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e9c:	2320      	movs	r3, #32
 8003e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ea6:	2330      	movs	r3, #48	; 0x30
 8003ea8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800405c <_vfiprintf_r+0x220>
 8003eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003eb0:	f04f 0901 	mov.w	r9, #1
 8003eb4:	4623      	mov	r3, r4
 8003eb6:	469a      	mov	sl, r3
 8003eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ebc:	b10a      	cbz	r2, 8003ec2 <_vfiprintf_r+0x86>
 8003ebe:	2a25      	cmp	r2, #37	; 0x25
 8003ec0:	d1f9      	bne.n	8003eb6 <_vfiprintf_r+0x7a>
 8003ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ec6:	d00b      	beq.n	8003ee0 <_vfiprintf_r+0xa4>
 8003ec8:	465b      	mov	r3, fp
 8003eca:	4622      	mov	r2, r4
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4630      	mov	r0, r6
 8003ed0:	f7ff ffa1 	bl	8003e16 <__sfputs_r>
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	f000 80a9 	beq.w	800402c <_vfiprintf_r+0x1f0>
 8003eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003edc:	445a      	add	r2, fp
 8003ede:	9209      	str	r2, [sp, #36]	; 0x24
 8003ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80a1 	beq.w	800402c <_vfiprintf_r+0x1f0>
 8003eea:	2300      	movs	r3, #0
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ef4:	f10a 0a01 	add.w	sl, sl, #1
 8003ef8:	9304      	str	r3, [sp, #16]
 8003efa:	9307      	str	r3, [sp, #28]
 8003efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f00:	931a      	str	r3, [sp, #104]	; 0x68
 8003f02:	4654      	mov	r4, sl
 8003f04:	2205      	movs	r2, #5
 8003f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f0a:	4854      	ldr	r0, [pc, #336]	; (800405c <_vfiprintf_r+0x220>)
 8003f0c:	f7fc f968 	bl	80001e0 <memchr>
 8003f10:	9a04      	ldr	r2, [sp, #16]
 8003f12:	b9d8      	cbnz	r0, 8003f4c <_vfiprintf_r+0x110>
 8003f14:	06d1      	lsls	r1, r2, #27
 8003f16:	bf44      	itt	mi
 8003f18:	2320      	movmi	r3, #32
 8003f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f1e:	0713      	lsls	r3, r2, #28
 8003f20:	bf44      	itt	mi
 8003f22:	232b      	movmi	r3, #43	; 0x2b
 8003f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f28:	f89a 3000 	ldrb.w	r3, [sl]
 8003f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f2e:	d015      	beq.n	8003f5c <_vfiprintf_r+0x120>
 8003f30:	9a07      	ldr	r2, [sp, #28]
 8003f32:	4654      	mov	r4, sl
 8003f34:	2000      	movs	r0, #0
 8003f36:	f04f 0c0a 	mov.w	ip, #10
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f40:	3b30      	subs	r3, #48	; 0x30
 8003f42:	2b09      	cmp	r3, #9
 8003f44:	d94d      	bls.n	8003fe2 <_vfiprintf_r+0x1a6>
 8003f46:	b1b0      	cbz	r0, 8003f76 <_vfiprintf_r+0x13a>
 8003f48:	9207      	str	r2, [sp, #28]
 8003f4a:	e014      	b.n	8003f76 <_vfiprintf_r+0x13a>
 8003f4c:	eba0 0308 	sub.w	r3, r0, r8
 8003f50:	fa09 f303 	lsl.w	r3, r9, r3
 8003f54:	4313      	orrs	r3, r2
 8003f56:	9304      	str	r3, [sp, #16]
 8003f58:	46a2      	mov	sl, r4
 8003f5a:	e7d2      	b.n	8003f02 <_vfiprintf_r+0xc6>
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	1d19      	adds	r1, r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	9103      	str	r1, [sp, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bfbb      	ittet	lt
 8003f68:	425b      	neglt	r3, r3
 8003f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f6e:	9307      	strge	r3, [sp, #28]
 8003f70:	9307      	strlt	r3, [sp, #28]
 8003f72:	bfb8      	it	lt
 8003f74:	9204      	strlt	r2, [sp, #16]
 8003f76:	7823      	ldrb	r3, [r4, #0]
 8003f78:	2b2e      	cmp	r3, #46	; 0x2e
 8003f7a:	d10c      	bne.n	8003f96 <_vfiprintf_r+0x15a>
 8003f7c:	7863      	ldrb	r3, [r4, #1]
 8003f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f80:	d134      	bne.n	8003fec <_vfiprintf_r+0x1b0>
 8003f82:	9b03      	ldr	r3, [sp, #12]
 8003f84:	1d1a      	adds	r2, r3, #4
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	9203      	str	r2, [sp, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bfb8      	it	lt
 8003f8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f92:	3402      	adds	r4, #2
 8003f94:	9305      	str	r3, [sp, #20]
 8003f96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800406c <_vfiprintf_r+0x230>
 8003f9a:	7821      	ldrb	r1, [r4, #0]
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	4650      	mov	r0, sl
 8003fa0:	f7fc f91e 	bl	80001e0 <memchr>
 8003fa4:	b138      	cbz	r0, 8003fb6 <_vfiprintf_r+0x17a>
 8003fa6:	9b04      	ldr	r3, [sp, #16]
 8003fa8:	eba0 000a 	sub.w	r0, r0, sl
 8003fac:	2240      	movs	r2, #64	; 0x40
 8003fae:	4082      	lsls	r2, r0
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	3401      	adds	r4, #1
 8003fb4:	9304      	str	r3, [sp, #16]
 8003fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fba:	4829      	ldr	r0, [pc, #164]	; (8004060 <_vfiprintf_r+0x224>)
 8003fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fc0:	2206      	movs	r2, #6
 8003fc2:	f7fc f90d 	bl	80001e0 <memchr>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d03f      	beq.n	800404a <_vfiprintf_r+0x20e>
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <_vfiprintf_r+0x228>)
 8003fcc:	bb1b      	cbnz	r3, 8004016 <_vfiprintf_r+0x1da>
 8003fce:	9b03      	ldr	r3, [sp, #12]
 8003fd0:	3307      	adds	r3, #7
 8003fd2:	f023 0307 	bic.w	r3, r3, #7
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	9303      	str	r3, [sp, #12]
 8003fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fdc:	443b      	add	r3, r7
 8003fde:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe0:	e768      	b.n	8003eb4 <_vfiprintf_r+0x78>
 8003fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	2001      	movs	r0, #1
 8003fea:	e7a6      	b.n	8003f3a <_vfiprintf_r+0xfe>
 8003fec:	2300      	movs	r3, #0
 8003fee:	3401      	adds	r4, #1
 8003ff0:	9305      	str	r3, [sp, #20]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f04f 0c0a 	mov.w	ip, #10
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ffe:	3a30      	subs	r2, #48	; 0x30
 8004000:	2a09      	cmp	r2, #9
 8004002:	d903      	bls.n	800400c <_vfiprintf_r+0x1d0>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0c6      	beq.n	8003f96 <_vfiprintf_r+0x15a>
 8004008:	9105      	str	r1, [sp, #20]
 800400a:	e7c4      	b.n	8003f96 <_vfiprintf_r+0x15a>
 800400c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004010:	4604      	mov	r4, r0
 8004012:	2301      	movs	r3, #1
 8004014:	e7f0      	b.n	8003ff8 <_vfiprintf_r+0x1bc>
 8004016:	ab03      	add	r3, sp, #12
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	462a      	mov	r2, r5
 800401c:	4b12      	ldr	r3, [pc, #72]	; (8004068 <_vfiprintf_r+0x22c>)
 800401e:	a904      	add	r1, sp, #16
 8004020:	4630      	mov	r0, r6
 8004022:	f3af 8000 	nop.w
 8004026:	4607      	mov	r7, r0
 8004028:	1c78      	adds	r0, r7, #1
 800402a:	d1d6      	bne.n	8003fda <_vfiprintf_r+0x19e>
 800402c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800402e:	07d9      	lsls	r1, r3, #31
 8004030:	d405      	bmi.n	800403e <_vfiprintf_r+0x202>
 8004032:	89ab      	ldrh	r3, [r5, #12]
 8004034:	059a      	lsls	r2, r3, #22
 8004036:	d402      	bmi.n	800403e <_vfiprintf_r+0x202>
 8004038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800403a:	f7ff fc75 	bl	8003928 <__retarget_lock_release_recursive>
 800403e:	89ab      	ldrh	r3, [r5, #12]
 8004040:	065b      	lsls	r3, r3, #25
 8004042:	f53f af1d 	bmi.w	8003e80 <_vfiprintf_r+0x44>
 8004046:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004048:	e71c      	b.n	8003e84 <_vfiprintf_r+0x48>
 800404a:	ab03      	add	r3, sp, #12
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	462a      	mov	r2, r5
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <_vfiprintf_r+0x22c>)
 8004052:	a904      	add	r1, sp, #16
 8004054:	4630      	mov	r0, r6
 8004056:	f000 f879 	bl	800414c <_printf_i>
 800405a:	e7e4      	b.n	8004026 <_vfiprintf_r+0x1ea>
 800405c:	08005094 	.word	0x08005094
 8004060:	0800509e 	.word	0x0800509e
 8004064:	00000000 	.word	0x00000000
 8004068:	08003e17 	.word	0x08003e17
 800406c:	0800509a 	.word	0x0800509a

08004070 <_printf_common>:
 8004070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	4616      	mov	r6, r2
 8004076:	4699      	mov	r9, r3
 8004078:	688a      	ldr	r2, [r1, #8]
 800407a:	690b      	ldr	r3, [r1, #16]
 800407c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004080:	4293      	cmp	r3, r2
 8004082:	bfb8      	it	lt
 8004084:	4613      	movlt	r3, r2
 8004086:	6033      	str	r3, [r6, #0]
 8004088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800408c:	4607      	mov	r7, r0
 800408e:	460c      	mov	r4, r1
 8004090:	b10a      	cbz	r2, 8004096 <_printf_common+0x26>
 8004092:	3301      	adds	r3, #1
 8004094:	6033      	str	r3, [r6, #0]
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	0699      	lsls	r1, r3, #26
 800409a:	bf42      	ittt	mi
 800409c:	6833      	ldrmi	r3, [r6, #0]
 800409e:	3302      	addmi	r3, #2
 80040a0:	6033      	strmi	r3, [r6, #0]
 80040a2:	6825      	ldr	r5, [r4, #0]
 80040a4:	f015 0506 	ands.w	r5, r5, #6
 80040a8:	d106      	bne.n	80040b8 <_printf_common+0x48>
 80040aa:	f104 0a19 	add.w	sl, r4, #25
 80040ae:	68e3      	ldr	r3, [r4, #12]
 80040b0:	6832      	ldr	r2, [r6, #0]
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	42ab      	cmp	r3, r5
 80040b6:	dc26      	bgt.n	8004106 <_printf_common+0x96>
 80040b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040bc:	1e13      	subs	r3, r2, #0
 80040be:	6822      	ldr	r2, [r4, #0]
 80040c0:	bf18      	it	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	0692      	lsls	r2, r2, #26
 80040c6:	d42b      	bmi.n	8004120 <_printf_common+0xb0>
 80040c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040cc:	4649      	mov	r1, r9
 80040ce:	4638      	mov	r0, r7
 80040d0:	47c0      	blx	r8
 80040d2:	3001      	adds	r0, #1
 80040d4:	d01e      	beq.n	8004114 <_printf_common+0xa4>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	6922      	ldr	r2, [r4, #16]
 80040da:	f003 0306 	and.w	r3, r3, #6
 80040de:	2b04      	cmp	r3, #4
 80040e0:	bf02      	ittt	eq
 80040e2:	68e5      	ldreq	r5, [r4, #12]
 80040e4:	6833      	ldreq	r3, [r6, #0]
 80040e6:	1aed      	subeq	r5, r5, r3
 80040e8:	68a3      	ldr	r3, [r4, #8]
 80040ea:	bf0c      	ite	eq
 80040ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f0:	2500      	movne	r5, #0
 80040f2:	4293      	cmp	r3, r2
 80040f4:	bfc4      	itt	gt
 80040f6:	1a9b      	subgt	r3, r3, r2
 80040f8:	18ed      	addgt	r5, r5, r3
 80040fa:	2600      	movs	r6, #0
 80040fc:	341a      	adds	r4, #26
 80040fe:	42b5      	cmp	r5, r6
 8004100:	d11a      	bne.n	8004138 <_printf_common+0xc8>
 8004102:	2000      	movs	r0, #0
 8004104:	e008      	b.n	8004118 <_printf_common+0xa8>
 8004106:	2301      	movs	r3, #1
 8004108:	4652      	mov	r2, sl
 800410a:	4649      	mov	r1, r9
 800410c:	4638      	mov	r0, r7
 800410e:	47c0      	blx	r8
 8004110:	3001      	adds	r0, #1
 8004112:	d103      	bne.n	800411c <_printf_common+0xac>
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411c:	3501      	adds	r5, #1
 800411e:	e7c6      	b.n	80040ae <_printf_common+0x3e>
 8004120:	18e1      	adds	r1, r4, r3
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	2030      	movs	r0, #48	; 0x30
 8004126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800412a:	4422      	add	r2, r4
 800412c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004134:	3302      	adds	r3, #2
 8004136:	e7c7      	b.n	80040c8 <_printf_common+0x58>
 8004138:	2301      	movs	r3, #1
 800413a:	4622      	mov	r2, r4
 800413c:	4649      	mov	r1, r9
 800413e:	4638      	mov	r0, r7
 8004140:	47c0      	blx	r8
 8004142:	3001      	adds	r0, #1
 8004144:	d0e6      	beq.n	8004114 <_printf_common+0xa4>
 8004146:	3601      	adds	r6, #1
 8004148:	e7d9      	b.n	80040fe <_printf_common+0x8e>
	...

0800414c <_printf_i>:
 800414c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	7e0f      	ldrb	r7, [r1, #24]
 8004152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004154:	2f78      	cmp	r7, #120	; 0x78
 8004156:	4691      	mov	r9, r2
 8004158:	4680      	mov	r8, r0
 800415a:	460c      	mov	r4, r1
 800415c:	469a      	mov	sl, r3
 800415e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004162:	d807      	bhi.n	8004174 <_printf_i+0x28>
 8004164:	2f62      	cmp	r7, #98	; 0x62
 8004166:	d80a      	bhi.n	800417e <_printf_i+0x32>
 8004168:	2f00      	cmp	r7, #0
 800416a:	f000 80d4 	beq.w	8004316 <_printf_i+0x1ca>
 800416e:	2f58      	cmp	r7, #88	; 0x58
 8004170:	f000 80c0 	beq.w	80042f4 <_printf_i+0x1a8>
 8004174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800417c:	e03a      	b.n	80041f4 <_printf_i+0xa8>
 800417e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004182:	2b15      	cmp	r3, #21
 8004184:	d8f6      	bhi.n	8004174 <_printf_i+0x28>
 8004186:	a101      	add	r1, pc, #4	; (adr r1, 800418c <_printf_i+0x40>)
 8004188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800418c:	080041e5 	.word	0x080041e5
 8004190:	080041f9 	.word	0x080041f9
 8004194:	08004175 	.word	0x08004175
 8004198:	08004175 	.word	0x08004175
 800419c:	08004175 	.word	0x08004175
 80041a0:	08004175 	.word	0x08004175
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	08004175 	.word	0x08004175
 80041ac:	08004175 	.word	0x08004175
 80041b0:	08004175 	.word	0x08004175
 80041b4:	08004175 	.word	0x08004175
 80041b8:	080042fd 	.word	0x080042fd
 80041bc:	08004225 	.word	0x08004225
 80041c0:	080042b7 	.word	0x080042b7
 80041c4:	08004175 	.word	0x08004175
 80041c8:	08004175 	.word	0x08004175
 80041cc:	0800431f 	.word	0x0800431f
 80041d0:	08004175 	.word	0x08004175
 80041d4:	08004225 	.word	0x08004225
 80041d8:	08004175 	.word	0x08004175
 80041dc:	08004175 	.word	0x08004175
 80041e0:	080042bf 	.word	0x080042bf
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	1d1a      	adds	r2, r3, #4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	602a      	str	r2, [r5, #0]
 80041ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041f4:	2301      	movs	r3, #1
 80041f6:	e09f      	b.n	8004338 <_printf_i+0x1ec>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	682b      	ldr	r3, [r5, #0]
 80041fc:	0607      	lsls	r7, r0, #24
 80041fe:	f103 0104 	add.w	r1, r3, #4
 8004202:	6029      	str	r1, [r5, #0]
 8004204:	d501      	bpl.n	800420a <_printf_i+0xbe>
 8004206:	681e      	ldr	r6, [r3, #0]
 8004208:	e003      	b.n	8004212 <_printf_i+0xc6>
 800420a:	0646      	lsls	r6, r0, #25
 800420c:	d5fb      	bpl.n	8004206 <_printf_i+0xba>
 800420e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004212:	2e00      	cmp	r6, #0
 8004214:	da03      	bge.n	800421e <_printf_i+0xd2>
 8004216:	232d      	movs	r3, #45	; 0x2d
 8004218:	4276      	negs	r6, r6
 800421a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800421e:	485a      	ldr	r0, [pc, #360]	; (8004388 <_printf_i+0x23c>)
 8004220:	230a      	movs	r3, #10
 8004222:	e012      	b.n	800424a <_printf_i+0xfe>
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	6820      	ldr	r0, [r4, #0]
 8004228:	1d19      	adds	r1, r3, #4
 800422a:	6029      	str	r1, [r5, #0]
 800422c:	0605      	lsls	r5, r0, #24
 800422e:	d501      	bpl.n	8004234 <_printf_i+0xe8>
 8004230:	681e      	ldr	r6, [r3, #0]
 8004232:	e002      	b.n	800423a <_printf_i+0xee>
 8004234:	0641      	lsls	r1, r0, #25
 8004236:	d5fb      	bpl.n	8004230 <_printf_i+0xe4>
 8004238:	881e      	ldrh	r6, [r3, #0]
 800423a:	4853      	ldr	r0, [pc, #332]	; (8004388 <_printf_i+0x23c>)
 800423c:	2f6f      	cmp	r7, #111	; 0x6f
 800423e:	bf0c      	ite	eq
 8004240:	2308      	moveq	r3, #8
 8004242:	230a      	movne	r3, #10
 8004244:	2100      	movs	r1, #0
 8004246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800424a:	6865      	ldr	r5, [r4, #4]
 800424c:	60a5      	str	r5, [r4, #8]
 800424e:	2d00      	cmp	r5, #0
 8004250:	bfa2      	ittt	ge
 8004252:	6821      	ldrge	r1, [r4, #0]
 8004254:	f021 0104 	bicge.w	r1, r1, #4
 8004258:	6021      	strge	r1, [r4, #0]
 800425a:	b90e      	cbnz	r6, 8004260 <_printf_i+0x114>
 800425c:	2d00      	cmp	r5, #0
 800425e:	d04b      	beq.n	80042f8 <_printf_i+0x1ac>
 8004260:	4615      	mov	r5, r2
 8004262:	fbb6 f1f3 	udiv	r1, r6, r3
 8004266:	fb03 6711 	mls	r7, r3, r1, r6
 800426a:	5dc7      	ldrb	r7, [r0, r7]
 800426c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004270:	4637      	mov	r7, r6
 8004272:	42bb      	cmp	r3, r7
 8004274:	460e      	mov	r6, r1
 8004276:	d9f4      	bls.n	8004262 <_printf_i+0x116>
 8004278:	2b08      	cmp	r3, #8
 800427a:	d10b      	bne.n	8004294 <_printf_i+0x148>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	07de      	lsls	r6, r3, #31
 8004280:	d508      	bpl.n	8004294 <_printf_i+0x148>
 8004282:	6923      	ldr	r3, [r4, #16]
 8004284:	6861      	ldr	r1, [r4, #4]
 8004286:	4299      	cmp	r1, r3
 8004288:	bfde      	ittt	le
 800428a:	2330      	movle	r3, #48	; 0x30
 800428c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004290:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004294:	1b52      	subs	r2, r2, r5
 8004296:	6122      	str	r2, [r4, #16]
 8004298:	f8cd a000 	str.w	sl, [sp]
 800429c:	464b      	mov	r3, r9
 800429e:	aa03      	add	r2, sp, #12
 80042a0:	4621      	mov	r1, r4
 80042a2:	4640      	mov	r0, r8
 80042a4:	f7ff fee4 	bl	8004070 <_printf_common>
 80042a8:	3001      	adds	r0, #1
 80042aa:	d14a      	bne.n	8004342 <_printf_i+0x1f6>
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	b004      	add	sp, #16
 80042b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	f043 0320 	orr.w	r3, r3, #32
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	4833      	ldr	r0, [pc, #204]	; (800438c <_printf_i+0x240>)
 80042c0:	2778      	movs	r7, #120	; 0x78
 80042c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	6829      	ldr	r1, [r5, #0]
 80042ca:	061f      	lsls	r7, r3, #24
 80042cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80042d0:	d402      	bmi.n	80042d8 <_printf_i+0x18c>
 80042d2:	065f      	lsls	r7, r3, #25
 80042d4:	bf48      	it	mi
 80042d6:	b2b6      	uxthmi	r6, r6
 80042d8:	07df      	lsls	r7, r3, #31
 80042da:	bf48      	it	mi
 80042dc:	f043 0320 	orrmi.w	r3, r3, #32
 80042e0:	6029      	str	r1, [r5, #0]
 80042e2:	bf48      	it	mi
 80042e4:	6023      	strmi	r3, [r4, #0]
 80042e6:	b91e      	cbnz	r6, 80042f0 <_printf_i+0x1a4>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	f023 0320 	bic.w	r3, r3, #32
 80042ee:	6023      	str	r3, [r4, #0]
 80042f0:	2310      	movs	r3, #16
 80042f2:	e7a7      	b.n	8004244 <_printf_i+0xf8>
 80042f4:	4824      	ldr	r0, [pc, #144]	; (8004388 <_printf_i+0x23c>)
 80042f6:	e7e4      	b.n	80042c2 <_printf_i+0x176>
 80042f8:	4615      	mov	r5, r2
 80042fa:	e7bd      	b.n	8004278 <_printf_i+0x12c>
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	6826      	ldr	r6, [r4, #0]
 8004300:	6961      	ldr	r1, [r4, #20]
 8004302:	1d18      	adds	r0, r3, #4
 8004304:	6028      	str	r0, [r5, #0]
 8004306:	0635      	lsls	r5, r6, #24
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	d501      	bpl.n	8004310 <_printf_i+0x1c4>
 800430c:	6019      	str	r1, [r3, #0]
 800430e:	e002      	b.n	8004316 <_printf_i+0x1ca>
 8004310:	0670      	lsls	r0, r6, #25
 8004312:	d5fb      	bpl.n	800430c <_printf_i+0x1c0>
 8004314:	8019      	strh	r1, [r3, #0]
 8004316:	2300      	movs	r3, #0
 8004318:	6123      	str	r3, [r4, #16]
 800431a:	4615      	mov	r5, r2
 800431c:	e7bc      	b.n	8004298 <_printf_i+0x14c>
 800431e:	682b      	ldr	r3, [r5, #0]
 8004320:	1d1a      	adds	r2, r3, #4
 8004322:	602a      	str	r2, [r5, #0]
 8004324:	681d      	ldr	r5, [r3, #0]
 8004326:	6862      	ldr	r2, [r4, #4]
 8004328:	2100      	movs	r1, #0
 800432a:	4628      	mov	r0, r5
 800432c:	f7fb ff58 	bl	80001e0 <memchr>
 8004330:	b108      	cbz	r0, 8004336 <_printf_i+0x1ea>
 8004332:	1b40      	subs	r0, r0, r5
 8004334:	6060      	str	r0, [r4, #4]
 8004336:	6863      	ldr	r3, [r4, #4]
 8004338:	6123      	str	r3, [r4, #16]
 800433a:	2300      	movs	r3, #0
 800433c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004340:	e7aa      	b.n	8004298 <_printf_i+0x14c>
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	462a      	mov	r2, r5
 8004346:	4649      	mov	r1, r9
 8004348:	4640      	mov	r0, r8
 800434a:	47d0      	blx	sl
 800434c:	3001      	adds	r0, #1
 800434e:	d0ad      	beq.n	80042ac <_printf_i+0x160>
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	079b      	lsls	r3, r3, #30
 8004354:	d413      	bmi.n	800437e <_printf_i+0x232>
 8004356:	68e0      	ldr	r0, [r4, #12]
 8004358:	9b03      	ldr	r3, [sp, #12]
 800435a:	4298      	cmp	r0, r3
 800435c:	bfb8      	it	lt
 800435e:	4618      	movlt	r0, r3
 8004360:	e7a6      	b.n	80042b0 <_printf_i+0x164>
 8004362:	2301      	movs	r3, #1
 8004364:	4632      	mov	r2, r6
 8004366:	4649      	mov	r1, r9
 8004368:	4640      	mov	r0, r8
 800436a:	47d0      	blx	sl
 800436c:	3001      	adds	r0, #1
 800436e:	d09d      	beq.n	80042ac <_printf_i+0x160>
 8004370:	3501      	adds	r5, #1
 8004372:	68e3      	ldr	r3, [r4, #12]
 8004374:	9903      	ldr	r1, [sp, #12]
 8004376:	1a5b      	subs	r3, r3, r1
 8004378:	42ab      	cmp	r3, r5
 800437a:	dcf2      	bgt.n	8004362 <_printf_i+0x216>
 800437c:	e7eb      	b.n	8004356 <_printf_i+0x20a>
 800437e:	2500      	movs	r5, #0
 8004380:	f104 0619 	add.w	r6, r4, #25
 8004384:	e7f5      	b.n	8004372 <_printf_i+0x226>
 8004386:	bf00      	nop
 8004388:	080050a5 	.word	0x080050a5
 800438c:	080050b6 	.word	0x080050b6

08004390 <__sflush_r>:
 8004390:	898a      	ldrh	r2, [r1, #12]
 8004392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004396:	4605      	mov	r5, r0
 8004398:	0710      	lsls	r0, r2, #28
 800439a:	460c      	mov	r4, r1
 800439c:	d458      	bmi.n	8004450 <__sflush_r+0xc0>
 800439e:	684b      	ldr	r3, [r1, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	dc05      	bgt.n	80043b0 <__sflush_r+0x20>
 80043a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	dc02      	bgt.n	80043b0 <__sflush_r+0x20>
 80043aa:	2000      	movs	r0, #0
 80043ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043b2:	2e00      	cmp	r6, #0
 80043b4:	d0f9      	beq.n	80043aa <__sflush_r+0x1a>
 80043b6:	2300      	movs	r3, #0
 80043b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043bc:	682f      	ldr	r7, [r5, #0]
 80043be:	6a21      	ldr	r1, [r4, #32]
 80043c0:	602b      	str	r3, [r5, #0]
 80043c2:	d032      	beq.n	800442a <__sflush_r+0x9a>
 80043c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	075a      	lsls	r2, r3, #29
 80043ca:	d505      	bpl.n	80043d8 <__sflush_r+0x48>
 80043cc:	6863      	ldr	r3, [r4, #4]
 80043ce:	1ac0      	subs	r0, r0, r3
 80043d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043d2:	b10b      	cbz	r3, 80043d8 <__sflush_r+0x48>
 80043d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043d6:	1ac0      	subs	r0, r0, r3
 80043d8:	2300      	movs	r3, #0
 80043da:	4602      	mov	r2, r0
 80043dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043de:	6a21      	ldr	r1, [r4, #32]
 80043e0:	4628      	mov	r0, r5
 80043e2:	47b0      	blx	r6
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	d106      	bne.n	80043f8 <__sflush_r+0x68>
 80043ea:	6829      	ldr	r1, [r5, #0]
 80043ec:	291d      	cmp	r1, #29
 80043ee:	d82b      	bhi.n	8004448 <__sflush_r+0xb8>
 80043f0:	4a29      	ldr	r2, [pc, #164]	; (8004498 <__sflush_r+0x108>)
 80043f2:	410a      	asrs	r2, r1
 80043f4:	07d6      	lsls	r6, r2, #31
 80043f6:	d427      	bmi.n	8004448 <__sflush_r+0xb8>
 80043f8:	2200      	movs	r2, #0
 80043fa:	6062      	str	r2, [r4, #4]
 80043fc:	04d9      	lsls	r1, r3, #19
 80043fe:	6922      	ldr	r2, [r4, #16]
 8004400:	6022      	str	r2, [r4, #0]
 8004402:	d504      	bpl.n	800440e <__sflush_r+0x7e>
 8004404:	1c42      	adds	r2, r0, #1
 8004406:	d101      	bne.n	800440c <__sflush_r+0x7c>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	b903      	cbnz	r3, 800440e <__sflush_r+0x7e>
 800440c:	6560      	str	r0, [r4, #84]	; 0x54
 800440e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004410:	602f      	str	r7, [r5, #0]
 8004412:	2900      	cmp	r1, #0
 8004414:	d0c9      	beq.n	80043aa <__sflush_r+0x1a>
 8004416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800441a:	4299      	cmp	r1, r3
 800441c:	d002      	beq.n	8004424 <__sflush_r+0x94>
 800441e:	4628      	mov	r0, r5
 8004420:	f7ff fa92 	bl	8003948 <_free_r>
 8004424:	2000      	movs	r0, #0
 8004426:	6360      	str	r0, [r4, #52]	; 0x34
 8004428:	e7c0      	b.n	80043ac <__sflush_r+0x1c>
 800442a:	2301      	movs	r3, #1
 800442c:	4628      	mov	r0, r5
 800442e:	47b0      	blx	r6
 8004430:	1c41      	adds	r1, r0, #1
 8004432:	d1c8      	bne.n	80043c6 <__sflush_r+0x36>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0c5      	beq.n	80043c6 <__sflush_r+0x36>
 800443a:	2b1d      	cmp	r3, #29
 800443c:	d001      	beq.n	8004442 <__sflush_r+0xb2>
 800443e:	2b16      	cmp	r3, #22
 8004440:	d101      	bne.n	8004446 <__sflush_r+0xb6>
 8004442:	602f      	str	r7, [r5, #0]
 8004444:	e7b1      	b.n	80043aa <__sflush_r+0x1a>
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800444c:	81a3      	strh	r3, [r4, #12]
 800444e:	e7ad      	b.n	80043ac <__sflush_r+0x1c>
 8004450:	690f      	ldr	r7, [r1, #16]
 8004452:	2f00      	cmp	r7, #0
 8004454:	d0a9      	beq.n	80043aa <__sflush_r+0x1a>
 8004456:	0793      	lsls	r3, r2, #30
 8004458:	680e      	ldr	r6, [r1, #0]
 800445a:	bf08      	it	eq
 800445c:	694b      	ldreq	r3, [r1, #20]
 800445e:	600f      	str	r7, [r1, #0]
 8004460:	bf18      	it	ne
 8004462:	2300      	movne	r3, #0
 8004464:	eba6 0807 	sub.w	r8, r6, r7
 8004468:	608b      	str	r3, [r1, #8]
 800446a:	f1b8 0f00 	cmp.w	r8, #0
 800446e:	dd9c      	ble.n	80043aa <__sflush_r+0x1a>
 8004470:	6a21      	ldr	r1, [r4, #32]
 8004472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004474:	4643      	mov	r3, r8
 8004476:	463a      	mov	r2, r7
 8004478:	4628      	mov	r0, r5
 800447a:	47b0      	blx	r6
 800447c:	2800      	cmp	r0, #0
 800447e:	dc06      	bgt.n	800448e <__sflush_r+0xfe>
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004486:	81a3      	strh	r3, [r4, #12]
 8004488:	f04f 30ff 	mov.w	r0, #4294967295
 800448c:	e78e      	b.n	80043ac <__sflush_r+0x1c>
 800448e:	4407      	add	r7, r0
 8004490:	eba8 0800 	sub.w	r8, r8, r0
 8004494:	e7e9      	b.n	800446a <__sflush_r+0xda>
 8004496:	bf00      	nop
 8004498:	dfbffffe 	.word	0xdfbffffe

0800449c <_fflush_r>:
 800449c:	b538      	push	{r3, r4, r5, lr}
 800449e:	690b      	ldr	r3, [r1, #16]
 80044a0:	4605      	mov	r5, r0
 80044a2:	460c      	mov	r4, r1
 80044a4:	b913      	cbnz	r3, 80044ac <_fflush_r+0x10>
 80044a6:	2500      	movs	r5, #0
 80044a8:	4628      	mov	r0, r5
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	b118      	cbz	r0, 80044b6 <_fflush_r+0x1a>
 80044ae:	6a03      	ldr	r3, [r0, #32]
 80044b0:	b90b      	cbnz	r3, 80044b6 <_fflush_r+0x1a>
 80044b2:	f7ff f8ff 	bl	80036b4 <__sinit>
 80044b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f3      	beq.n	80044a6 <_fflush_r+0xa>
 80044be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044c0:	07d0      	lsls	r0, r2, #31
 80044c2:	d404      	bmi.n	80044ce <_fflush_r+0x32>
 80044c4:	0599      	lsls	r1, r3, #22
 80044c6:	d402      	bmi.n	80044ce <_fflush_r+0x32>
 80044c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ca:	f7ff fa2c 	bl	8003926 <__retarget_lock_acquire_recursive>
 80044ce:	4628      	mov	r0, r5
 80044d0:	4621      	mov	r1, r4
 80044d2:	f7ff ff5d 	bl	8004390 <__sflush_r>
 80044d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044d8:	07da      	lsls	r2, r3, #31
 80044da:	4605      	mov	r5, r0
 80044dc:	d4e4      	bmi.n	80044a8 <_fflush_r+0xc>
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	059b      	lsls	r3, r3, #22
 80044e2:	d4e1      	bmi.n	80044a8 <_fflush_r+0xc>
 80044e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044e6:	f7ff fa1f 	bl	8003928 <__retarget_lock_release_recursive>
 80044ea:	e7dd      	b.n	80044a8 <_fflush_r+0xc>

080044ec <__swbuf_r>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	460e      	mov	r6, r1
 80044f0:	4614      	mov	r4, r2
 80044f2:	4605      	mov	r5, r0
 80044f4:	b118      	cbz	r0, 80044fe <__swbuf_r+0x12>
 80044f6:	6a03      	ldr	r3, [r0, #32]
 80044f8:	b90b      	cbnz	r3, 80044fe <__swbuf_r+0x12>
 80044fa:	f7ff f8db 	bl	80036b4 <__sinit>
 80044fe:	69a3      	ldr	r3, [r4, #24]
 8004500:	60a3      	str	r3, [r4, #8]
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	071a      	lsls	r2, r3, #28
 8004506:	d525      	bpl.n	8004554 <__swbuf_r+0x68>
 8004508:	6923      	ldr	r3, [r4, #16]
 800450a:	b31b      	cbz	r3, 8004554 <__swbuf_r+0x68>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	6922      	ldr	r2, [r4, #16]
 8004510:	1a98      	subs	r0, r3, r2
 8004512:	6963      	ldr	r3, [r4, #20]
 8004514:	b2f6      	uxtb	r6, r6
 8004516:	4283      	cmp	r3, r0
 8004518:	4637      	mov	r7, r6
 800451a:	dc04      	bgt.n	8004526 <__swbuf_r+0x3a>
 800451c:	4621      	mov	r1, r4
 800451e:	4628      	mov	r0, r5
 8004520:	f7ff ffbc 	bl	800449c <_fflush_r>
 8004524:	b9e0      	cbnz	r0, 8004560 <__swbuf_r+0x74>
 8004526:	68a3      	ldr	r3, [r4, #8]
 8004528:	3b01      	subs	r3, #1
 800452a:	60a3      	str	r3, [r4, #8]
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	6022      	str	r2, [r4, #0]
 8004532:	701e      	strb	r6, [r3, #0]
 8004534:	6962      	ldr	r2, [r4, #20]
 8004536:	1c43      	adds	r3, r0, #1
 8004538:	429a      	cmp	r2, r3
 800453a:	d004      	beq.n	8004546 <__swbuf_r+0x5a>
 800453c:	89a3      	ldrh	r3, [r4, #12]
 800453e:	07db      	lsls	r3, r3, #31
 8004540:	d506      	bpl.n	8004550 <__swbuf_r+0x64>
 8004542:	2e0a      	cmp	r6, #10
 8004544:	d104      	bne.n	8004550 <__swbuf_r+0x64>
 8004546:	4621      	mov	r1, r4
 8004548:	4628      	mov	r0, r5
 800454a:	f7ff ffa7 	bl	800449c <_fflush_r>
 800454e:	b938      	cbnz	r0, 8004560 <__swbuf_r+0x74>
 8004550:	4638      	mov	r0, r7
 8004552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004554:	4621      	mov	r1, r4
 8004556:	4628      	mov	r0, r5
 8004558:	f000 f806 	bl	8004568 <__swsetup_r>
 800455c:	2800      	cmp	r0, #0
 800455e:	d0d5      	beq.n	800450c <__swbuf_r+0x20>
 8004560:	f04f 37ff 	mov.w	r7, #4294967295
 8004564:	e7f4      	b.n	8004550 <__swbuf_r+0x64>
	...

08004568 <__swsetup_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <__swsetup_r+0xac>)
 800456c:	4605      	mov	r5, r0
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	460c      	mov	r4, r1
 8004572:	b118      	cbz	r0, 800457c <__swsetup_r+0x14>
 8004574:	6a03      	ldr	r3, [r0, #32]
 8004576:	b90b      	cbnz	r3, 800457c <__swsetup_r+0x14>
 8004578:	f7ff f89c 	bl	80036b4 <__sinit>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004582:	0718      	lsls	r0, r3, #28
 8004584:	d422      	bmi.n	80045cc <__swsetup_r+0x64>
 8004586:	06d9      	lsls	r1, r3, #27
 8004588:	d407      	bmi.n	800459a <__swsetup_r+0x32>
 800458a:	2309      	movs	r3, #9
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	e034      	b.n	8004604 <__swsetup_r+0x9c>
 800459a:	0758      	lsls	r0, r3, #29
 800459c:	d512      	bpl.n	80045c4 <__swsetup_r+0x5c>
 800459e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045a0:	b141      	cbz	r1, 80045b4 <__swsetup_r+0x4c>
 80045a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045a6:	4299      	cmp	r1, r3
 80045a8:	d002      	beq.n	80045b0 <__swsetup_r+0x48>
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7ff f9cc 	bl	8003948 <_free_r>
 80045b0:	2300      	movs	r3, #0
 80045b2:	6363      	str	r3, [r4, #52]	; 0x34
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045ba:	81a3      	strh	r3, [r4, #12]
 80045bc:	2300      	movs	r3, #0
 80045be:	6063      	str	r3, [r4, #4]
 80045c0:	6923      	ldr	r3, [r4, #16]
 80045c2:	6023      	str	r3, [r4, #0]
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	f043 0308 	orr.w	r3, r3, #8
 80045ca:	81a3      	strh	r3, [r4, #12]
 80045cc:	6923      	ldr	r3, [r4, #16]
 80045ce:	b94b      	cbnz	r3, 80045e4 <__swsetup_r+0x7c>
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045da:	d003      	beq.n	80045e4 <__swsetup_r+0x7c>
 80045dc:	4621      	mov	r1, r4
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 f899 	bl	8004716 <__smakebuf_r>
 80045e4:	89a0      	ldrh	r0, [r4, #12]
 80045e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045ea:	f010 0301 	ands.w	r3, r0, #1
 80045ee:	d00a      	beq.n	8004606 <__swsetup_r+0x9e>
 80045f0:	2300      	movs	r3, #0
 80045f2:	60a3      	str	r3, [r4, #8]
 80045f4:	6963      	ldr	r3, [r4, #20]
 80045f6:	425b      	negs	r3, r3
 80045f8:	61a3      	str	r3, [r4, #24]
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	b943      	cbnz	r3, 8004610 <__swsetup_r+0xa8>
 80045fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004602:	d1c4      	bne.n	800458e <__swsetup_r+0x26>
 8004604:	bd38      	pop	{r3, r4, r5, pc}
 8004606:	0781      	lsls	r1, r0, #30
 8004608:	bf58      	it	pl
 800460a:	6963      	ldrpl	r3, [r4, #20]
 800460c:	60a3      	str	r3, [r4, #8]
 800460e:	e7f4      	b.n	80045fa <__swsetup_r+0x92>
 8004610:	2000      	movs	r0, #0
 8004612:	e7f7      	b.n	8004604 <__swsetup_r+0x9c>
 8004614:	20000064 	.word	0x20000064

08004618 <memmove>:
 8004618:	4288      	cmp	r0, r1
 800461a:	b510      	push	{r4, lr}
 800461c:	eb01 0402 	add.w	r4, r1, r2
 8004620:	d902      	bls.n	8004628 <memmove+0x10>
 8004622:	4284      	cmp	r4, r0
 8004624:	4623      	mov	r3, r4
 8004626:	d807      	bhi.n	8004638 <memmove+0x20>
 8004628:	1e43      	subs	r3, r0, #1
 800462a:	42a1      	cmp	r1, r4
 800462c:	d008      	beq.n	8004640 <memmove+0x28>
 800462e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004636:	e7f8      	b.n	800462a <memmove+0x12>
 8004638:	4402      	add	r2, r0
 800463a:	4601      	mov	r1, r0
 800463c:	428a      	cmp	r2, r1
 800463e:	d100      	bne.n	8004642 <memmove+0x2a>
 8004640:	bd10      	pop	{r4, pc}
 8004642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800464a:	e7f7      	b.n	800463c <memmove+0x24>

0800464c <_sbrk_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	4d06      	ldr	r5, [pc, #24]	; (8004668 <_sbrk_r+0x1c>)
 8004650:	2300      	movs	r3, #0
 8004652:	4604      	mov	r4, r0
 8004654:	4608      	mov	r0, r1
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	f7fc fa0a 	bl	8000a70 <_sbrk>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_sbrk_r+0x1a>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_sbrk_r+0x1a>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	2000024c 	.word	0x2000024c

0800466c <_realloc_r>:
 800466c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004670:	4680      	mov	r8, r0
 8004672:	4614      	mov	r4, r2
 8004674:	460e      	mov	r6, r1
 8004676:	b921      	cbnz	r1, 8004682 <_realloc_r+0x16>
 8004678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800467c:	4611      	mov	r1, r2
 800467e:	f7ff b9cf 	b.w	8003a20 <_malloc_r>
 8004682:	b92a      	cbnz	r2, 8004690 <_realloc_r+0x24>
 8004684:	f7ff f960 	bl	8003948 <_free_r>
 8004688:	4625      	mov	r5, r4
 800468a:	4628      	mov	r0, r5
 800468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004690:	f000 f8a0 	bl	80047d4 <_malloc_usable_size_r>
 8004694:	4284      	cmp	r4, r0
 8004696:	4607      	mov	r7, r0
 8004698:	d802      	bhi.n	80046a0 <_realloc_r+0x34>
 800469a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800469e:	d812      	bhi.n	80046c6 <_realloc_r+0x5a>
 80046a0:	4621      	mov	r1, r4
 80046a2:	4640      	mov	r0, r8
 80046a4:	f7ff f9bc 	bl	8003a20 <_malloc_r>
 80046a8:	4605      	mov	r5, r0
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d0ed      	beq.n	800468a <_realloc_r+0x1e>
 80046ae:	42bc      	cmp	r4, r7
 80046b0:	4622      	mov	r2, r4
 80046b2:	4631      	mov	r1, r6
 80046b4:	bf28      	it	cs
 80046b6:	463a      	movcs	r2, r7
 80046b8:	f7ff f937 	bl	800392a <memcpy>
 80046bc:	4631      	mov	r1, r6
 80046be:	4640      	mov	r0, r8
 80046c0:	f7ff f942 	bl	8003948 <_free_r>
 80046c4:	e7e1      	b.n	800468a <_realloc_r+0x1e>
 80046c6:	4635      	mov	r5, r6
 80046c8:	e7df      	b.n	800468a <_realloc_r+0x1e>

080046ca <__swhatbuf_r>:
 80046ca:	b570      	push	{r4, r5, r6, lr}
 80046cc:	460c      	mov	r4, r1
 80046ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d2:	2900      	cmp	r1, #0
 80046d4:	b096      	sub	sp, #88	; 0x58
 80046d6:	4615      	mov	r5, r2
 80046d8:	461e      	mov	r6, r3
 80046da:	da0d      	bge.n	80046f8 <__swhatbuf_r+0x2e>
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046e2:	f04f 0100 	mov.w	r1, #0
 80046e6:	bf0c      	ite	eq
 80046e8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80046ec:	2340      	movne	r3, #64	; 0x40
 80046ee:	2000      	movs	r0, #0
 80046f0:	6031      	str	r1, [r6, #0]
 80046f2:	602b      	str	r3, [r5, #0]
 80046f4:	b016      	add	sp, #88	; 0x58
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	466a      	mov	r2, sp
 80046fa:	f000 f849 	bl	8004790 <_fstat_r>
 80046fe:	2800      	cmp	r0, #0
 8004700:	dbec      	blt.n	80046dc <__swhatbuf_r+0x12>
 8004702:	9901      	ldr	r1, [sp, #4]
 8004704:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004708:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800470c:	4259      	negs	r1, r3
 800470e:	4159      	adcs	r1, r3
 8004710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004714:	e7eb      	b.n	80046ee <__swhatbuf_r+0x24>

08004716 <__smakebuf_r>:
 8004716:	898b      	ldrh	r3, [r1, #12]
 8004718:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800471a:	079d      	lsls	r5, r3, #30
 800471c:	4606      	mov	r6, r0
 800471e:	460c      	mov	r4, r1
 8004720:	d507      	bpl.n	8004732 <__smakebuf_r+0x1c>
 8004722:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	6123      	str	r3, [r4, #16]
 800472a:	2301      	movs	r3, #1
 800472c:	6163      	str	r3, [r4, #20]
 800472e:	b002      	add	sp, #8
 8004730:	bd70      	pop	{r4, r5, r6, pc}
 8004732:	ab01      	add	r3, sp, #4
 8004734:	466a      	mov	r2, sp
 8004736:	f7ff ffc8 	bl	80046ca <__swhatbuf_r>
 800473a:	9900      	ldr	r1, [sp, #0]
 800473c:	4605      	mov	r5, r0
 800473e:	4630      	mov	r0, r6
 8004740:	f7ff f96e 	bl	8003a20 <_malloc_r>
 8004744:	b948      	cbnz	r0, 800475a <__smakebuf_r+0x44>
 8004746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800474a:	059a      	lsls	r2, r3, #22
 800474c:	d4ef      	bmi.n	800472e <__smakebuf_r+0x18>
 800474e:	f023 0303 	bic.w	r3, r3, #3
 8004752:	f043 0302 	orr.w	r3, r3, #2
 8004756:	81a3      	strh	r3, [r4, #12]
 8004758:	e7e3      	b.n	8004722 <__smakebuf_r+0xc>
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	6020      	str	r0, [r4, #0]
 800475e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	9b00      	ldr	r3, [sp, #0]
 8004766:	6163      	str	r3, [r4, #20]
 8004768:	9b01      	ldr	r3, [sp, #4]
 800476a:	6120      	str	r0, [r4, #16]
 800476c:	b15b      	cbz	r3, 8004786 <__smakebuf_r+0x70>
 800476e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004772:	4630      	mov	r0, r6
 8004774:	f000 f81e 	bl	80047b4 <_isatty_r>
 8004778:	b128      	cbz	r0, 8004786 <__smakebuf_r+0x70>
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	f023 0303 	bic.w	r3, r3, #3
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	81a3      	strh	r3, [r4, #12]
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	431d      	orrs	r5, r3
 800478a:	81a5      	strh	r5, [r4, #12]
 800478c:	e7cf      	b.n	800472e <__smakebuf_r+0x18>
	...

08004790 <_fstat_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4d07      	ldr	r5, [pc, #28]	; (80047b0 <_fstat_r+0x20>)
 8004794:	2300      	movs	r3, #0
 8004796:	4604      	mov	r4, r0
 8004798:	4608      	mov	r0, r1
 800479a:	4611      	mov	r1, r2
 800479c:	602b      	str	r3, [r5, #0]
 800479e:	f7fc f93e 	bl	8000a1e <_fstat>
 80047a2:	1c43      	adds	r3, r0, #1
 80047a4:	d102      	bne.n	80047ac <_fstat_r+0x1c>
 80047a6:	682b      	ldr	r3, [r5, #0]
 80047a8:	b103      	cbz	r3, 80047ac <_fstat_r+0x1c>
 80047aa:	6023      	str	r3, [r4, #0]
 80047ac:	bd38      	pop	{r3, r4, r5, pc}
 80047ae:	bf00      	nop
 80047b0:	2000024c 	.word	0x2000024c

080047b4 <_isatty_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4d06      	ldr	r5, [pc, #24]	; (80047d0 <_isatty_r+0x1c>)
 80047b8:	2300      	movs	r3, #0
 80047ba:	4604      	mov	r4, r0
 80047bc:	4608      	mov	r0, r1
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	f7fc f93d 	bl	8000a3e <_isatty>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d102      	bne.n	80047ce <_isatty_r+0x1a>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	b103      	cbz	r3, 80047ce <_isatty_r+0x1a>
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	2000024c 	.word	0x2000024c

080047d4 <_malloc_usable_size_r>:
 80047d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d8:	1f18      	subs	r0, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bfbc      	itt	lt
 80047de:	580b      	ldrlt	r3, [r1, r0]
 80047e0:	18c0      	addlt	r0, r0, r3
 80047e2:	4770      	bx	lr

080047e4 <_init>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	bf00      	nop
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr

080047f0 <_fini>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr
