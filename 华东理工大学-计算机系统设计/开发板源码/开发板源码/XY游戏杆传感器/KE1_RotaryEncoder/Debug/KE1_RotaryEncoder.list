
KE1_RotaryEncoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  08008280  08008280  00018280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e74  08008e74  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e74  08008e74  00018e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e7c  08008e7c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e7c  08008e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e80  08008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200001d4  08009058  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08009058  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc2b  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000265c  00000000  00000000  0002be72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  0002e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009bc  00000000  00000000  0002f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e24  00000000  00000000  0002fb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd4c  00000000  00000000  000549c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dda4b  00000000  00000000  0006470c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000459c  00000000  00000000  00142158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001466f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008264 	.word	0x08008264

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008264 	.word	0x08008264

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000eba:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000ebc:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <MX_ADC1_Init+0xdc>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef8:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f1a:	4818      	ldr	r0, [pc, #96]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000f1c:	f000 ff0e 	bl	8001d3c <HAL_ADC_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000f26:	f000 fab7 	bl	8001498 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_ADC1_Init+0xe0>)
 8000f2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f2e:	2306      	movs	r3, #6
 8000f30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f36:	237f      	movs	r3, #127	; 0x7f
 8000f38:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	480d      	ldr	r0, [pc, #52]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000f48:	f001 f8e0 	bl	800210c <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f52:	f000 faa1 	bl	8001498 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_ADC1_Init+0xe4>)
 8000f58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_ADC1_Init+0xd8>)
 8000f64:	f001 f8d2 	bl	800210c <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000f6e:	f000 fa93 	bl	8001498 <Error_Handler>
  }

}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000380 	.word	0x20000380
 8000f80:	50040000 	.word	0x50040000
 8000f84:	2a000400 	.word	0x2a000400
 8000f88:	32601000 	.word	0x32601000

08000f8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a2b      	ldr	r2, [pc, #172]	; (8001058 <HAL_ADC_MspInit+0xcc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d14f      	bne.n	800104e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a2a      	ldr	r2, [pc, #168]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a24      	ldr	r2, [pc, #144]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <HAL_ADC_MspInit+0xd0>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA5     ------> ADC1_IN10
    PA7     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fde:	23a0      	movs	r3, #160	; 0xa0
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fe2:	230b      	movs	r3, #11
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff4:	f001 ffd4 	bl	8002fa0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 8000ffa:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <HAL_ADC_MspInit+0xd8>)
 8000ffc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 8001018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 8001020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001024:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 8001028:	2220      	movs	r2, #32
 800102a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001032:	480b      	ldr	r0, [pc, #44]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 8001034:	f001 fdbc 	bl	8002bb0 <HAL_DMA_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800103e:	f000 fa2b 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 8001046:	64da      	str	r2, [r3, #76]	; 0x4c
 8001048:	4a05      	ldr	r2, [pc, #20]	; (8001060 <HAL_ADC_MspInit+0xd4>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	50040000 	.word	0x50040000
 800105c:	40021000 	.word	0x40021000
 8001060:	200003e4 	.word	0x200003e4
 8001064:	40020008 	.word	0x40020008

08001068 <adc_get_x_value>:
  }
} 

/* USER CODE BEGIN 1 */
float adc_get_x_value(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
	uint32_t AD_Value = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
	int     i;

	for(i = 0; i < ADC_BUFF_SIZE; i+=2){
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	e009      	b.n	800108c <adc_get_x_value+0x24>
		AD_Value += ADC_Value[i];
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <adc_get_x_value+0x64>)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	607b      	str	r3, [r7, #4]
	for(i = 0; i < ADC_BUFF_SIZE; i+=2){
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3302      	adds	r3, #2
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b63      	cmp	r3, #99	; 0x63
 8001090:	ddf2      	ble.n	8001078 <adc_get_x_value+0x10>
	}
	AD_Value /= ADC_BUFF_SIZE/2;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <adc_get_x_value+0x68>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	091b      	lsrs	r3, r3, #4
 800109c:	607b      	str	r3, [r7, #4]

	return (float)(AD_Value*3.3f/4096);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80010d4 <adc_get_x_value+0x6c>
 80010ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80010d8 <adc_get_x_value+0x70>
 80010b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80010bc:	eeb0 0a67 	vmov.f32	s0, s15
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	200001f0 	.word	0x200001f0
 80010d0:	51eb851f 	.word	0x51eb851f
 80010d4:	40533333 	.word	0x40533333
 80010d8:	45800000 	.word	0x45800000

080010dc <adc_get_y_value>:

float adc_get_y_value(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
	uint32_t AD_Value = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
	int     i;

	for(i = 1; i < ADC_BUFF_SIZE; i+=2){
 80010e6:	2301      	movs	r3, #1
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	e009      	b.n	8001100 <adc_get_y_value+0x24>
		AD_Value += ADC_Value[i];
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <adc_get_y_value+0x64>)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	607b      	str	r3, [r7, #4]
	for(i = 1; i < ADC_BUFF_SIZE; i+=2){
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	3302      	adds	r3, #2
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2b63      	cmp	r3, #99	; 0x63
 8001104:	ddf2      	ble.n	80010ec <adc_get_y_value+0x10>
	}
	AD_Value /= ADC_BUFF_SIZE/2;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <adc_get_y_value+0x68>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	607b      	str	r3, [r7, #4]

	return (float)(AD_Value*3.3f/4096);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001148 <adc_get_y_value+0x6c>
 8001120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001124:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800114c <adc_get_y_value+0x70>
 8001128:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800112c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001130:	eeb0 0a67 	vmov.f32	s0, s15
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200001f0 	.word	0x200001f0
 8001144:	51eb851f 	.word	0x51eb851f
 8001148:	40533333 	.word	0x40533333
 800114c:	45800000 	.word	0x45800000

08001150 <adc_start>:

void adc_start(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, ADC_BUFF_SIZE);
 8001154:	2264      	movs	r2, #100	; 0x64
 8001156:	4903      	ldr	r1, [pc, #12]	; (8001164 <adc_start+0x14>)
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <adc_start+0x18>)
 800115a:	f000 ff35 	bl	8001fc8 <HAL_ADC_Start_DMA>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200001f0 	.word	0x200001f0
 8001168:	20000380 	.word	0x20000380

0800116c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_DMA_Init+0x38>)
 8001174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <MX_DMA_Init+0x38>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6493      	str	r3, [r2, #72]	; 0x48
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_DMA_Init+0x38>)
 8001180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	200b      	movs	r0, #11
 8001190:	f001 fcd7 	bl	8002b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001194:	200b      	movs	r0, #11
 8001196:	f001 fcf0 	bl	8002b7a <HAL_NVIC_EnableIRQ>

}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <MX_GPIO_Init+0xac>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a24      	ldr	r2, [pc, #144]	; (8001254 <MX_GPIO_Init+0xac>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_GPIO_Init+0xac>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_GPIO_Init+0xac>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <MX_GPIO_Init+0xac>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_GPIO_Init+0xac>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_GPIO_Init+0xac>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a18      	ldr	r2, [pc, #96]	; (8001254 <MX_GPIO_Init+0xac>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_GPIO_Init+0xac>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 7140 	mov.w	r1, #768	; 0x300
 800120c:	4812      	ldr	r0, [pc, #72]	; (8001258 <MX_GPIO_Init+0xb0>)
 800120e:	f002 f859 	bl	80032c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001212:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121c:	2301      	movs	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4619      	mov	r1, r3
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f001 feb9 	bl	8002fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800122e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_GPIO_Init+0xb0>)
 8001248:	f001 feaa 	bl	8002fa0 <HAL_GPIO_Init>

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	48000400 	.word	0x48000400

0800125c <oled_show_xy>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void oled_show_xy(void)
{
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af02      	add	r7, sp, #8
	uint8_t   strBuf[17] = {0};
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	731a      	strb	r2, [r3, #12]
	uint8_t   show_str[17] = {0};
 8001274:	2300      	movs	r3, #0
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	731a      	strb	r2, [r3, #12]
	int       iLen = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28

	uint16_t  x, y;

	memset(strBuf, 0, sizeof(strBuf));
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2211      	movs	r2, #17
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f004 feec 	bl	800606e <memset>
	memset(show_str, ' ', sizeof(show_str));
 8001296:	463b      	mov	r3, r7
 8001298:	2211      	movs	r2, #17
 800129a:	2120      	movs	r1, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f004 fee6 	bl	800606e <memset>

	x = adc_get_x_value()*337;
 80012a2:	f7ff fee1 	bl	8001068 <adc_get_x_value>
 80012a6:	eef0 7a40 	vmov.f32	s15, s0
 80012aa:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800134c <oled_show_xy+0xf0>
 80012ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b6:	ee17 3a90 	vmov	r3, s15
 80012ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
	y = adc_get_y_value()*337;
 80012bc:	f7ff ff0e 	bl	80010dc <adc_get_y_value>
 80012c0:	eef0 7a40 	vmov.f32	s15, s0
 80012c4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800134c <oled_show_xy+0xf0>
 80012c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d0:	ee17 3a90 	vmov	r3, s15
 80012d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	if(x >= 1023) x = 1023;
 80012d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012d8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80012dc:	4293      	cmp	r3, r2
 80012de:	d902      	bls.n	80012e6 <oled_show_xy+0x8a>
 80012e0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80012e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if(y >= 1023) y = 1023;
 80012e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012e8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d902      	bls.n	80012f6 <oled_show_xy+0x9a>
 80012f0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80012f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	snprintf((char *)strBuf, sizeof(strBuf),"X:%d,Y:%d,Z:%d", x, y, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11));
 80012f6:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 80012f8:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 80012fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f001 ffc7 	bl	8003294 <HAL_GPIO_ReadPin>
 8001306:	4603      	mov	r3, r0
 8001308:	f107 0014 	add.w	r0, r7, #20
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	9400      	str	r4, [sp, #0]
 8001310:	462b      	mov	r3, r5
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <oled_show_xy+0xf4>)
 8001314:	2111      	movs	r1, #17
 8001316:	f004 fe33 	bl	8005f80 <sniprintf>

	iLen = strlen((char *)strBuf);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4618      	mov	r0, r3
 8001320:	f7fe ffa6 	bl	8000270 <strlen>
 8001324:	4603      	mov	r3, r0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
	memcpy(show_str, strBuf, iLen);
 8001328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800132a:	f107 0114 	add.w	r1, r7, #20
 800132e:	463b      	mov	r3, r7
 8001330:	4618      	mov	r0, r3
 8001332:	f004 ff1c 	bl	800616e <memcpy>
	OLED_ShowString(0,2, show_str, 8);
 8001336:	463a      	mov	r2, r7
 8001338:	2308      	movs	r3, #8
 800133a:	2102      	movs	r1, #2
 800133c:	2000      	movs	r0, #0
 800133e:	f004 f861 	bl	8005404 <OLED_ShowString>
}
 8001342:	bf00      	nop
 8001344:	3730      	adds	r7, #48	; 0x30
 8001346:	46bd      	mov	sp, r7
 8001348:	bdb0      	pop	{r4, r5, r7, pc}
 800134a:	bf00      	nop
 800134c:	43a88000 	.word	0x43a88000
 8001350:	08008280 	.word	0x08008280

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001358:	f000 faa3 	bl	80018a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135c:	f000 f81e 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001360:	f7ff ff22 	bl	80011a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001364:	f000 f9ee 	bl	8001744 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001368:	f7ff ff00 	bl	800116c <MX_DMA_Init>
  MX_ADC1_Init();
 800136c:	f7ff fd9a 	bl	8000ea4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  adc_start();
 8001370:	f7ff feee 	bl	8001150 <adc_start>
  OLED_Init();
 8001374:	f004 f876 	bl	8005464 <OLED_Init>
  OLED_Clear();
 8001378:	f003 ff98 	bl	80052ac <OLED_Clear>
  OLED_ShowString(0,0, (uint8_t *)"****Rocker****", 8);
 800137c:	2308      	movs	r3, #8
 800137e:	4a06      	ldr	r2, [pc, #24]	; (8001398 <main+0x44>)
 8001380:	2100      	movs	r1, #0
 8001382:	2000      	movs	r0, #0
 8001384:	f004 f83e 	bl	8005404 <OLED_ShowString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  oled_show_xy();
 8001388:	f7ff ff68 	bl	800125c <oled_show_xy>
	  HAL_Delay(1000);
 800138c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001390:	f000 faf8 	bl	8001984 <HAL_Delay>
	  oled_show_xy();
 8001394:	e7f8      	b.n	8001388 <main+0x34>
 8001396:	bf00      	nop
 8001398:	08008290 	.word	0x08008290

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0ae      	sub	sp, #184	; 0xb8
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013a6:	2244      	movs	r2, #68	; 0x44
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 fe5f 	bl	800606e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c0:	463b      	mov	r3, r7
 80013c2:	2260      	movs	r2, #96	; 0x60
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 fe51 	bl	800606e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013dc:	2303      	movs	r3, #3
 80013de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 20;
 80013e8:	2314      	movs	r3, #20
 80013ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013ee:	2307      	movs	r3, #7
 80013f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001404:	4618      	mov	r0, r3
 8001406:	f001 ffd9 	bl	80033bc <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001410:	f000 f842 	bl	8001498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	2303      	movs	r3, #3
 800141a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001428:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800142c:	2104      	movs	r1, #4
 800142e:	4618      	mov	r0, r3
 8001430:	f002 fbb4 	bl	8003b9c <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800143a:	f000 f82d 	bl	8001498 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 800143e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001442:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001448:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800144c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800144e:	2303      	movs	r3, #3
 8001450:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001452:	2301      	movs	r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001456:	2308      	movs	r3, #8
 8001458:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800145a:	2307      	movs	r3, #7
 800145c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800145e:	2302      	movs	r3, #2
 8001460:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001466:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800146a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fd9a 	bl	8003fa8 <HAL_RCCEx_PeriphCLKConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800147a:	f000 f80d 	bl	8001498 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800147e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001482:	f001 ff45 	bl	8003310 <HAL_PWREx_ControlVoltageScaling>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800148c:	f000 f804 	bl	8001498 <Error_Handler>
  }
}
 8001490:	bf00      	nop
 8001492:	37b8      	adds	r7, #184	; 0xb8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_MspInit+0x44>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_MspInit+0x44>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_MspInit+0x44>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_MspInit+0x44>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_MspInit+0x44>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6593      	str	r3, [r2, #88]	; 0x58
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_MspInit+0x44>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f000 fa00 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <DMA1_Channel1_IRQHandler+0x10>)
 8001552:	f001 fc45 	bl	8002de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200003e4 	.word	0x200003e4

08001560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_kill>:

int _kill(int pid, int sig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800157a:	f004 fdcb 	bl	8006114 <__errno>
 800157e:	4603      	mov	r3, r0
 8001580:	2216      	movs	r2, #22
 8001582:	601a      	str	r2, [r3, #0]
	return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_exit>:

void _exit (int status)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffe7 	bl	8001570 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015a2:	e7fe      	b.n	80015a2 <_exit+0x12>

080015a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	e00a      	b.n	80015cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015b6:	f3af 8000 	nop.w
 80015ba:	4601      	mov	r1, r0
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	b2ca      	uxtb	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbf0      	blt.n	80015b6 <_read+0x12>
	}

return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e009      	b.n	8001604 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	60ba      	str	r2, [r7, #8]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f917 	bl	800182c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf1      	blt.n	80015f0 <_write+0x12>
	}
	return len;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_close>:

int _close(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163e:	605a      	str	r2, [r3, #4]
	return 0;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <_isatty>:

int _isatty(int file)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
	return 1;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
	return 0;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x50>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <_sbrk+0x16>
		heap_end = &end;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <_sbrk+0x50>)
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <_sbrk+0x54>)
 8001694:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <_sbrk+0x50>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <_sbrk+0x50>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	466a      	mov	r2, sp
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d907      	bls.n	80016ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016aa:	f004 fd33 	bl	8006114 <__errno>
 80016ae:	4603      	mov	r3, r0
 80016b0:	220c      	movs	r2, #12
 80016b2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
 80016b8:	e006      	b.n	80016c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <_sbrk+0x50>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <_sbrk+0x50>)
 80016c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2000042c 	.word	0x2000042c
 80016d4:	20000600 	.word	0x20000600

080016d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <SystemInit+0x64>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <SystemInit+0x64>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <SystemInit+0x68>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a13      	ldr	r2, [pc, #76]	; (8001740 <SystemInit+0x68>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <SystemInit+0x68>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <SystemInit+0x68>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <SystemInit+0x68>)
 8001704:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001708:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800170c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <SystemInit+0x68>)
 8001710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001714:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <SystemInit+0x68>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a09      	ldr	r2, [pc, #36]	; (8001740 <SystemInit+0x68>)
 800171c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <SystemInit+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <SystemInit+0x64>)
 800172a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800172e:	609a      	str	r2, [r3, #8]
#endif
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	40021000 	.word	0x40021000

08001744 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_USART1_UART_Init+0x58>)
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <MX_USART1_UART_Init+0x5c>)
 800174c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001754:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_USART1_UART_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_USART1_UART_Init+0x58>)
 800176a:	220c      	movs	r2, #12
 800176c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_USART1_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_USART1_UART_Init+0x58>)
 8001788:	f002 ff4a 	bl	8004620 <HAL_UART_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001792:	f7ff fe81 	bl	8001498 <Error_Handler>
  }

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000430 	.word	0x20000430
 80017a0:	40013800 	.word	0x40013800

080017a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a18      	ldr	r2, [pc, #96]	; (8001824 <HAL_UART_MspInit+0x80>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d129      	bne.n	800181a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_UART_MspInit+0x84>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_UART_MspInit+0x84>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6613      	str	r3, [r2, #96]	; 0x60
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_UART_MspInit+0x84>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_UART_MspInit+0x84>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4a11      	ldr	r2, [pc, #68]	; (8001828 <HAL_UART_MspInit+0x84>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_UART_MspInit+0x84>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001808:	2307      	movs	r3, #7
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001816:	f001 fbc3 	bl	8002fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40013800 	.word	0x40013800
 8001828:	40021000 	.word	0x40021000

0800182c <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001834:	1d39      	adds	r1, r7, #4
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	2201      	movs	r2, #1
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <__io_putchar+0x20>)
 800183e:	f002 ff3d 	bl	80046bc <HAL_UART_Transmit>
    return ch;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000430 	.word	0x20000430

08001850 <Reset_Handler>:
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001888 <LoopForever+0x2>
 8001854:	2100      	movs	r1, #0
 8001856:	e003      	b.n	8001860 <LoopCopyDataInit>

08001858 <CopyDataInit>:
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <LoopForever+0x6>)
 800185a:	585b      	ldr	r3, [r3, r1]
 800185c:	5043      	str	r3, [r0, r1]
 800185e:	3104      	adds	r1, #4

08001860 <LoopCopyDataInit>:
 8001860:	480b      	ldr	r0, [pc, #44]	; (8001890 <LoopForever+0xa>)
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <LoopForever+0xe>)
 8001864:	1842      	adds	r2, r0, r1
 8001866:	429a      	cmp	r2, r3
 8001868:	d3f6      	bcc.n	8001858 <CopyDataInit>
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <LoopForever+0x12>)
 800186c:	e002      	b.n	8001874 <LoopFillZerobss>

0800186e <FillZerobss>:
 800186e:	2300      	movs	r3, #0
 8001870:	f842 3b04 	str.w	r3, [r2], #4

08001874 <LoopFillZerobss>:
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <LoopForever+0x16>)
 8001876:	429a      	cmp	r2, r3
 8001878:	d3f9      	bcc.n	800186e <FillZerobss>
 800187a:	f7ff ff2d 	bl	80016d8 <SystemInit>
 800187e:	f004 fc4f 	bl	8006120 <__libc_init_array>
 8001882:	f7ff fd67 	bl	8001354 <main>

08001886 <LoopForever>:
 8001886:	e7fe      	b.n	8001886 <LoopForever>
 8001888:	20010000 	.word	0x20010000
 800188c:	08008e84 	.word	0x08008e84
 8001890:	20000000 	.word	0x20000000
 8001894:	200001d4 	.word	0x200001d4
 8001898:	200001d4 	.word	0x200001d4
 800189c:	20000600 	.word	0x20000600

080018a0 <ADC1_IRQHandler>:
 80018a0:	e7fe      	b.n	80018a0 <ADC1_IRQHandler>

080018a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f001 f93d 	bl	8002b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f80e 	bl	80018d4 <HAL_InitTick>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	e001      	b.n	80018c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c4:	f7ff fdf0 	bl	80014a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_InitTick+0x68>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d022      	beq.n	800192e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_InitTick+0x6c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_InitTick+0x68>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 f94a 	bl	8002b96 <HAL_SYSTICK_Config>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10f      	bne.n	8001928 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b0f      	cmp	r3, #15
 800190c:	d809      	bhi.n	8001922 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190e:	2200      	movs	r2, #0
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	f04f 30ff 	mov.w	r0, #4294967295
 8001916:	f001 f914 	bl	8002b42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_InitTick+0x70>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	e007      	b.n	8001932 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	e004      	b.n	8001932 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	e001      	b.n	8001932 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000008 	.word	0x20000008
 8001940:	20000000 	.word	0x20000000
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_IncTick+0x1c>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_IncTick+0x20>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4413      	add	r3, r2
 8001956:	4a03      	ldr	r2, [pc, #12]	; (8001964 <HAL_IncTick+0x1c>)
 8001958:	6013      	str	r3, [r2, #0]
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	200004b0 	.word	0x200004b0
 8001968:	20000008 	.word	0x20000008

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	200004b0 	.word	0x200004b0

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d004      	beq.n	80019a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_Delay+0x40>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a8:	bf00      	nop
 80019aa:	f7ff ffdf 	bl	800196c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d8f7      	bhi.n	80019aa <HAL_Delay+0x26>
  {
  }
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000008 	.word	0x20000008

080019c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	609a      	str	r2, [r3, #8]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a30:	b490      	push	{r4, r7}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3360      	adds	r3, #96	; 0x60
 8001a42:	461a      	mov	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001a4c:	6822      	ldr	r2, [r4, #0]
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <LL_ADC_SetOffset+0x40>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a62:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc90      	pop	{r4, r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	03fff000 	.word	0x03fff000

08001a74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a74:	b490      	push	{r4, r7}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3360      	adds	r3, #96	; 0x60
 8001a82:	461a      	mov	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc90      	pop	{r4, r7}
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a9c:	b490      	push	{r4, r7}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3360      	adds	r3, #96	; 0x60
 8001aac:	461a      	mov	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc90      	pop	{r4, r7}
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001af2:	b490      	push	{r4, r7}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3330      	adds	r3, #48	; 0x30
 8001b02:	461a      	mov	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	4413      	add	r3, r2
 8001b10:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b12:	6822      	ldr	r2, [r4, #0]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	211f      	movs	r1, #31
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	0e9b      	lsrs	r3, r3, #26
 8001b28:	f003 011f 	and.w	r1, r3, #31
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc90      	pop	{r4, r7}
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b44:	b490      	push	{r4, r7}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3314      	adds	r3, #20
 8001b54:	461a      	mov	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	0e5b      	lsrs	r3, r3, #25
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	4413      	add	r3, r2
 8001b62:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	0d1b      	lsrs	r3, r3, #20
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2107      	movs	r1, #7
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	401a      	ands	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	0d1b      	lsrs	r3, r3, #20
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc90      	pop	{r4, r7}
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bac:	43db      	mvns	r3, r3
 8001bae:	401a      	ands	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0318 	and.w	r3, r3, #24
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bb8:	40d9      	lsrs	r1, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	0007ffff 	.word	0x0007ffff

08001bdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6093      	str	r3, [r2, #8]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c64:	d101      	bne.n	8001c6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <LL_ADC_IsEnabled+0x18>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <LL_ADC_IsEnabled+0x1a>
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cda:	f043 0204 	orr.w	r2, r3, #4
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d101      	bne.n	8001d2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e12a      	b.n	8001fac <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff f911 	bl	8000f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff3f 	bl	8001c00 <LL_ADC_IsDeepPowerDownEnabled>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff25 	bl	8001bdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff5a 	bl	8001c50 <LL_ADC_IsInternalRegulatorEnabled>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d113      	bne.n	8001dca <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff3e 	bl	8001c28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001dac:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_ADC_Init+0x278>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	4a81      	ldr	r2, [pc, #516]	; (8001fb8 <HAL_ADC_Init+0x27c>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dbc:	e002      	b.n	8001dc4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f9      	bne.n	8001dbe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff3e 	bl	8001c50 <LL_ADC_IsInternalRegulatorEnabled>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10d      	bne.n	8001df6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f043 0210 	orr.w	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff77 	bl	8001cee <LL_ADC_REG_IsConversionOngoing>
 8001e00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 80c5 	bne.w	8001f9a <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 80c1 	bne.w	8001f9a <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e20:	f043 0202 	orr.w	r2, r3, #2
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff37 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e38:	4860      	ldr	r0, [pc, #384]	; (8001fbc <HAL_ADC_Init+0x280>)
 8001e3a:	f7ff ff31 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	485d      	ldr	r0, [pc, #372]	; (8001fc0 <HAL_ADC_Init+0x284>)
 8001e4c:	f7ff fdbc 	bl	80019c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7e5b      	ldrb	r3, [r3, #25]
 8001e54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d106      	bne.n	8001e8c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	3b01      	subs	r3, #1
 8001e84:	045b      	lsls	r3, r3, #17
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	4b45      	ldr	r3, [pc, #276]	; (8001fc4 <HAL_ADC_Init+0x288>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	69b9      	ldr	r1, [r7, #24]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff14 	bl	8001cee <LL_ADC_REG_IsConversionOngoing>
 8001ec6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff21 	bl	8001d14 <LL_ADC_INJ_IsConversionOngoing>
 8001ed2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d13d      	bne.n	8001f56 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d13a      	bne.n	8001f56 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ee4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001efc:	f023 0302 	bic.w	r3, r3, #2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	69b9      	ldr	r1, [r7, #24]
 8001f06:	430b      	orrs	r3, r1
 8001f08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d118      	bne.n	8001f46 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f30:	4311      	orrs	r1, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f36:	430a      	orrs	r2, r1
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	611a      	str	r2, [r3, #16]
 8001f44:	e007      	b.n	8001f56 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10c      	bne.n	8001f78 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	f023 010f 	bic.w	r1, r3, #15
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	1e5a      	subs	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
 8001f76:	e007      	b.n	8001f88 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 020f 	bic.w	r2, r2, #15
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	f023 0303 	bic.w	r3, r3, #3
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
 8001f98:	e007      	b.n	8001faa <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9e:	f043 0210 	orr.w	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	053e2d63 	.word	0x053e2d63
 8001fbc:	50040000 	.word	0x50040000
 8001fc0:	50040300 	.word	0x50040300
 8001fc4:	fff0c007 	.word	0xfff0c007

08001fc8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fe88 	bl	8001cee <LL_ADC_REG_IsConversionOngoing>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d167      	bne.n	80020b4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_ADC_Start_DMA+0x2a>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e063      	b.n	80020ba <HAL_ADC_Start_DMA+0xf2>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fbd8 	bl	80027b0 <ADC_Enable>
 8002000:	4603      	mov	r3, r0
 8002002:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d14f      	bne.n	80020aa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f023 0206 	bic.w	r2, r3, #6
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	659a      	str	r2, [r3, #88]	; 0x58
 8002036:	e002      	b.n	800203e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	4a20      	ldr	r2, [pc, #128]	; (80020c4 <HAL_ADC_Start_DMA+0xfc>)
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <HAL_ADC_Start_DMA+0x100>)
 800204c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <HAL_ADC_Start_DMA+0x104>)
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	221c      	movs	r2, #28
 800205c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0210 	orr.w	r2, r2, #16
 8002074:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0201 	orr.w	r2, r2, #1
 8002084:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3340      	adds	r3, #64	; 0x40
 8002090:	4619      	mov	r1, r3
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f000 fe43 	bl	8002d20 <HAL_DMA_Start_IT>
 800209a:	4603      	mov	r3, r0
 800209c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fe0f 	bl	8001cc6 <LL_ADC_REG_StartConversion>
 80020a8:	e006      	b.n	80020b8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80020b2:	e001      	b.n	80020b8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
 80020b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	08002865 	.word	0x08002865
 80020c8:	0800293d 	.word	0x0800293d
 80020cc:	08002959 	.word	0x08002959

080020d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0a6      	sub	sp, #152	; 0x98
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x22>
 800212a:	2302      	movs	r3, #2
 800212c:	e336      	b.n	800279c <HAL_ADC_ConfigChannel+0x690>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fdd7 	bl	8001cee <LL_ADC_REG_IsConversionOngoing>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 831b 	bne.w	800277e <HAL_ADC_ConfigChannel+0x672>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d824      	bhi.n	800219a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	3b02      	subs	r3, #2
 8002156:	2b03      	cmp	r3, #3
 8002158:	d81b      	bhi.n	8002192 <HAL_ADC_ConfigChannel+0x86>
 800215a:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <HAL_ADC_ConfigChannel+0x54>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	08002171 	.word	0x08002171
 8002164:	08002179 	.word	0x08002179
 8002168:	08002181 	.word	0x08002181
 800216c:	08002189 	.word	0x08002189
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	220c      	movs	r2, #12
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	e010      	b.n	800219a <HAL_ADC_ConfigChannel+0x8e>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2212      	movs	r2, #18
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	e00c      	b.n	800219a <HAL_ADC_ConfigChannel+0x8e>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2218      	movs	r2, #24
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	e008      	b.n	800219a <HAL_ADC_ConfigChannel+0x8e>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	e003      	b.n	800219a <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2206      	movs	r2, #6
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	bf00      	nop
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	f7ff fca3 	bl	8001af2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fd9c 	bl	8001cee <LL_ADC_REG_IsConversionOngoing>
 80021b6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fda8 	bl	8001d14 <LL_ADC_INJ_IsConversionOngoing>
 80021c4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f040 8148 	bne.w	8002462 <HAL_ADC_ConfigChannel+0x356>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 8143 	bne.w	8002462 <HAL_ADC_ConfigChannel+0x356>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6819      	ldr	r1, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	461a      	mov	r2, r3
 80021ea:	f7ff fcab 	bl	8001b44 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d00a      	beq.n	8002226 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6919      	ldr	r1, [r3, #16]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002220:	f7ff fc06 	bl	8001a30 <LL_ADC_SetOffset>
 8002224:	e11d      	b.n	8002462 <HAL_ADC_ConfigChannel+0x356>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fc21 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10a      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x146>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fc16 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	0e9b      	lsrs	r3, r3, #26
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	e012      	b.n	8002278 <HAL_ADC_ConfigChannel+0x16c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fc0b 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800226e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x184>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	e00a      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x19a>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800229e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d106      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1ac>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fbf2 	bl	8001a9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2101      	movs	r1, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fbd8 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10a      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x1d8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2101      	movs	r1, #1
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fbcd 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	f003 021f 	and.w	r2, r3, #31
 80022e2:	e010      	b.n	8002306 <HAL_ADC_ConfigChannel+0x1fa>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2101      	movs	r1, #1
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fbc2 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <HAL_ADC_ConfigChannel+0x212>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0e9b      	lsrs	r3, r3, #26
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	e00a      	b.n	8002334 <HAL_ADC_ConfigChannel+0x228>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800232c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	429a      	cmp	r2, r3
 8002336:	d106      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x23a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2200      	movs	r2, #0
 800233e:	2101      	movs	r1, #1
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fbab 	bl	8001a9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2102      	movs	r1, #2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fb91 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x266>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2102      	movs	r1, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fb86 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	0e9b      	lsrs	r3, r3, #26
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	e010      	b.n	8002394 <HAL_ADC_ConfigChannel+0x288>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2102      	movs	r1, #2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fb7b 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800238a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x2a0>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	e00a      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x2b6>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80023ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d106      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x2c8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	2102      	movs	r1, #2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fb64 	bl	8001a9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2103      	movs	r1, #3
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fb4a 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x2f4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2103      	movs	r1, #3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fb3f 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	f003 021f 	and.w	r2, r3, #31
 80023fe:	e010      	b.n	8002422 <HAL_ADC_ConfigChannel+0x316>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2103      	movs	r1, #3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fb34 	bl	8001a74 <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_ADC_ConfigChannel+0x32e>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	0e9b      	lsrs	r3, r3, #26
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	e00a      	b.n	8002450 <HAL_ADC_ConfigChannel+0x344>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	429a      	cmp	r2, r3
 8002452:	d106      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x356>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2200      	movs	r2, #0
 800245a:	2103      	movs	r1, #3
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fb1d 	bl	8001a9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fc1a 	bl	8001ca0 <LL_ADC_IsEnabled>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 810c 	bne.w	800268c <HAL_ADC_ConfigChannel+0x580>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6819      	ldr	r1, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	461a      	mov	r2, r3
 8002482:	f7ff fb87 	bl	8001b94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	4aa8      	ldr	r2, [pc, #672]	; (800272c <HAL_ADC_ConfigChannel+0x620>)
 800248c:	4293      	cmp	r3, r2
 800248e:	f040 80fd 	bne.w	800268c <HAL_ADC_ConfigChannel+0x580>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10b      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x3ae>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0e9b      	lsrs	r3, r3, #26
 80024a8:	3301      	adds	r3, #1
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2b09      	cmp	r3, #9
 80024b0:	bf94      	ite	ls
 80024b2:	2301      	movls	r3, #1
 80024b4:	2300      	movhi	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	e012      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x3d4>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2b09      	cmp	r3, #9
 80024d8:	bf94      	ite	ls
 80024da:	2301      	movls	r3, #1
 80024dc:	2300      	movhi	r3, #0
 80024de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d064      	beq.n	80025ae <HAL_ADC_ConfigChannel+0x4a2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d107      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x3f4>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	3301      	adds	r3, #1
 80024f8:	069b      	lsls	r3, r3, #26
 80024fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fe:	e00e      	b.n	800251e <HAL_ADC_ConfigChannel+0x412>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	3301      	adds	r3, #1
 8002518:	069b      	lsls	r3, r3, #26
 800251a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_ADC_ConfigChannel+0x432>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0e9b      	lsrs	r3, r3, #26
 8002530:	3301      	adds	r3, #1
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	e010      	b.n	8002560 <HAL_ADC_ConfigChannel+0x454>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	ea42 0103 	orr.w	r1, r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x47a>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	051b      	lsls	r3, r3, #20
 8002584:	e011      	b.n	80025aa <HAL_ADC_ConfigChannel+0x49e>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f003 021f 	and.w	r2, r3, #31
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025aa:	430b      	orrs	r3, r1
 80025ac:	e069      	b.n	8002682 <HAL_ADC_ConfigChannel+0x576>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x4be>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0e9b      	lsrs	r3, r3, #26
 80025c0:	3301      	adds	r3, #1
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c8:	e00e      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x4dc>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	61fb      	str	r3, [r7, #28]
  return result;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	069b      	lsls	r3, r3, #26
 80025e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x4fc>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	3301      	adds	r3, #1
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	e010      	b.n	800262a <HAL_ADC_ConfigChannel+0x51e>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	617b      	str	r3, [r7, #20]
  return result;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	ea42 0103 	orr.w	r1, r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10d      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x54a>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0e9b      	lsrs	r3, r3, #26
 8002640:	3301      	adds	r3, #1
 8002642:	f003 021f 	and.w	r2, r3, #31
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	3b1e      	subs	r3, #30
 800264e:	051b      	lsls	r3, r3, #20
 8002650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002654:	e014      	b.n	8002680 <HAL_ADC_ConfigChannel+0x574>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	60fb      	str	r3, [r7, #12]
  return result;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	3b1e      	subs	r3, #30
 800267a:	051b      	lsls	r3, r3, #20
 800267c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002680:	430b      	orrs	r3, r1
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	6892      	ldr	r2, [r2, #8]
 8002686:	4619      	mov	r1, r3
 8002688:	f7ff fa5c 	bl	8001b44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b27      	ldr	r3, [pc, #156]	; (8002730 <HAL_ADC_ConfigChannel+0x624>)
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d07b      	beq.n	8002790 <HAL_ADC_ConfigChannel+0x684>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002698:	4826      	ldr	r0, [pc, #152]	; (8002734 <HAL_ADC_ConfigChannel+0x628>)
 800269a:	f7ff f9bb 	bl	8001a14 <LL_ADC_GetCommonPathInternalCh>
 800269e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a24      	ldr	r2, [pc, #144]	; (8002738 <HAL_ADC_ConfigChannel+0x62c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d126      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x5ee>
 80026ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d120      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x5ee>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a1f      	ldr	r2, [pc, #124]	; (800273c <HAL_ADC_ConfigChannel+0x630>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d166      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x684>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026ca:	4619      	mov	r1, r3
 80026cc:	4819      	ldr	r0, [pc, #100]	; (8002734 <HAL_ADC_ConfigChannel+0x628>)
 80026ce:	f7ff f98e 	bl	80019ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_ADC_ConfigChannel+0x634>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	099b      	lsrs	r3, r3, #6
 80026d8:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_ADC_ConfigChannel+0x638>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	099a      	lsrs	r2, r3, #6
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026ea:	e002      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x5e6>
          {
            wait_loop_index--;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f9      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x5e0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f8:	e04a      	b.n	8002790 <HAL_ADC_ConfigChannel+0x684>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <HAL_ADC_ConfigChannel+0x63c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d123      	bne.n	800274c <HAL_ADC_ConfigChannel+0x640>
 8002704:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11d      	bne.n	800274c <HAL_ADC_ConfigChannel+0x640>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_ADC_ConfigChannel+0x630>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d13a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x684>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800271a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002722:	4619      	mov	r1, r3
 8002724:	4803      	ldr	r0, [pc, #12]	; (8002734 <HAL_ADC_ConfigChannel+0x628>)
 8002726:	f7ff f962 	bl	80019ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800272a:	e031      	b.n	8002790 <HAL_ADC_ConfigChannel+0x684>
 800272c:	407f0000 	.word	0x407f0000
 8002730:	80080000 	.word	0x80080000
 8002734:	50040300 	.word	0x50040300
 8002738:	c7520000 	.word	0xc7520000
 800273c:	50040000 	.word	0x50040000
 8002740:	20000000 	.word	0x20000000
 8002744:	053e2d63 	.word	0x053e2d63
 8002748:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_ADC_ConfigChannel+0x698>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d11c      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x684>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002756:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800275a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x684>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <HAL_ADC_ConfigChannel+0x69c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d111      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x684>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800276c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002774:	4619      	mov	r1, r3
 8002776:	480d      	ldr	r0, [pc, #52]	; (80027ac <HAL_ADC_ConfigChannel+0x6a0>)
 8002778:	f7ff f939 	bl	80019ee <LL_ADC_SetCommonPathInternalCh>
 800277c:	e008      	b.n	8002790 <HAL_ADC_ConfigChannel+0x684>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f043 0220 	orr.w	r2, r3, #32
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002798:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800279c:	4618      	mov	r0, r3
 800279e:	3798      	adds	r7, #152	; 0x98
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	80000001 	.word	0x80000001
 80027a8:	50040000 	.word	0x50040000
 80027ac:	50040300 	.word	0x50040300

080027b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fa6f 	bl	8001ca0 <LL_ADC_IsEnabled>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d146      	bne.n	8002856 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <ADC_Enable+0xb0>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00d      	beq.n	80027f2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f043 0210 	orr.w	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	f043 0201 	orr.w	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e032      	b.n	8002858 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fa3e 	bl	8001c78 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027fc:	f7ff f8b6 	bl	800196c <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002802:	e021      	b.n	8002848 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fa49 	bl	8001ca0 <LL_ADC_IsEnabled>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d104      	bne.n	800281e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fa2d 	bl	8001c78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800281e:	f7ff f8a5 	bl	800196c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d90d      	bls.n	8002848 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f043 0210 	orr.w	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e007      	b.n	8002858 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d1d6      	bne.n	8002804 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	8000003f 	.word	0x8000003f

08002864 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800287a:	2b00      	cmp	r3, #0
 800287c:	d14b      	bne.n	8002916 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d021      	beq.n	80028dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f915 	bl	8001acc <LL_ADC_REG_IsTriggerSourceSWStart>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d032      	beq.n	800290e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d12b      	bne.n	800290e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d11f      	bne.n	800290e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	f043 0201 	orr.w	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
 80028da:	e018      	b.n	800290e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d111      	bne.n	800290e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d105      	bne.n	800290e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f7ff fbde 	bl	80020d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002914:	e00e      	b.n	8002934 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7ff fbe8 	bl	80020f8 <HAL_ADC_ErrorCallback>
}
 8002928:	e004      	b.n	8002934 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f7ff fbca 	bl	80020e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f043 0204 	orr.w	r2, r3, #4
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff fbba 	bl	80020f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60d3      	str	r3, [r2, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <__NVIC_GetPriorityGrouping+0x18>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0307 	and.w	r3, r3, #7
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db0b      	blt.n	8002a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4907      	ldr	r1, [pc, #28]	; (8002a28 <__NVIC_EnableIRQ+0x38>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2001      	movs	r0, #1
 8002a12:	fa00 f202 	lsl.w	r2, r0, r2
 8002a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000e100 	.word	0xe000e100

08002a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db0a      	blt.n	8002a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	490c      	ldr	r1, [pc, #48]	; (8002a78 <__NVIC_SetPriority+0x4c>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a54:	e00a      	b.n	8002a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4908      	ldr	r1, [pc, #32]	; (8002a7c <__NVIC_SetPriority+0x50>)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3b04      	subs	r3, #4
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	440b      	add	r3, r1
 8002a6a:	761a      	strb	r2, [r3, #24]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	; 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f1c3 0307 	rsb	r3, r3, #7
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	bf28      	it	cs
 8002a9e:	2304      	movcs	r3, #4
 8002aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d902      	bls.n	8002ab0 <NVIC_EncodePriority+0x30>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3b03      	subs	r3, #3
 8002aae:	e000      	b.n	8002ab2 <NVIC_EncodePriority+0x32>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	4313      	orrs	r3, r2
         );
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	; 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af8:	d301      	bcc.n	8002afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00f      	b.n	8002b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <SysTick_Config+0x40>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b06:	210f      	movs	r1, #15
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	f7ff ff8e 	bl	8002a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <SysTick_Config+0x40>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b16:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <SysTick_Config+0x40>)
 8002b18:	2207      	movs	r2, #7
 8002b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	e000e010 	.word	0xe000e010

08002b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff29 	bl	800298c <__NVIC_SetPriorityGrouping>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4603      	mov	r3, r0
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b54:	f7ff ff3e 	bl	80029d4 <__NVIC_GetPriorityGrouping>
 8002b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f7ff ff8e 	bl	8002a80 <NVIC_EncodePriority>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff5d 	bl	8002a2c <__NVIC_SetPriority>
}
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff31 	bl	80029f0 <__NVIC_EnableIRQ>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffa2 	bl	8002ae8 <SysTick_Config>
 8002ba4:	4603      	mov	r3, r0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e098      	b.n	8002cf4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <HAL_DMA_Init+0x150>)
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d80f      	bhi.n	8002bee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_DMA_Init+0x154>)
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a4b      	ldr	r2, [pc, #300]	; (8002d08 <HAL_DMA_Init+0x158>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	009a      	lsls	r2, r3, #2
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a48      	ldr	r2, [pc, #288]	; (8002d0c <HAL_DMA_Init+0x15c>)
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
 8002bec:	e00e      	b.n	8002c0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <HAL_DMA_Init+0x160>)
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a43      	ldr	r2, [pc, #268]	; (8002d08 <HAL_DMA_Init+0x158>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	009a      	lsls	r2, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a42      	ldr	r2, [pc, #264]	; (8002d14 <HAL_DMA_Init+0x164>)
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c66:	d039      	beq.n	8002cdc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	4a27      	ldr	r2, [pc, #156]	; (8002d0c <HAL_DMA_Init+0x15c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d11a      	bne.n	8002ca8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c72:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <HAL_DMA_Init+0x168>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	f003 031c 	and.w	r3, r3, #28
 8002c7e:	210f      	movs	r1, #15
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	4924      	ldr	r1, [pc, #144]	; (8002d18 <HAL_DMA_Init+0x168>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c8c:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_DMA_Init+0x168>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	f003 031c 	and.w	r3, r3, #28
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	491d      	ldr	r1, [pc, #116]	; (8002d18 <HAL_DMA_Init+0x168>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
 8002ca6:	e019      	b.n	8002cdc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <HAL_DMA_Init+0x16c>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	f003 031c 	and.w	r3, r3, #28
 8002cb4:	210f      	movs	r1, #15
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	4917      	ldr	r1, [pc, #92]	; (8002d1c <HAL_DMA_Init+0x16c>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_DMA_Init+0x16c>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f003 031c 	and.w	r3, r3, #28
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	4911      	ldr	r1, [pc, #68]	; (8002d1c <HAL_DMA_Init+0x16c>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40020407 	.word	0x40020407
 8002d04:	bffdfff8 	.word	0xbffdfff8
 8002d08:	cccccccd 	.word	0xcccccccd
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	bffdfbf8 	.word	0xbffdfbf8
 8002d14:	40020400 	.word	0x40020400
 8002d18:	400200a8 	.word	0x400200a8
 8002d1c:	400204a8 	.word	0x400204a8

08002d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_DMA_Start_IT+0x20>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e04b      	b.n	8002dd8 <HAL_DMA_Start_IT+0xb8>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d13a      	bne.n	8002dca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f8e0 	bl	8002f3e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 020e 	orr.w	r2, r2, #14
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e00f      	b.n	8002db8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0204 	bic.w	r2, r2, #4
 8002da6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 020a 	orr.w	r2, r2, #10
 8002db6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e005      	b.n	8002dd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f003 031c 	and.w	r3, r3, #28
 8002e00:	2204      	movs	r2, #4
 8002e02:	409a      	lsls	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d026      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x7a>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d021      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	f003 021c 	and.w	r2, r3, #28
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2104      	movs	r1, #4
 8002e42:	fa01 f202 	lsl.w	r2, r1, r2
 8002e46:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d071      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002e58:	e06c      	b.n	8002f34 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	f003 031c 	and.w	r3, r3, #28
 8002e62:	2202      	movs	r2, #2
 8002e64:	409a      	lsls	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d02e      	beq.n	8002ecc <HAL_DMA_IRQHandler+0xec>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d029      	beq.n	8002ecc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 020a 	bic.w	r2, r2, #10
 8002e94:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f003 021c 	and.w	r2, r3, #28
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2102      	movs	r1, #2
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d038      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002eca:	e033      	b.n	8002f34 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	f003 031c 	and.w	r3, r3, #28
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d02a      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x156>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d025      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 020e 	bic.w	r2, r2, #14
 8002ef8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f003 021c 	and.w	r2, r3, #28
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2101      	movs	r1, #1
 8002f08:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d004      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
}
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f50:	f003 021c 	and.w	r2, r3, #28
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d108      	bne.n	8002f82 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f80:	e007      	b.n	8002f92 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	60da      	str	r2, [r3, #12]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fae:	e154      	b.n	800325a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8146 	beq.w	8003254 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x38>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b12      	cmp	r3, #18
 8002fd6:	d123      	bne.n	8003020 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	220f      	movs	r2, #15
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	6939      	ldr	r1, [r7, #16]
 800301c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d00b      	beq.n	8003074 <HAL_GPIO_Init+0xd4>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d007      	beq.n	8003074 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003068:	2b11      	cmp	r3, #17
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b12      	cmp	r3, #18
 8003072:	d130      	bne.n	80030d6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030aa:	2201      	movs	r2, #1
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	f003 0201 	and.w	r2, r3, #1
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	2203      	movs	r2, #3
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80a0 	beq.w	8003254 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003114:	4b58      	ldr	r3, [pc, #352]	; (8003278 <HAL_GPIO_Init+0x2d8>)
 8003116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003118:	4a57      	ldr	r2, [pc, #348]	; (8003278 <HAL_GPIO_Init+0x2d8>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6613      	str	r3, [r2, #96]	; 0x60
 8003120:	4b55      	ldr	r3, [pc, #340]	; (8003278 <HAL_GPIO_Init+0x2d8>)
 8003122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800312c:	4a53      	ldr	r2, [pc, #332]	; (800327c <HAL_GPIO_Init+0x2dc>)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	3302      	adds	r3, #2
 8003134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	220f      	movs	r2, #15
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003156:	d019      	beq.n	800318c <HAL_GPIO_Init+0x1ec>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a49      	ldr	r2, [pc, #292]	; (8003280 <HAL_GPIO_Init+0x2e0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <HAL_GPIO_Init+0x1e8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a48      	ldr	r2, [pc, #288]	; (8003284 <HAL_GPIO_Init+0x2e4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00d      	beq.n	8003184 <HAL_GPIO_Init+0x1e4>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a47      	ldr	r2, [pc, #284]	; (8003288 <HAL_GPIO_Init+0x2e8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <HAL_GPIO_Init+0x1e0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a46      	ldr	r2, [pc, #280]	; (800328c <HAL_GPIO_Init+0x2ec>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_GPIO_Init+0x1dc>
 8003178:	2304      	movs	r3, #4
 800317a:	e008      	b.n	800318e <HAL_GPIO_Init+0x1ee>
 800317c:	2307      	movs	r3, #7
 800317e:	e006      	b.n	800318e <HAL_GPIO_Init+0x1ee>
 8003180:	2303      	movs	r3, #3
 8003182:	e004      	b.n	800318e <HAL_GPIO_Init+0x1ee>
 8003184:	2302      	movs	r3, #2
 8003186:	e002      	b.n	800318e <HAL_GPIO_Init+0x1ee>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_GPIO_Init+0x1ee>
 800318c:	2300      	movs	r3, #0
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	f002 0203 	and.w	r2, r2, #3
 8003194:	0092      	lsls	r2, r2, #2
 8003196:	4093      	lsls	r3, r2
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800319e:	4937      	ldr	r1, [pc, #220]	; (800327c <HAL_GPIO_Init+0x2dc>)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031ac:	4b38      	ldr	r3, [pc, #224]	; (8003290 <HAL_GPIO_Init+0x2f0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031d0:	4a2f      	ldr	r2, [pc, #188]	; (8003290 <HAL_GPIO_Init+0x2f0>)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80031d6:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_GPIO_Init+0x2f0>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031fa:	4a25      	ldr	r2, [pc, #148]	; (8003290 <HAL_GPIO_Init+0x2f0>)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003200:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_GPIO_Init+0x2f0>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43db      	mvns	r3, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003224:	4a1a      	ldr	r2, [pc, #104]	; (8003290 <HAL_GPIO_Init+0x2f0>)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800322a:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_GPIO_Init+0x2f0>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	43db      	mvns	r3, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800324e:	4a10      	ldr	r2, [pc, #64]	; (8003290 <HAL_GPIO_Init+0x2f0>)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	3301      	adds	r3, #1
 8003258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	f47f aea3 	bne.w	8002fb0 <HAL_GPIO_Init+0x10>
  }
}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40021000 	.word	0x40021000
 800327c:	40010000 	.word	0x40010000
 8003280:	48000400 	.word	0x48000400
 8003284:	48000800 	.word	0x48000800
 8003288:	48000c00 	.word	0x48000c00
 800328c:	48001000 	.word	0x48001000
 8003290:	40010400 	.word	0x40010400

08003294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	887b      	ldrh	r3, [r7, #2]
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	e001      	b.n	80032b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
 80032d0:	4613      	mov	r3, r2
 80032d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d4:	787b      	ldrb	r3, [r7, #1]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032e0:	e002      	b.n	80032e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <HAL_PWREx_GetVoltageRange+0x18>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40007000 	.word	0x40007000

08003310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331e:	d130      	bne.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003320:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332c:	d038      	beq.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800333c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800333e:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2232      	movs	r2, #50	; 0x32
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	0c9b      	lsrs	r3, r3, #18
 8003350:	3301      	adds	r3, #1
 8003352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003354:	e002      	b.n	800335c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3b01      	subs	r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800335c:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003368:	d102      	bne.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x60>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f2      	bne.n	8003356 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337c:	d110      	bne.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e00f      	b.n	80033a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338e:	d007      	beq.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003398:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800339a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800339e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40007000 	.word	0x40007000
 80033b4:	20000000 	.word	0x20000000
 80033b8:	431bde83 	.word	0x431bde83

080033bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e3e0      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ce:	4b95      	ldr	r3, [pc, #596]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d8:	4b92      	ldr	r3, [pc, #584]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80e1 	beq.w	80035b2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <HAL_RCC_OscConfig+0x4a>
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	f040 8088 	bne.w	800350e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b01      	cmp	r3, #1
 8003402:	f040 8084 	bne.w	800350e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003406:	4b87      	ldr	r3, [pc, #540]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_RCC_OscConfig+0x62>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e3b8      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1a      	ldr	r2, [r3, #32]
 8003422:	4b80      	ldr	r3, [pc, #512]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <HAL_RCC_OscConfig+0x7c>
 800342e:	4b7d      	ldr	r3, [pc, #500]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003436:	e005      	b.n	8003444 <HAL_RCC_OscConfig+0x88>
 8003438:	4b7a      	ldr	r3, [pc, #488]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800343a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003444:	4293      	cmp	r3, r2
 8003446:	d223      	bcs.n	8003490 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fd4b 	bl	8003ee8 <RCC_SetFlashLatencyFromMSIRange>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e399      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800345c:	4b71      	ldr	r3, [pc, #452]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a70      	ldr	r2, [pc, #448]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003462:	f043 0308 	orr.w	r3, r3, #8
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b6e      	ldr	r3, [pc, #440]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	496b      	ldr	r1, [pc, #428]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800347a:	4b6a      	ldr	r3, [pc, #424]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	4966      	ldr	r1, [pc, #408]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
 800348e:	e022      	b.n	80034d6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003490:	4b64      	ldr	r3, [pc, #400]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a63      	ldr	r2, [pc, #396]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003496:	f043 0308 	orr.w	r3, r3, #8
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b61      	ldr	r3, [pc, #388]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	495e      	ldr	r1, [pc, #376]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ae:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	4959      	ldr	r1, [pc, #356]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fd0e 	bl	8003ee8 <RCC_SetFlashLatencyFromMSIRange>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e35c      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034d6:	f000 fc43 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 80034da:	4602      	mov	r2, r0
 80034dc:	4b51      	ldr	r3, [pc, #324]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	4950      	ldr	r1, [pc, #320]	; (8003628 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	5ccb      	ldrb	r3, [r1, r3]
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	4a4e      	ldr	r2, [pc, #312]	; (800362c <HAL_RCC_OscConfig+0x270>)
 80034f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034f6:	4b4e      	ldr	r3, [pc, #312]	; (8003630 <HAL_RCC_OscConfig+0x274>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe f9ea 	bl	80018d4 <HAL_InitTick>
 8003500:	4603      	mov	r3, r0
 8003502:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d052      	beq.n	80035b0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	e340      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d032      	beq.n	800357c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003516:	4b43      	ldr	r3, [pc, #268]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a42      	ldr	r2, [pc, #264]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003522:	f7fe fa23 	bl	800196c <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800352a:	f7fe fa1f 	bl	800196c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e329      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003548:	4b36      	ldr	r3, [pc, #216]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a35      	ldr	r2, [pc, #212]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800354e:	f043 0308 	orr.w	r3, r3, #8
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b33      	ldr	r3, [pc, #204]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4930      	ldr	r1, [pc, #192]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003566:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	492b      	ldr	r1, [pc, #172]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
 800357a:	e01a      	b.n	80035b2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a28      	ldr	r2, [pc, #160]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003588:	f7fe f9f0 	bl	800196c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003590:	f7fe f9ec 	bl	800196c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e2f6      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x1d4>
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d073      	beq.n	80036a6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_OscConfig+0x214>
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b0c      	cmp	r3, #12
 80035c8:	d10e      	bne.n	80035e8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d10b      	bne.n	80035e8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d063      	beq.n	80036a4 <HAL_RCC_OscConfig+0x2e8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d15f      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e2d3      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_OscConfig+0x244>
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e025      	b.n	800364c <HAL_RCC_OscConfig+0x290>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d114      	bne.n	8003634 <HAL_RCC_OscConfig+0x278>
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a05      	ldr	r2, [pc, #20]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b03      	ldr	r3, [pc, #12]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a02      	ldr	r2, [pc, #8]	; (8003624 <HAL_RCC_OscConfig+0x268>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e013      	b.n	800364c <HAL_RCC_OscConfig+0x290>
 8003624:	40021000 	.word	0x40021000
 8003628:	080082a0 	.word	0x080082a0
 800362c:	20000000 	.word	0x20000000
 8003630:	20000004 	.word	0x20000004
 8003634:	4ba0      	ldr	r3, [pc, #640]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a9f      	ldr	r2, [pc, #636]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 800363a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b9d      	ldr	r3, [pc, #628]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a9c      	ldr	r2, [pc, #624]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe f98a 	bl	800196c <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x2b2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800365c:	f7fe f986 	bl	800196c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x2b2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e290      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366e:	4b92      	ldr	r3, [pc, #584]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x2a0>
 800367a:	e014      	b.n	80036a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe f976 	bl	800196c <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x2da>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003684:	f7fe f972 	bl	800196c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x2da>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e27c      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003696:	4b88      	ldr	r3, [pc, #544]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x2c8>
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x2ea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d060      	beq.n	8003774 <HAL_RCC_OscConfig+0x3b8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_OscConfig+0x308>
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d119      	bne.n	80036f2 <HAL_RCC_OscConfig+0x336>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d116      	bne.n	80036f2 <HAL_RCC_OscConfig+0x336>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c4:	4b7c      	ldr	r3, [pc, #496]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_OscConfig+0x320>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e259      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036dc:	4b76      	ldr	r3, [pc, #472]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	061b      	lsls	r3, r3, #24
 80036ea:	4973      	ldr	r1, [pc, #460]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f0:	e040      	b.n	8003774 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d023      	beq.n	8003742 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036fa:	4b6f      	ldr	r3, [pc, #444]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6e      	ldr	r2, [pc, #440]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fe f931 	bl	800196c <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x364>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370e:	f7fe f92d 	bl	800196c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x364>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e237      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003720:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x352>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	4b62      	ldr	r3, [pc, #392]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	061b      	lsls	r3, r3, #24
 800373a:	495f      	ldr	r1, [pc, #380]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
 8003740:	e018      	b.n	8003774 <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003742:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a5c      	ldr	r2, [pc, #368]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800374c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fe f90d 	bl	800196c <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x3ac>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003756:	f7fe f909 	bl	800196c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e213      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003768:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d03c      	beq.n	80037fa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01c      	beq.n	80037c2 <HAL_RCC_OscConfig+0x406>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003788:	4b4b      	ldr	r3, [pc, #300]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378e:	4a4a      	ldr	r2, [pc, #296]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fe f8e8 	bl	800196c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x3f6>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a0:	f7fe f8e4 	bl	800196c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e1ee      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037b2:	4b41      	ldr	r3, [pc, #260]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 80037b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ef      	beq.n	80037a0 <HAL_RCC_OscConfig+0x3e4>
 80037c0:	e01b      	b.n	80037fa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 80037c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c8:	4a3b      	ldr	r2, [pc, #236]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fe f8cb 	bl	800196c <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037da:	f7fe f8c7 	bl	800196c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e1d1      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ec:	4b32      	ldr	r3, [pc, #200]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 80037ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1ef      	bne.n	80037da <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80a6 	beq.w	8003954 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003808:	2300      	movs	r3, #0
 800380a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800380c:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10d      	bne.n	8003834 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003818:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 800381e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003822:	6593      	str	r3, [r2, #88]	; 0x58
 8003824:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003830:	2301      	movs	r3, #1
 8003832:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003834:	4b21      	ldr	r3, [pc, #132]	; (80038bc <HAL_RCC_OscConfig+0x500>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d118      	bne.n	8003872 <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003840:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <HAL_RCC_OscConfig+0x500>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_RCC_OscConfig+0x500>)
 8003846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384c:	f7fe f88e 	bl	800196c <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7fe f88a 	bl	800196c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e194      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <HAL_RCC_OscConfig+0x500>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x498>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d108      	bne.n	800388c <HAL_RCC_OscConfig+0x4d0>
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	4a0d      	ldr	r2, [pc, #52]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800388a:	e029      	b.n	80038e0 <HAL_RCC_OscConfig+0x524>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b05      	cmp	r3, #5
 8003892:	d115      	bne.n	80038c0 <HAL_RCC_OscConfig+0x504>
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 800389c:	f043 0304 	orr.w	r3, r3, #4
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a4:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	4a03      	ldr	r2, [pc, #12]	; (80038b8 <HAL_RCC_OscConfig+0x4fc>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038b4:	e014      	b.n	80038e0 <HAL_RCC_OscConfig+0x524>
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40007000 	.word	0x40007000
 80038c0:	4b94      	ldr	r3, [pc, #592]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	4a93      	ldr	r2, [pc, #588]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d0:	4b90      	ldr	r3, [pc, #576]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	4a8f      	ldr	r2, [pc, #572]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d016      	beq.n	8003916 <HAL_RCC_OscConfig+0x55a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e8:	f7fe f840 	bl	800196c <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_OscConfig+0x54a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f0:	f7fe f83c 	bl	800196c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x54a>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e144      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003906:	4b83      	ldr	r3, [pc, #524]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ed      	beq.n	80038f0 <HAL_RCC_OscConfig+0x534>
 8003914:	e015      	b.n	8003942 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003916:	f7fe f829 	bl	800196c <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800391c:	e00a      	b.n	8003934 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391e:	f7fe f825 	bl	800196c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f241 3288 	movw	r2, #5000	; 0x1388
 800392c:	4293      	cmp	r3, r2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e12d      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003934:	4b77      	ldr	r3, [pc, #476]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1ed      	bne.n	800391e <HAL_RCC_OscConfig+0x562>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003942:	7ffb      	ldrb	r3, [r7, #31]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d105      	bne.n	8003954 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003948:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	4a71      	ldr	r2, [pc, #452]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 800394e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003952:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d03c      	beq.n	80039da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01c      	beq.n	80039a2 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003968:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 800396a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800396e:	4a69      	ldr	r2, [pc, #420]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fd fff8 	bl	800196c <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003980:	f7fd fff4 	bl	800196c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0fe      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003992:	4b60      	ldr	r3, [pc, #384]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003994:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ef      	beq.n	8003980 <HAL_RCC_OscConfig+0x5c4>
 80039a0:	e01b      	b.n	80039da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039a2:	4b5c      	ldr	r3, [pc, #368]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 80039a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a8:	4a5a      	ldr	r2, [pc, #360]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b2:	f7fd ffdb 	bl	800196c <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ba:	f7fd ffd7 	bl	800196c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e0e1      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039cc:	4b51      	ldr	r3, [pc, #324]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 80039ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ef      	bne.n	80039ba <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80d5 	beq.w	8003b8e <HAL_RCC_OscConfig+0x7d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b0c      	cmp	r3, #12
 80039e8:	f000 808d 	beq.w	8003b06 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d15a      	bne.n	8003aaa <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f4:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a46      	ldr	r2, [pc, #280]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 80039fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fd ffb4 	bl	800196c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fd ffb0 	bl	800196c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e0ba      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a1a:	4b3e      	ldr	r3, [pc, #248]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a26:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <HAL_RCC_OscConfig+0x75c>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a36:	3a01      	subs	r2, #1
 8003a38:	0112      	lsls	r2, r2, #4
 8003a3a:	4311      	orrs	r1, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a40:	0212      	lsls	r2, r2, #8
 8003a42:	4311      	orrs	r1, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a48:	0852      	lsrs	r2, r2, #1
 8003a4a:	3a01      	subs	r2, #1
 8003a4c:	0552      	lsls	r2, r2, #21
 8003a4e:	4311      	orrs	r1, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a54:	0852      	lsrs	r2, r2, #1
 8003a56:	3a01      	subs	r2, #1
 8003a58:	0652      	lsls	r2, r2, #25
 8003a5a:	4311      	orrs	r1, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a60:	06d2      	lsls	r2, r2, #27
 8003a62:	430a      	orrs	r2, r1
 8003a64:	492b      	ldr	r1, [pc, #172]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6a:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a74:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a76:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a80:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fd ff73 	bl	800196c <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8a:	f7fd ff6f 	bl	800196c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e079      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x6ce>
 8003aa8:	e071      	b.n	8003b8e <HAL_RCC_OscConfig+0x7d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ab6:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003ac8:	f023 0303 	bic.w	r3, r3, #3
 8003acc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4a10      	ldr	r2, [pc, #64]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003ad4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003adc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fd ff45 	bl	800196c <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fd ff41 	bl	800196c <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e04b      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_OscConfig+0x758>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x72a>
 8003b04:	e043      	b.n	8003b8e <HAL_RCC_OscConfig+0x7d2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d106      	bne.n	8003b1c <HAL_RCC_OscConfig+0x760>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e03e      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	019d808c 	.word	0x019d808c
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003b1c:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <HAL_RCC_OscConfig+0x7dc>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0203 	and.w	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d12c      	bne.n	8003b8a <HAL_RCC_OscConfig+0x7ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d123      	bne.n	8003b8a <HAL_RCC_OscConfig+0x7ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4c:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d11b      	bne.n	8003b8a <HAL_RCC_OscConfig+0x7ce>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d113      	bne.n	8003b8a <HAL_RCC_OscConfig+0x7ce>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_OscConfig+0x7ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	3b01      	subs	r3, #1
 8003b84:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x7d2>
        {
          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_RCC_OscConfig+0x7d4>
        }
      }
    }
  }
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000

08003b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0c8      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b66      	ldr	r3, [pc, #408]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d910      	bls.n	8003be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b63      	ldr	r3, [pc, #396]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 0207 	bic.w	r2, r3, #7
 8003bc6:	4961      	ldr	r1, [pc, #388]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bce:	4b5f      	ldr	r3, [pc, #380]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0b0      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d04c      	beq.n	8003c86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d121      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e09e      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d107      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c0c:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d115      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e092      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c24:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e086      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c34:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e07e      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c44:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f023 0203 	bic.w	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	493f      	ldr	r1, [pc, #252]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c56:	f7fd fe89 	bl	800196c <HAL_GetTick>
 8003c5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5e:	f7fd fe85 	bl	800196c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e066      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 020c 	and.w	r2, r3, #12
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d1eb      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c92:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	492c      	ldr	r1, [pc, #176]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d210      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 0207 	bic.w	r2, r3, #7
 8003cba:	4924      	ldr	r1, [pc, #144]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <HAL_RCC_ClockConfig+0x1b0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e036      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4918      	ldr	r1, [pc, #96]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4910      	ldr	r1, [pc, #64]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d12:	f000 f825 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d16:	4602      	mov	r2, r0
 8003d18:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <HAL_RCC_ClockConfig+0x1b4>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	490c      	ldr	r1, [pc, #48]	; (8003d54 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	5ccb      	ldrb	r3, [r1, r3]
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd fdcc 	bl	80018d4 <HAL_InitTick>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d40:	7afb      	ldrb	r3, [r7, #11]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40022000 	.word	0x40022000
 8003d50:	40021000 	.word	0x40021000
 8003d54:	080082a0 	.word	0x080082a0
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	20000004 	.word	0x20000004

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b089      	sub	sp, #36	; 0x24
 8003d64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6e:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d78:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x34>
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d121      	bne.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d11e      	bne.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d94:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003da0:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	e005      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003db0:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dbc:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10d      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d102      	bne.n	8003dde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	e004      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003de4:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003de6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d134      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dee:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0xa6>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d003      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0xac>
 8003e04:	e005      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e08:	617b      	str	r3, [r7, #20]
      break;
 8003e0a:	e005      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e0e:	617b      	str	r3, [r7, #20]
      break;
 8003e10:	e002      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	617b      	str	r3, [r7, #20]
      break;
 8003e16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e18:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	3301      	adds	r3, #1
 8003e24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	fb03 f202 	mul.w	r2, r3, r2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	0e5b      	lsrs	r3, r3, #25
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e58:	69bb      	ldr	r3, [r7, #24]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3724      	adds	r7, #36	; 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	080082b8 	.word	0x080082b8
 8003e70:	00f42400 	.word	0x00f42400
 8003e74:	007a1200 	.word	0x007a1200

08003e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000000 	.word	0x20000000

08003e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e94:	f7ff fff0 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4904      	ldr	r1, [pc, #16]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	080082b0 	.word	0x080082b0

08003ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ec0:	f7ff ffda 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0adb      	lsrs	r3, r3, #11
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4904      	ldr	r1, [pc, #16]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	080082b0 	.word	0x080082b0

08003ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ef4:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f00:	f7ff f9f8 	bl	80032f4 <HAL_PWREx_GetVoltageRange>
 8003f04:	6178      	str	r0, [r7, #20]
 8003f06:	e014      	b.n	8003f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f12:	6593      	str	r3, [r2, #88]	; 0x58
 8003f14:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f20:	f7ff f9e8 	bl	80032f4 <HAL_PWREx_GetVoltageRange>
 8003f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f38:	d10b      	bne.n	8003f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d919      	bls.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2ba0      	cmp	r3, #160	; 0xa0
 8003f44:	d902      	bls.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f46:	2302      	movs	r3, #2
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e013      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	e010      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b80      	cmp	r3, #128	; 0x80
 8003f56:	d902      	bls.n	8003f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f58:	2303      	movs	r3, #3
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	e00a      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b80      	cmp	r3, #128	; 0x80
 8003f62:	d102      	bne.n	8003f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f64:	2302      	movs	r3, #2
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	e004      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b70      	cmp	r3, #112	; 0x70
 8003f6e:	d101      	bne.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f70:	2301      	movs	r3, #1
 8003f72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 0207 	bic.w	r2, r3, #7
 8003f7c:	4909      	ldr	r1, [pc, #36]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f84:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d001      	beq.n	8003f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40022000 	.word	0x40022000

08003fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d031      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fcc:	d01a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003fce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fd2:	d814      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fdc:	d10f      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003fde:	4b5d      	ldr	r3, [pc, #372]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a5c      	ldr	r2, [pc, #368]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fea:	e00c      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fa22 	bl	800443c <RCCEx_PLLSAI1_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ffc:	e003      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	74fb      	strb	r3, [r7, #19]
      break;
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10b      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800400c:	4b51      	ldr	r3, [pc, #324]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	494e      	ldr	r1, [pc, #312]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004022:	e001      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 809e 	beq.w	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800403a:	4b46      	ldr	r3, [pc, #280]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004050:	4b40      	ldr	r3, [pc, #256]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	4a3f      	ldr	r2, [pc, #252]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405a:	6593      	str	r3, [r2, #88]	; 0x58
 800405c:	4b3d      	ldr	r3, [pc, #244]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004068:	2301      	movs	r3, #1
 800406a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800406c:	4b3a      	ldr	r3, [pc, #232]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a39      	ldr	r2, [pc, #228]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004076:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004078:	f7fd fc78 	bl	800196c <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800407e:	e009      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004080:	f7fd fc74 	bl	800196c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d902      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	74fb      	strb	r3, [r7, #19]
        break;
 8004092:	e005      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004094:	4b30      	ldr	r3, [pc, #192]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ef      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d15a      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040a6:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01e      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d019      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040c2:	4b24      	ldr	r3, [pc, #144]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ee:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d016      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fd fc34 	bl	800196c <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004106:	e00b      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004108:	f7fd fc30 	bl	800196c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d902      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	74fb      	strb	r3, [r7, #19]
            break;
 800411e:	e006      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ec      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004134:	4b07      	ldr	r3, [pc, #28]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004142:	4904      	ldr	r1, [pc, #16]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800414a:	e009      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	74bb      	strb	r3, [r7, #18]
 8004150:	e006      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004160:	7c7b      	ldrb	r3, [r7, #17]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d105      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004166:	4b8d      	ldr	r3, [pc, #564]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	4a8c      	ldr	r2, [pc, #560]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800416c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004170:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800417e:	4b87      	ldr	r3, [pc, #540]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	f023 0203 	bic.w	r2, r3, #3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	4983      	ldr	r1, [pc, #524]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a0:	4b7e      	ldr	r3, [pc, #504]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f023 020c 	bic.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	497b      	ldr	r1, [pc, #492]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c2:	4b76      	ldr	r3, [pc, #472]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	4972      	ldr	r1, [pc, #456]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041e4:	4b6d      	ldr	r3, [pc, #436]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	496a      	ldr	r1, [pc, #424]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004206:	4b65      	ldr	r3, [pc, #404]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	4961      	ldr	r1, [pc, #388]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004228:	4b5c      	ldr	r3, [pc, #368]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4959      	ldr	r1, [pc, #356]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800424a:	4b54      	ldr	r3, [pc, #336]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	4950      	ldr	r1, [pc, #320]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800426c:	4b4b      	ldr	r3, [pc, #300]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	4948      	ldr	r1, [pc, #288]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800428e:	4b43      	ldr	r3, [pc, #268]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	493f      	ldr	r1, [pc, #252]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d028      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b0:	4b3a      	ldr	r3, [pc, #232]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	4937      	ldr	r1, [pc, #220]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ce:	d106      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d0:	4b32      	ldr	r3, [pc, #200]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a31      	ldr	r2, [pc, #196]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042da:	60d3      	str	r3, [r2, #12]
 80042dc:	e011      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042e6:	d10c      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	2101      	movs	r1, #1
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f8a4 	bl	800443c <RCCEx_PLLSAI1_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d028      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800430e:	4b23      	ldr	r3, [pc, #140]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431c:	491f      	ldr	r1, [pc, #124]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800432c:	d106      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800432e:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	4a1a      	ldr	r2, [pc, #104]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004338:	60d3      	str	r3, [r2, #12]
 800433a:	e011      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004340:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004344:	d10c      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	2101      	movs	r1, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f000 f875 	bl	800443c <RCCEx_PLLSAI1_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d02b      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437a:	4908      	ldr	r1, [pc, #32]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800438a:	d109      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a02      	ldr	r2, [pc, #8]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004396:	60d3      	str	r3, [r2, #12]
 8004398:	e014      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3304      	adds	r3, #4
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f843 	bl	800443c <RCCEx_PLLSAI1_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01c      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	4916      	ldr	r1, [pc, #88]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ee:	d10c      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	2102      	movs	r1, #2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f820 	bl	800443c <RCCEx_PLLSAI1_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004406:	7cfb      	ldrb	r3, [r7, #19]
 8004408:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004416:	4b08      	ldr	r3, [pc, #32]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	4904      	ldr	r1, [pc, #16]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800442c:	7cbb      	ldrb	r3, [r7, #18]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000

0800443c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800444a:	4b74      	ldr	r3, [pc, #464]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d018      	beq.n	8004488 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004456:	4b71      	ldr	r3, [pc, #452]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0203 	and.w	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d10d      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
       ||
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800446e:	4b6b      	ldr	r3, [pc, #428]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
       ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d047      	beq.n	8004512 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
 8004486:	e044      	b.n	8004512 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d018      	beq.n	80044c2 <RCCEx_PLLSAI1_Config+0x86>
 8004490:	2b03      	cmp	r3, #3
 8004492:	d825      	bhi.n	80044e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004494:	2b01      	cmp	r3, #1
 8004496:	d002      	beq.n	800449e <RCCEx_PLLSAI1_Config+0x62>
 8004498:	2b02      	cmp	r3, #2
 800449a:	d009      	beq.n	80044b0 <RCCEx_PLLSAI1_Config+0x74>
 800449c:	e020      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800449e:	4b5f      	ldr	r3, [pc, #380]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d11d      	bne.n	80044e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ae:	e01a      	b.n	80044e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044b0:	4b5a      	ldr	r3, [pc, #360]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d116      	bne.n	80044ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c0:	e013      	b.n	80044ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044c2:	4b56      	ldr	r3, [pc, #344]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10f      	bne.n	80044ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ce:	4b53      	ldr	r3, [pc, #332]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044de:	e006      	b.n	80044ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      break;
 80044e4:	e004      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e6:	bf00      	nop
 80044e8:	e002      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ea:	bf00      	nop
 80044ec:	e000      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10d      	bne.n	8004512 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044f6:	4b49      	ldr	r3, [pc, #292]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6819      	ldr	r1, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	3b01      	subs	r3, #1
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	430b      	orrs	r3, r1
 800450c:	4943      	ldr	r1, [pc, #268]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800450e:	4313      	orrs	r3, r2
 8004510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d17c      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004518:	4b40      	ldr	r3, [pc, #256]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a3f      	ldr	r2, [pc, #252]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800451e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004524:	f7fd fa22 	bl	800196c <HAL_GetTick>
 8004528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800452a:	e009      	b.n	8004540 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800452c:	f7fd fa1e 	bl	800196c <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d902      	bls.n	8004540 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	73fb      	strb	r3, [r7, #15]
        break;
 800453e:	e005      	b.n	800454c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004540:	4b36      	ldr	r3, [pc, #216]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ef      	bne.n	800452c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d15f      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d110      	bne.n	800457a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004558:	4b30      	ldr	r3, [pc, #192]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004560:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6892      	ldr	r2, [r2, #8]
 8004568:	0211      	lsls	r1, r2, #8
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68d2      	ldr	r2, [r2, #12]
 800456e:	06d2      	lsls	r2, r2, #27
 8004570:	430a      	orrs	r2, r1
 8004572:	492a      	ldr	r1, [pc, #168]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004574:	4313      	orrs	r3, r2
 8004576:	610b      	str	r3, [r1, #16]
 8004578:	e027      	b.n	80045ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d112      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004580:	4b26      	ldr	r3, [pc, #152]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004588:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6892      	ldr	r2, [r2, #8]
 8004590:	0211      	lsls	r1, r2, #8
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6912      	ldr	r2, [r2, #16]
 8004596:	0852      	lsrs	r2, r2, #1
 8004598:	3a01      	subs	r2, #1
 800459a:	0552      	lsls	r2, r2, #21
 800459c:	430a      	orrs	r2, r1
 800459e:	491f      	ldr	r1, [pc, #124]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	610b      	str	r3, [r1, #16]
 80045a4:	e011      	b.n	80045ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6892      	ldr	r2, [r2, #8]
 80045b6:	0211      	lsls	r1, r2, #8
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6952      	ldr	r2, [r2, #20]
 80045bc:	0852      	lsrs	r2, r2, #1
 80045be:	3a01      	subs	r2, #1
 80045c0:	0652      	lsls	r2, r2, #25
 80045c2:	430a      	orrs	r2, r1
 80045c4:	4915      	ldr	r1, [pc, #84]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045ca:	4b14      	ldr	r3, [pc, #80]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a13      	ldr	r2, [pc, #76]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d6:	f7fd f9c9 	bl	800196c <HAL_GetTick>
 80045da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045dc:	e009      	b.n	80045f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045de:	f7fd f9c5 	bl	800196c <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d902      	bls.n	80045f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	73fb      	strb	r3, [r7, #15]
          break;
 80045f0:	e005      	b.n	80045fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045f2:	4b0a      	ldr	r3, [pc, #40]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0ef      	beq.n	80045de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	4903      	ldr	r1, [pc, #12]	; (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800460e:	4313      	orrs	r3, r2
 8004610:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004612:	7bfb      	ldrb	r3, [r7, #15]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000

08004620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e040      	b.n	80046b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fd f8ae 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2224      	movs	r2, #36	; 0x24
 800464c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8c0 	bl	80047e4 <UART_SetConfig>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e022      	b.n	80046b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fbea 	bl	8004e50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800468a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800469a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fc71 	bl	8004f94 <UART_CheckIdleState>
 80046b2:	4603      	mov	r3, r0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08a      	sub	sp, #40	; 0x28
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	f040 8081 	bne.w	80047d8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_UART_Transmit+0x26>
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e079      	b.n	80047da <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_UART_Transmit+0x38>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e072      	b.n	80047da <HAL_UART_Transmit+0x11e>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2221      	movs	r2, #33	; 0x21
 8004706:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004708:	f7fd f930 	bl	800196c <HAL_GetTick>
 800470c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	88fa      	ldrh	r2, [r7, #6]
 8004712:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	88fa      	ldrh	r2, [r7, #6]
 800471a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004726:	d108      	bne.n	800473a <HAL_UART_Transmit+0x7e>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e003      	b.n	8004742 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004742:	e02d      	b.n	80047a0 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2200      	movs	r2, #0
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fc65 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e03d      	b.n	80047da <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	881a      	ldrh	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004770:	b292      	uxth	r2, r2
 8004772:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	3302      	adds	r3, #2
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	e008      	b.n	800478e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	781a      	ldrb	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	b292      	uxth	r2, r2
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	3301      	adds	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1cb      	bne.n	8004744 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2200      	movs	r2, #0
 80047b4:	2140      	movs	r1, #64	; 0x40
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fc31 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e009      	b.n	80047da <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e000      	b.n	80047da <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80047d8:	2302      	movs	r3, #2
  }
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3720      	adds	r7, #32
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e8:	b09e      	sub	sp, #120	; 0x78
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	431a      	orrs	r2, r3
 8004806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	431a      	orrs	r2, r3
 800480c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	4313      	orrs	r3, r2
 8004812:	677b      	str	r3, [r7, #116]	; 0x74
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	49aa      	ldr	r1, [pc, #680]	; (8004ac4 <UART_SetConfig+0x2e0>)
 800481c:	4019      	ands	r1, r3
 800481e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004824:	430b      	orrs	r3, r1
 8004826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004834:	68d9      	ldr	r1, [r3, #12]
 8004836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	ea40 0301 	orr.w	r3, r0, r1
 800483e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b9f      	ldr	r3, [pc, #636]	; (8004ac8 <UART_SetConfig+0x2e4>)
 800484c:	429a      	cmp	r2, r3
 800484e:	d004      	beq.n	800485a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004852:	6a1a      	ldr	r2, [r3, #32]
 8004854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004856:	4313      	orrs	r3, r2
 8004858:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800485a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486a:	430b      	orrs	r3, r1
 800486c:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800486e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b96      	ldr	r3, [pc, #600]	; (8004acc <UART_SetConfig+0x2e8>)
 8004874:	429a      	cmp	r2, r3
 8004876:	d125      	bne.n	80048c4 <UART_SetConfig+0xe0>
 8004878:	4b95      	ldr	r3, [pc, #596]	; (8004ad0 <UART_SetConfig+0x2ec>)
 800487a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	2b03      	cmp	r3, #3
 8004884:	d81a      	bhi.n	80048bc <UART_SetConfig+0xd8>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0xa8>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	0800489d 	.word	0x0800489d
 8004890:	080048ad 	.word	0x080048ad
 8004894:	080048a5 	.word	0x080048a5
 8004898:	080048b5 	.word	0x080048b5
 800489c:	2301      	movs	r3, #1
 800489e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80048a2:	e0ab      	b.n	80049fc <UART_SetConfig+0x218>
 80048a4:	2302      	movs	r3, #2
 80048a6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80048aa:	e0a7      	b.n	80049fc <UART_SetConfig+0x218>
 80048ac:	2304      	movs	r3, #4
 80048ae:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80048b2:	e0a3      	b.n	80049fc <UART_SetConfig+0x218>
 80048b4:	2308      	movs	r3, #8
 80048b6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80048ba:	e09f      	b.n	80049fc <UART_SetConfig+0x218>
 80048bc:	2310      	movs	r3, #16
 80048be:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80048c2:	e09b      	b.n	80049fc <UART_SetConfig+0x218>
 80048c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b82      	ldr	r3, [pc, #520]	; (8004ad4 <UART_SetConfig+0x2f0>)
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d138      	bne.n	8004940 <UART_SetConfig+0x15c>
 80048ce:	4b80      	ldr	r3, [pc, #512]	; (8004ad0 <UART_SetConfig+0x2ec>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b0c      	cmp	r3, #12
 80048da:	d82d      	bhi.n	8004938 <UART_SetConfig+0x154>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0x100>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004919 	.word	0x08004919
 80048e8:	08004939 	.word	0x08004939
 80048ec:	08004939 	.word	0x08004939
 80048f0:	08004939 	.word	0x08004939
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004939 	.word	0x08004939
 80048fc:	08004939 	.word	0x08004939
 8004900:	08004939 	.word	0x08004939
 8004904:	08004921 	.word	0x08004921
 8004908:	08004939 	.word	0x08004939
 800490c:	08004939 	.word	0x08004939
 8004910:	08004939 	.word	0x08004939
 8004914:	08004931 	.word	0x08004931
 8004918:	2300      	movs	r3, #0
 800491a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800491e:	e06d      	b.n	80049fc <UART_SetConfig+0x218>
 8004920:	2302      	movs	r3, #2
 8004922:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004926:	e069      	b.n	80049fc <UART_SetConfig+0x218>
 8004928:	2304      	movs	r3, #4
 800492a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800492e:	e065      	b.n	80049fc <UART_SetConfig+0x218>
 8004930:	2308      	movs	r3, #8
 8004932:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004936:	e061      	b.n	80049fc <UART_SetConfig+0x218>
 8004938:	2310      	movs	r3, #16
 800493a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800493e:	e05d      	b.n	80049fc <UART_SetConfig+0x218>
 8004940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b64      	ldr	r3, [pc, #400]	; (8004ad8 <UART_SetConfig+0x2f4>)
 8004946:	429a      	cmp	r2, r3
 8004948:	d125      	bne.n	8004996 <UART_SetConfig+0x1b2>
 800494a:	4b61      	ldr	r3, [pc, #388]	; (8004ad0 <UART_SetConfig+0x2ec>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004954:	2b30      	cmp	r3, #48	; 0x30
 8004956:	d016      	beq.n	8004986 <UART_SetConfig+0x1a2>
 8004958:	2b30      	cmp	r3, #48	; 0x30
 800495a:	d818      	bhi.n	800498e <UART_SetConfig+0x1aa>
 800495c:	2b20      	cmp	r3, #32
 800495e:	d00a      	beq.n	8004976 <UART_SetConfig+0x192>
 8004960:	2b20      	cmp	r3, #32
 8004962:	d814      	bhi.n	800498e <UART_SetConfig+0x1aa>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <UART_SetConfig+0x18a>
 8004968:	2b10      	cmp	r3, #16
 800496a:	d008      	beq.n	800497e <UART_SetConfig+0x19a>
 800496c:	e00f      	b.n	800498e <UART_SetConfig+0x1aa>
 800496e:	2300      	movs	r3, #0
 8004970:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004974:	e042      	b.n	80049fc <UART_SetConfig+0x218>
 8004976:	2302      	movs	r3, #2
 8004978:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800497c:	e03e      	b.n	80049fc <UART_SetConfig+0x218>
 800497e:	2304      	movs	r3, #4
 8004980:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004984:	e03a      	b.n	80049fc <UART_SetConfig+0x218>
 8004986:	2308      	movs	r3, #8
 8004988:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800498c:	e036      	b.n	80049fc <UART_SetConfig+0x218>
 800498e:	2310      	movs	r3, #16
 8004990:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8004994:	e032      	b.n	80049fc <UART_SetConfig+0x218>
 8004996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b4b      	ldr	r3, [pc, #300]	; (8004ac8 <UART_SetConfig+0x2e4>)
 800499c:	429a      	cmp	r2, r3
 800499e:	d12a      	bne.n	80049f6 <UART_SetConfig+0x212>
 80049a0:	4b4b      	ldr	r3, [pc, #300]	; (8004ad0 <UART_SetConfig+0x2ec>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ae:	d01a      	beq.n	80049e6 <UART_SetConfig+0x202>
 80049b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b4:	d81b      	bhi.n	80049ee <UART_SetConfig+0x20a>
 80049b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ba:	d00c      	beq.n	80049d6 <UART_SetConfig+0x1f2>
 80049bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c0:	d815      	bhi.n	80049ee <UART_SetConfig+0x20a>
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <UART_SetConfig+0x1ea>
 80049c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ca:	d008      	beq.n	80049de <UART_SetConfig+0x1fa>
 80049cc:	e00f      	b.n	80049ee <UART_SetConfig+0x20a>
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80049d4:	e012      	b.n	80049fc <UART_SetConfig+0x218>
 80049d6:	2302      	movs	r3, #2
 80049d8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80049dc:	e00e      	b.n	80049fc <UART_SetConfig+0x218>
 80049de:	2304      	movs	r3, #4
 80049e0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80049e4:	e00a      	b.n	80049fc <UART_SetConfig+0x218>
 80049e6:	2308      	movs	r3, #8
 80049e8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80049ec:	e006      	b.n	80049fc <UART_SetConfig+0x218>
 80049ee:	2310      	movs	r3, #16
 80049f0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80049f4:	e002      	b.n	80049fc <UART_SetConfig+0x218>
 80049f6:	2310      	movs	r3, #16
 80049f8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b31      	ldr	r3, [pc, #196]	; (8004ac8 <UART_SetConfig+0x2e4>)
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f040 8119 	bne.w	8004c3a <UART_SetConfig+0x456>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a08:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d824      	bhi.n	8004a5a <UART_SetConfig+0x276>
 8004a10:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <UART_SetConfig+0x234>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a3d 	.word	0x08004a3d
 8004a1c:	08004a5b 	.word	0x08004a5b
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a5b 	.word	0x08004a5b
 8004a28:	08004a4b 	.word	0x08004a4b
 8004a2c:	08004a5b 	.word	0x08004a5b
 8004a30:	08004a5b 	.word	0x08004a5b
 8004a34:	08004a5b 	.word	0x08004a5b
 8004a38:	08004a53 	.word	0x08004a53
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004a3c:	f7ff fa28 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8004a40:	6678      	str	r0, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a42:	e00e      	b.n	8004a62 <UART_SetConfig+0x27e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004a44:	4b25      	ldr	r3, [pc, #148]	; (8004adc <UART_SetConfig+0x2f8>)
 8004a46:	667b      	str	r3, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a48:	e00b      	b.n	8004a62 <UART_SetConfig+0x27e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004a4a:	f7ff f989 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8004a4e:	6678      	str	r0, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a50:	e007      	b.n	8004a62 <UART_SetConfig+0x27e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a56:	667b      	str	r3, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a58:	e003      	b.n	8004a62 <UART_SetConfig+0x27e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 8004a60:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 81e6 	beq.w	8004e36 <UART_SetConfig+0x652>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	441a      	add	r2, r3
 8004a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d305      	bcc.n	8004a86 <UART_SetConfig+0x2a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d903      	bls.n	8004a8e <UART_SetConfig+0x2aa>
      {
        ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8004a8c:	e1d3      	b.n	8004e36 <UART_SetConfig+0x652>
      }
      else
      {
        switch (clocksource)
 8004a8e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	f200 80bc 	bhi.w	8004c10 <UART_SetConfig+0x42c>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <UART_SetConfig+0x2bc>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ae1 	.word	0x08004ae1
 8004aa4:	08004c11 	.word	0x08004c11
 8004aa8:	08004b3f 	.word	0x08004b3f
 8004aac:	08004c11 	.word	0x08004c11
 8004ab0:	08004b7f 	.word	0x08004b7f
 8004ab4:	08004c11 	.word	0x08004c11
 8004ab8:	08004c11 	.word	0x08004c11
 8004abc:	08004c11 	.word	0x08004c11
 8004ac0:	08004bd9 	.word	0x08004bd9
 8004ac4:	efff69f3 	.word	0xefff69f3
 8004ac8:	40008000 	.word	0x40008000
 8004acc:	40013800 	.word	0x40013800
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40004400 	.word	0x40004400
 8004ad8:	40004800 	.word	0x40004800
 8004adc:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ae0:	f7ff f9d6 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	4698      	mov	r8, r3
 8004aea:	4691      	mov	r9, r2
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8004af8:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8004afc:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8004b00:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b02:	6849      	ldr	r1, [r1, #4]
 8004b04:	0849      	lsrs	r1, r1, #1
 8004b06:	2000      	movs	r0, #0
 8004b08:	6539      	str	r1, [r7, #80]	; 0x50
 8004b0a:	6578      	str	r0, [r7, #84]	; 0x54
 8004b0c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004b10:	4621      	mov	r1, r4
 8004b12:	1851      	adds	r1, r2, r1
 8004b14:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b16:	4629      	mov	r1, r5
 8004b18:	eb43 0101 	adc.w	r1, r3, r1
 8004b1c:	64f9      	str	r1, [r7, #76]	; 0x4c
 8004b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	643b      	str	r3, [r7, #64]	; 0x40
 8004b26:	647a      	str	r2, [r7, #68]	; 0x44
 8004b28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b2c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b30:	f7fc f83a 	bl	8000ba8 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4613      	mov	r3, r2
 8004b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8004b3c:	e06c      	b.n	8004c18 <UART_SetConfig+0x434>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	2200      	movs	r2, #0
 8004b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b4a:	4bb0      	ldr	r3, [pc, #704]	; (8004e0c <UART_SetConfig+0x628>)
 8004b4c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004b50:	4602      	mov	r2, r0
 8004b52:	18d3      	adds	r3, r2, r3
 8004b54:	633b      	str	r3, [r7, #48]	; 0x30
 8004b56:	460b      	mov	r3, r1
 8004b58:	f143 0300 	adc.w	r3, r3, #0
 8004b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b6c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b70:	f7fc f81a 	bl	8000ba8 <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4613      	mov	r3, r2
 8004b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8004b7c:	e04c      	b.n	8004c18 <UART_SetConfig+0x434>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b7e:	f7ff f8ef 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2200      	movs	r2, #0
 8004b86:	461c      	mov	r4, r3
 8004b88:	4615      	mov	r5, r2
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	022b      	lsls	r3, r5, #8
 8004b94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b98:	0222      	lsls	r2, r4, #8
 8004b9a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b9c:	6849      	ldr	r1, [r1, #4]
 8004b9e:	0849      	lsrs	r1, r1, #1
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	6239      	str	r1, [r7, #32]
 8004ba4:	6278      	str	r0, [r7, #36]	; 0x24
 8004ba6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004baa:	4621      	mov	r1, r4
 8004bac:	1851      	adds	r1, r2, r1
 8004bae:	61b9      	str	r1, [r7, #24]
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	eb43 0101 	adc.w	r1, r3, r1
 8004bb6:	61f9      	str	r1, [r7, #28]
 8004bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	617a      	str	r2, [r7, #20]
 8004bc2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004bca:	f7fb ffed 	bl	8000ba8 <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8004bd6:	e01f      	b.n	8004c18 <UART_SetConfig+0x434>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	2200      	movs	r2, #0
 8004be0:	469a      	mov	sl, r3
 8004be2:	4693      	mov	fp, r2
 8004be4:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	f14b 0300 	adc.w	r3, fp, #0
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c02:	f7fb ffd1 	bl	8000ba8 <__aeabi_uldivmod>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c0e:	e003      	b.n	8004c18 <UART_SetConfig+0x434>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 8004c16:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1e:	d308      	bcc.n	8004c32 <UART_SetConfig+0x44e>
 8004c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c26:	d204      	bcs.n	8004c32 <UART_SetConfig+0x44e>
        {
          huart->Instance->BRR = usartdiv;
 8004c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c2e:	60da      	str	r2, [r3, #12]
 8004c30:	e101      	b.n	8004e36 <UART_SetConfig+0x652>
        }
        else
        {
          ret = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8004c38:	e0fd      	b.n	8004e36 <UART_SetConfig+0x652>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c42:	f040 8086 	bne.w	8004d52 <UART_SetConfig+0x56e>
  {
    switch (clocksource)
 8004c46:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d85b      	bhi.n	8004d06 <UART_SetConfig+0x522>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <UART_SetConfig+0x470>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004c97 	.word	0x08004c97
 8004c5c:	08004cb5 	.word	0x08004cb5
 8004c60:	08004d07 	.word	0x08004d07
 8004c64:	08004cd1 	.word	0x08004cd1
 8004c68:	08004d07 	.word	0x08004d07
 8004c6c:	08004d07 	.word	0x08004d07
 8004c70:	08004d07 	.word	0x08004d07
 8004c74:	08004cef 	.word	0x08004cef
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004c78:	f7ff f90a 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	005a      	lsls	r2, r3, #1
 8004c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	441a      	add	r2, r3
 8004c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c94:	e03b      	b.n	8004d0e <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004c96:	f7ff f911 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	005a      	lsls	r2, r3, #1
 8004c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	085b      	lsrs	r3, r3, #1
 8004ca4:	441a      	add	r2, r3
 8004ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cb2:	e02c      	b.n	8004d0e <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004cbe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004cc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cc4:	6852      	ldr	r2, [r2, #4]
 8004cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cce:	e01e      	b.n	8004d0e <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004cd0:	f7ff f846 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	005a      	lsls	r2, r3, #1
 8004cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	085b      	lsrs	r3, r3, #1
 8004cde:	441a      	add	r2, r3
 8004ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cec:	e00f      	b.n	8004d0e <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d04:	e003      	b.n	8004d0e <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 8004d0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d10:	2b0f      	cmp	r3, #15
 8004d12:	d91a      	bls.n	8004d4a <UART_SetConfig+0x566>
 8004d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1a:	d216      	bcs.n	8004d4a <UART_SetConfig+0x566>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f023 030f 	bic.w	r3, r3, #15
 8004d24:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      huart->Instance->BRR = brrtemp;
 8004d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8004d46:	60da      	str	r2, [r3, #12]
 8004d48:	e075      	b.n	8004e36 <UART_SetConfig+0x652>
    }
    else
    {
      ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8004d50:	e071      	b.n	8004e36 <UART_SetConfig+0x652>
    }
  }
  else
  {
    switch (clocksource)
 8004d52:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d85a      	bhi.n	8004e10 <UART_SetConfig+0x62c>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x57c>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004da1 	.word	0x08004da1
 8004d68:	08004dbd 	.word	0x08004dbd
 8004d6c:	08004e11 	.word	0x08004e11
 8004d70:	08004dd9 	.word	0x08004dd9
 8004d74:	08004e11 	.word	0x08004e11
 8004d78:	08004e11 	.word	0x08004e11
 8004d7c:	08004e11 	.word	0x08004e11
 8004d80:	08004df5 	.word	0x08004df5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d84:	f7ff f884 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	441a      	add	r2, r3
 8004d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d9e:	e03b      	b.n	8004e18 <UART_SetConfig+0x634>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004da0:	f7ff f88c 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	441a      	add	r2, r3
 8004dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dba:	e02d      	b.n	8004e18 <UART_SetConfig+0x634>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004dc6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004dca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dcc:	6852      	ldr	r2, [r2, #4]
 8004dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dd6:	e01f      	b.n	8004e18 <UART_SetConfig+0x634>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004dd8:	f7fe ffc2 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	441a      	add	r2, r3
 8004de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004df2:	e011      	b.n	8004e18 <UART_SetConfig+0x634>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e0a:	e005      	b.n	8004e18 <UART_SetConfig+0x634>
 8004e0c:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 8004e16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1a:	2b0f      	cmp	r3, #15
 8004e1c:	d908      	bls.n	8004e30 <UART_SetConfig+0x64c>
 8004e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e24:	d204      	bcs.n	8004e30 <UART_SetConfig+0x64c>
    {
      huart->Instance->BRR = usartdiv;
 8004e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	e002      	b.n	8004e36 <UART_SetConfig+0x652>
    }
    else
    {
      ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e38:	2200      	movs	r2, #0
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e3e:	2200      	movs	r2, #0
 8004e40:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e42:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3778      	adds	r7, #120	; 0x78
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01a      	beq.n	8004f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4e:	d10a      	bne.n	8004f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]
  }
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fa2:	f7fc fce3 	bl	800196c <HAL_GetTick>
 8004fa6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d10e      	bne.n	8004fd4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f82a 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e020      	b.n	8005016 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d10e      	bne.n	8005000 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f814 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e00a      	b.n	8005016 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502e:	e02a      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d026      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005038:	f7fc fc98 	bl	800196c <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	429a      	cmp	r2, r3
 8005046:	d302      	bcc.n	800504e <UART_WaitOnFlagUntilTimeout+0x30>
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d11b      	bne.n	8005086 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800505c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e00f      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4013      	ands	r3, r2
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	bf0c      	ite	eq
 8005096:	2301      	moveq	r3, #1
 8005098:	2300      	movne	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d0c5      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <IIC_Start>:
//-----------------------------------			   
/**********************************************
//IIC Start
**********************************************/
void IIC_Start(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
	OLED_SCLK_Set();
 80050b4:	2201      	movs	r2, #1
 80050b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ba:	480b      	ldr	r0, [pc, #44]	; (80050e8 <IIC_Start+0x38>)
 80050bc:	f7fe f902 	bl	80032c4 <HAL_GPIO_WritePin>
	OLED_SDIN_Set();
 80050c0:	2201      	movs	r2, #1
 80050c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050c6:	4808      	ldr	r0, [pc, #32]	; (80050e8 <IIC_Start+0x38>)
 80050c8:	f7fe f8fc 	bl	80032c4 <HAL_GPIO_WritePin>
	OLED_SDIN_Clr();
 80050cc:	2200      	movs	r2, #0
 80050ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050d2:	4805      	ldr	r0, [pc, #20]	; (80050e8 <IIC_Start+0x38>)
 80050d4:	f7fe f8f6 	bl	80032c4 <HAL_GPIO_WritePin>
	OLED_SCLK_Clr();
 80050d8:	2200      	movs	r2, #0
 80050da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050de:	4802      	ldr	r0, [pc, #8]	; (80050e8 <IIC_Start+0x38>)
 80050e0:	f7fe f8f0 	bl	80032c4 <HAL_GPIO_WritePin>
}
 80050e4:	bf00      	nop
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	48000400 	.word	0x48000400

080050ec <IIC_Stop>:

/**********************************************
//IIC Stop
**********************************************/
void IIC_Stop(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
	OLED_SCLK_Set();
 80050f0:	2201      	movs	r2, #1
 80050f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050f6:	4808      	ldr	r0, [pc, #32]	; (8005118 <IIC_Stop+0x2c>)
 80050f8:	f7fe f8e4 	bl	80032c4 <HAL_GPIO_WritePin>
	OLED_SDIN_Clr();
 80050fc:	2200      	movs	r2, #0
 80050fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005102:	4805      	ldr	r0, [pc, #20]	; (8005118 <IIC_Stop+0x2c>)
 8005104:	f7fe f8de 	bl	80032c4 <HAL_GPIO_WritePin>
	OLED_SDIN_Set();
 8005108:	2201      	movs	r2, #1
 800510a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800510e:	4802      	ldr	r0, [pc, #8]	; (8005118 <IIC_Stop+0x2c>)
 8005110:	f7fe f8d8 	bl	80032c4 <HAL_GPIO_WritePin>
}
 8005114:	bf00      	nop
 8005116:	bd80      	pop	{r7, pc}
 8005118:	48000400 	.word	0x48000400

0800511c <IIC_Wait_Ack>:

void IIC_Wait_Ack(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
	OLED_SCLK_Set();
 8005120:	2201      	movs	r2, #1
 8005122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005126:	4805      	ldr	r0, [pc, #20]	; (800513c <IIC_Wait_Ack+0x20>)
 8005128:	f7fe f8cc 	bl	80032c4 <HAL_GPIO_WritePin>
	OLED_SCLK_Clr();
 800512c:	2200      	movs	r2, #0
 800512e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005132:	4802      	ldr	r0, [pc, #8]	; (800513c <IIC_Wait_Ack+0x20>)
 8005134:	f7fe f8c6 	bl	80032c4 <HAL_GPIO_WritePin>
}
 8005138:	bf00      	nop
 800513a:	bd80      	pop	{r7, pc}
 800513c:	48000400 	.word	0x48000400

08005140 <Write_IIC_Byte>:
/**********************************************
// IIC Write byte
**********************************************/

void Write_IIC_Byte(unsigned char IIC_Byte)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char m,da;
	da=IIC_Byte;
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	73bb      	strb	r3, [r7, #14]
	OLED_SCLK_Clr();
 800514e:	2200      	movs	r2, #0
 8005150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005154:	481a      	ldr	r0, [pc, #104]	; (80051c0 <Write_IIC_Byte+0x80>)
 8005156:	f7fe f8b5 	bl	80032c4 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)		
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]
 800515e:	e027      	b.n	80051b0 <Write_IIC_Byte+0x70>
	{
		m=da;
 8005160:	7bbb      	ldrb	r3, [r7, #14]
 8005162:	737b      	strb	r3, [r7, #13]
		m=m&0x80;
 8005164:	7b7b      	ldrb	r3, [r7, #13]
 8005166:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800516a:	737b      	strb	r3, [r7, #13]
		if(m==0x80)
 800516c:	7b7b      	ldrb	r3, [r7, #13]
 800516e:	2b80      	cmp	r3, #128	; 0x80
 8005170:	d106      	bne.n	8005180 <Write_IIC_Byte+0x40>
		{
			OLED_SDIN_Set();
 8005172:	2201      	movs	r2, #1
 8005174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005178:	4811      	ldr	r0, [pc, #68]	; (80051c0 <Write_IIC_Byte+0x80>)
 800517a:	f7fe f8a3 	bl	80032c4 <HAL_GPIO_WritePin>
 800517e:	e005      	b.n	800518c <Write_IIC_Byte+0x4c>
		}
		else 
			OLED_SDIN_Clr();
 8005180:	2200      	movs	r2, #0
 8005182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005186:	480e      	ldr	r0, [pc, #56]	; (80051c0 <Write_IIC_Byte+0x80>)
 8005188:	f7fe f89c 	bl	80032c4 <HAL_GPIO_WritePin>
		da=da<<1;
 800518c:	7bbb      	ldrb	r3, [r7, #14]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	73bb      	strb	r3, [r7, #14]
		OLED_SCLK_Set();
 8005192:	2201      	movs	r2, #1
 8005194:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005198:	4809      	ldr	r0, [pc, #36]	; (80051c0 <Write_IIC_Byte+0x80>)
 800519a:	f7fe f893 	bl	80032c4 <HAL_GPIO_WritePin>
		OLED_SCLK_Clr();
 800519e:	2200      	movs	r2, #0
 80051a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051a4:	4806      	ldr	r0, [pc, #24]	; (80051c0 <Write_IIC_Byte+0x80>)
 80051a6:	f7fe f88d 	bl	80032c4 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)		
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	3301      	adds	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	2b07      	cmp	r3, #7
 80051b4:	d9d4      	bls.n	8005160 <Write_IIC_Byte+0x20>
	}
}
 80051b6:	bf00      	nop
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	48000400 	.word	0x48000400

080051c4 <Write_IIC_Command>:
/**********************************************
// IIC Write Command
**********************************************/
void Write_IIC_Command(unsigned char IIC_Command)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	71fb      	strb	r3, [r7, #7]
	IIC_Start();
 80051ce:	f7ff ff6f 	bl	80050b0 <IIC_Start>
	Write_IIC_Byte(0x78);            //Slave address,SA0=0
 80051d2:	2078      	movs	r0, #120	; 0x78
 80051d4:	f7ff ffb4 	bl	8005140 <Write_IIC_Byte>
	IIC_Wait_Ack();	
 80051d8:	f7ff ffa0 	bl	800511c <IIC_Wait_Ack>
	Write_IIC_Byte(0x00);			//write command
 80051dc:	2000      	movs	r0, #0
 80051de:	f7ff ffaf 	bl	8005140 <Write_IIC_Byte>
	IIC_Wait_Ack();	
 80051e2:	f7ff ff9b 	bl	800511c <IIC_Wait_Ack>
	Write_IIC_Byte(IIC_Command); 
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff ffa9 	bl	8005140 <Write_IIC_Byte>
	IIC_Wait_Ack();	
 80051ee:	f7ff ff95 	bl	800511c <IIC_Wait_Ack>
	IIC_Stop();
 80051f2:	f7ff ff7b 	bl	80050ec <IIC_Stop>
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <Write_IIC_Data>:
/**********************************************
// IIC Write Data
**********************************************/
void Write_IIC_Data(unsigned char IIC_Data)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	4603      	mov	r3, r0
 8005206:	71fb      	strb	r3, [r7, #7]
	IIC_Start();
 8005208:	f7ff ff52 	bl	80050b0 <IIC_Start>
	Write_IIC_Byte(0x78);			//D/C#=0; R/W#=0
 800520c:	2078      	movs	r0, #120	; 0x78
 800520e:	f7ff ff97 	bl	8005140 <Write_IIC_Byte>
	IIC_Wait_Ack();	
 8005212:	f7ff ff83 	bl	800511c <IIC_Wait_Ack>
	Write_IIC_Byte(0x40);			//write data
 8005216:	2040      	movs	r0, #64	; 0x40
 8005218:	f7ff ff92 	bl	8005140 <Write_IIC_Byte>
	IIC_Wait_Ack();	
 800521c:	f7ff ff7e 	bl	800511c <IIC_Wait_Ack>
	Write_IIC_Byte(IIC_Data);
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff ff8c 	bl	8005140 <Write_IIC_Byte>
	IIC_Wait_Ack();	
 8005228:	f7ff ff78 	bl	800511c <IIC_Wait_Ack>
	IIC_Stop();
 800522c:	f7ff ff5e 	bl	80050ec <IIC_Stop>
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <OLED_WR_Byte>:
void OLED_WR_Byte(unsigned dat,unsigned cmd)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
	if(cmd)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <OLED_WR_Byte+0x1c>
	{
		Write_IIC_Data(dat);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff ffd6 	bl	80051fe <Write_IIC_Data>
	}
	else 
	{
		Write_IIC_Command(dat);	
	}
}
 8005252:	e004      	b.n	800525e <OLED_WR_Byte+0x26>
		Write_IIC_Command(dat);	
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ffb3 	bl	80051c4 <Write_IIC_Command>
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <OLED_Set_Pos>:
	}
}

//��������
void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 	
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	4603      	mov	r3, r0
 800526e:	460a      	mov	r2, r1
 8005270:	71fb      	strb	r3, [r7, #7]
 8005272:	4613      	mov	r3, r2
 8005274:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8005276:	79bb      	ldrb	r3, [r7, #6]
 8005278:	33b0      	adds	r3, #176	; 0xb0
 800527a:	2100      	movs	r1, #0
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff ffdb 	bl	8005238 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f043 0310 	orr.w	r3, r3, #16
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff ffd1 	bl	8005238 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f),OLED_CMD); 
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff ffca 	bl	8005238 <OLED_WR_Byte>
}   	  
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//ע�⣺��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80052b2:	2300      	movs	r3, #0
 80052b4:	71fb      	strb	r3, [r7, #7]
 80052b6:	e01e      	b.n	80052f6 <OLED_Clear+0x4a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	33b0      	adds	r3, #176	; 0xb0
 80052bc:	2100      	movs	r1, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff ffba 	bl	8005238 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 80052c4:	2100      	movs	r1, #0
 80052c6:	2000      	movs	r0, #0
 80052c8:	f7ff ffb6 	bl	8005238 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 80052cc:	2100      	movs	r1, #0
 80052ce:	2010      	movs	r0, #16
 80052d0:	f7ff ffb2 	bl	8005238 <OLED_WR_Byte>
		for(n=0;n<128;n++)
 80052d4:	2300      	movs	r3, #0
 80052d6:	71bb      	strb	r3, [r7, #6]
 80052d8:	e006      	b.n	80052e8 <OLED_Clear+0x3c>
			OLED_WR_Byte(0,OLED_DATA); 
 80052da:	2101      	movs	r1, #1
 80052dc:	2000      	movs	r0, #0
 80052de:	f7ff ffab 	bl	8005238 <OLED_WR_Byte>
		for(n=0;n<128;n++)
 80052e2:	79bb      	ldrb	r3, [r7, #6]
 80052e4:	3301      	adds	r3, #1
 80052e6:	71bb      	strb	r3, [r7, #6]
 80052e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	daf4      	bge.n	80052da <OLED_Clear+0x2e>
	for(i=0;i<8;i++)  
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	3301      	adds	r3, #1
 80052f4:	71fb      	strb	r3, [r7, #7]
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	2b07      	cmp	r3, #7
 80052fa:	d9dd      	bls.n	80052b8 <OLED_Clear+0xc>
	} //������ʾ
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <OLED_ShowChar>:
//x:0~127
//y:0~63
//				 
//size:ѡ������ 16/12 
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size)
{      	
 8005308:	b590      	push	{r4, r7, lr}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	4604      	mov	r4, r0
 8005310:	4608      	mov	r0, r1
 8005312:	4611      	mov	r1, r2
 8005314:	461a      	mov	r2, r3
 8005316:	4623      	mov	r3, r4
 8005318:	71fb      	strb	r3, [r7, #7]
 800531a:	4603      	mov	r3, r0
 800531c:	71bb      	strb	r3, [r7, #6]
 800531e:	460b      	mov	r3, r1
 8005320:	717b      	strb	r3, [r7, #5]
 8005322:	4613      	mov	r3, r2
 8005324:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 8005326:	2300      	movs	r3, #0
 8005328:	73bb      	strb	r3, [r7, #14]
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
	c=chr-' ';//�õ�ƫ�ƺ��ֵ			
 800532e:	797b      	ldrb	r3, [r7, #5]
 8005330:	3b20      	subs	r3, #32
 8005332:	73bb      	strb	r3, [r7, #14]
	if(x>Max_Column-1){x=0;y=y+2;}
 8005334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005338:	2b00      	cmp	r3, #0
 800533a:	da04      	bge.n	8005346 <OLED_ShowChar+0x3e>
 800533c:	2300      	movs	r3, #0
 800533e:	71fb      	strb	r3, [r7, #7]
 8005340:	79bb      	ldrb	r3, [r7, #6]
 8005342:	3302      	adds	r3, #2
 8005344:	71bb      	strb	r3, [r7, #6]
	if(Char_Size ==16)
 8005346:	793b      	ldrb	r3, [r7, #4]
 8005348:	2b10      	cmp	r3, #16
 800534a:	d135      	bne.n	80053b8 <OLED_ShowChar+0xb0>
	{
		OLED_Set_Pos(x,y);	
 800534c:	79ba      	ldrb	r2, [r7, #6]
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff ff87 	bl	8005266 <OLED_Set_Pos>
		for(i = 0; i < 8; i++){
 8005358:	2300      	movs	r3, #0
 800535a:	73fb      	strb	r3, [r7, #15]
 800535c:	e00c      	b.n	8005378 <OLED_ShowChar+0x70>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 800535e:	7bbb      	ldrb	r3, [r7, #14]
 8005360:	011a      	lsls	r2, r3, #4
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	4413      	add	r3, r2
 8005366:	4a25      	ldr	r2, [pc, #148]	; (80053fc <OLED_ShowChar+0xf4>)
 8005368:	5cd3      	ldrb	r3, [r2, r3]
 800536a:	2101      	movs	r1, #1
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff ff63 	bl	8005238 <OLED_WR_Byte>
		for(i = 0; i < 8; i++){
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	3301      	adds	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b07      	cmp	r3, #7
 800537c:	d9ef      	bls.n	800535e <OLED_ShowChar+0x56>
		}
		OLED_Set_Pos(x,y+1);
 800537e:	79bb      	ldrb	r3, [r7, #6]
 8005380:	3301      	adds	r3, #1
 8005382:	b2da      	uxtb	r2, r3
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff ff6c 	bl	8005266 <OLED_Set_Pos>
		for(i=0;i<8;i++)
 800538e:	2300      	movs	r3, #0
 8005390:	73fb      	strb	r3, [r7, #15]
 8005392:	e00d      	b.n	80053b0 <OLED_ShowChar+0xa8>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8005394:	7bbb      	ldrb	r3, [r7, #14]
 8005396:	011a      	lsls	r2, r3, #4
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	4413      	add	r3, r2
 800539c:	3308      	adds	r3, #8
 800539e:	4a17      	ldr	r2, [pc, #92]	; (80053fc <OLED_ShowChar+0xf4>)
 80053a0:	5cd3      	ldrb	r3, [r2, r3]
 80053a2:	2101      	movs	r1, #1
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff47 	bl	8005238 <OLED_WR_Byte>
		for(i=0;i<8;i++)
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	3301      	adds	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b07      	cmp	r3, #7
 80053b4:	d9ee      	bls.n	8005394 <OLED_ShowChar+0x8c>
	{	
		OLED_Set_Pos(x,y);
		for(i=0;i<6;i++)
			OLED_WR_Byte(F6x8[c][i],OLED_DATA);
	}
}
 80053b6:	e01c      	b.n	80053f2 <OLED_ShowChar+0xea>
		OLED_Set_Pos(x,y);
 80053b8:	79ba      	ldrb	r2, [r7, #6]
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff ff51 	bl	8005266 <OLED_Set_Pos>
		for(i=0;i<6;i++)
 80053c4:	2300      	movs	r3, #0
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	e010      	b.n	80053ec <OLED_ShowChar+0xe4>
			OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 80053ca:	7bba      	ldrb	r2, [r7, #14]
 80053cc:	7bf9      	ldrb	r1, [r7, #15]
 80053ce:	480c      	ldr	r0, [pc, #48]	; (8005400 <OLED_ShowChar+0xf8>)
 80053d0:	4613      	mov	r3, r2
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	4413      	add	r3, r2
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	4403      	add	r3, r0
 80053da:	440b      	add	r3, r1
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2101      	movs	r1, #1
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff ff29 	bl	8005238 <OLED_WR_Byte>
		for(i=0;i<6;i++)
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	3301      	adds	r3, #1
 80053ea:	73fb      	strb	r3, [r7, #15]
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2b05      	cmp	r3, #5
 80053f0:	d9eb      	bls.n	80053ca <OLED_ShowChar+0xc2>
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd90      	pop	{r4, r7, pc}
 80053fa:	bf00      	nop
 80053fc:	08008510 	.word	0x08008510
 8005400:	080082e8 	.word	0x080082e8

08005404 <OLED_ShowString>:
		OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
	}
} 
//��ʾһ���ַ��Ŵ�
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	603a      	str	r2, [r7, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
 8005412:	460b      	mov	r3, r1
 8005414:	71bb      	strb	r3, [r7, #6]
 8005416:	4613      	mov	r3, r2
 8005418:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 800541a:	2300      	movs	r3, #0
 800541c:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 800541e:	e016      	b.n	800544e <OLED_ShowString+0x4a>
	{		
		OLED_ShowChar(x,y,chr[j],Char_Size);
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	4413      	add	r3, r2
 8005426:	781a      	ldrb	r2, [r3, #0]
 8005428:	797b      	ldrb	r3, [r7, #5]
 800542a:	79b9      	ldrb	r1, [r7, #6]
 800542c:	79f8      	ldrb	r0, [r7, #7]
 800542e:	f7ff ff6b 	bl	8005308 <OLED_ShowChar>
		x+=8;
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	3308      	adds	r3, #8
 8005436:	71fb      	strb	r3, [r7, #7]
		if(x>120)
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2b78      	cmp	r3, #120	; 0x78
 800543c:	d904      	bls.n	8005448 <OLED_ShowString+0x44>
		{
			x=0;y+=2;
 800543e:	2300      	movs	r3, #0
 8005440:	71fb      	strb	r3, [r7, #7]
 8005442:	79bb      	ldrb	r3, [r7, #6]
 8005444:	3302      	adds	r3, #2
 8005446:	71bb      	strb	r3, [r7, #6]
		}
		j++;
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	3301      	adds	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	4413      	add	r3, r2
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e2      	bne.n	8005420 <OLED_ShowString+0x1c>
	}
}
 800545a:	bf00      	nop
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <OLED_Init>:
	}
} 

//��ʼ��OLED			    
void OLED_Init(void)
{ 	
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8005468:	20c8      	movs	r0, #200	; 0xc8
 800546a:	f7fc fa8b 	bl	8001984 <HAL_Delay>
	OLED_WR_Byte(0xAE,OLED_CMD);//�ر���ʾ
 800546e:	2100      	movs	r1, #0
 8005470:	20ae      	movs	r0, #174	; 0xae
 8005472:	f7ff fee1 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD);//---set low column address
 8005476:	2100      	movs	r1, #0
 8005478:	2040      	movs	r0, #64	; 0x40
 800547a:	f7ff fedd 	bl	8005238 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//---set high column address
 800547e:	2100      	movs	r1, #0
 8005480:	20b0      	movs	r0, #176	; 0xb0
 8005482:	f7ff fed9 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0xC8,OLED_CMD);//-not offset
 8005486:	2100      	movs	r1, #0
 8005488:	20c8      	movs	r0, #200	; 0xc8
 800548a:	f7ff fed5 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0x81,OLED_CMD);//���öԱȶ�
 800548e:	2100      	movs	r1, #0
 8005490:	2081      	movs	r0, #129	; 0x81
 8005492:	f7ff fed1 	bl	8005238 <OLED_WR_Byte>
	OLED_WR_Byte(0xff,OLED_CMD);
 8005496:	2100      	movs	r1, #0
 8005498:	20ff      	movs	r0, #255	; 0xff
 800549a:	f7ff fecd 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0xa1,OLED_CMD);//���ض�������
 800549e:	2100      	movs	r1, #0
 80054a0:	20a1      	movs	r0, #161	; 0xa1
 80054a2:	f7ff fec9 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0xa6,OLED_CMD);//
 80054a6:	2100      	movs	r1, #0
 80054a8:	20a6      	movs	r0, #166	; 0xa6
 80054aa:	f7ff fec5 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0xa8,OLED_CMD);//��������·��
 80054ae:	2100      	movs	r1, #0
 80054b0:	20a8      	movs	r0, #168	; 0xa8
 80054b2:	f7ff fec1 	bl	8005238 <OLED_WR_Byte>
	OLED_WR_Byte(0x1f,OLED_CMD);
 80054b6:	2100      	movs	r1, #0
 80054b8:	201f      	movs	r0, #31
 80054ba:	f7ff febd 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0xd3,OLED_CMD);
 80054be:	2100      	movs	r1, #0
 80054c0:	20d3      	movs	r0, #211	; 0xd3
 80054c2:	f7ff feb9 	bl	8005238 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);
 80054c6:	2100      	movs	r1, #0
 80054c8:	2000      	movs	r0, #0
 80054ca:	f7ff feb5 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0xd5,OLED_CMD);
 80054ce:	2100      	movs	r1, #0
 80054d0:	20d5      	movs	r0, #213	; 0xd5
 80054d2:	f7ff feb1 	bl	8005238 <OLED_WR_Byte>
	OLED_WR_Byte(0xf0,OLED_CMD);
 80054d6:	2100      	movs	r1, #0
 80054d8:	20f0      	movs	r0, #240	; 0xf0
 80054da:	f7ff fead 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0xd9,OLED_CMD);
 80054de:	2100      	movs	r1, #0
 80054e0:	20d9      	movs	r0, #217	; 0xd9
 80054e2:	f7ff fea9 	bl	8005238 <OLED_WR_Byte>
	OLED_WR_Byte(0x22,OLED_CMD);
 80054e6:	2100      	movs	r1, #0
 80054e8:	2022      	movs	r0, #34	; 0x22
 80054ea:	f7ff fea5 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0xda,OLED_CMD);
 80054ee:	2100      	movs	r1, #0
 80054f0:	20da      	movs	r0, #218	; 0xda
 80054f2:	f7ff fea1 	bl	8005238 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);
 80054f6:	2100      	movs	r1, #0
 80054f8:	2002      	movs	r0, #2
 80054fa:	f7ff fe9d 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0xdb,OLED_CMD);
 80054fe:	2100      	movs	r1, #0
 8005500:	20db      	movs	r0, #219	; 0xdb
 8005502:	f7ff fe99 	bl	8005238 <OLED_WR_Byte>
	OLED_WR_Byte(0x49,OLED_CMD);
 8005506:	2100      	movs	r1, #0
 8005508:	2049      	movs	r0, #73	; 0x49
 800550a:	f7ff fe95 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0x8d,OLED_CMD);
 800550e:	2100      	movs	r1, #0
 8005510:	208d      	movs	r0, #141	; 0x8d
 8005512:	f7ff fe91 	bl	8005238 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);
 8005516:	2100      	movs	r1, #0
 8005518:	2014      	movs	r0, #20
 800551a:	f7ff fe8d 	bl	8005238 <OLED_WR_Byte>

	OLED_WR_Byte(0xaf,OLED_CMD);
 800551e:	2100      	movs	r1, #0
 8005520:	20af      	movs	r0, #175	; 0xaf
 8005522:	f7ff fe89 	bl	8005238 <OLED_WR_Byte>
	OLED_Clear();
 8005526:	f7ff fec1 	bl	80052ac <OLED_Clear>
}  
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}

0800552e <__cvt>:
 800552e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005532:	ec55 4b10 	vmov	r4, r5, d0
 8005536:	2d00      	cmp	r5, #0
 8005538:	460e      	mov	r6, r1
 800553a:	4619      	mov	r1, r3
 800553c:	462b      	mov	r3, r5
 800553e:	bfbb      	ittet	lt
 8005540:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005544:	461d      	movlt	r5, r3
 8005546:	2300      	movge	r3, #0
 8005548:	232d      	movlt	r3, #45	; 0x2d
 800554a:	700b      	strb	r3, [r1, #0]
 800554c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800554e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005552:	4691      	mov	r9, r2
 8005554:	f023 0820 	bic.w	r8, r3, #32
 8005558:	bfbc      	itt	lt
 800555a:	4622      	movlt	r2, r4
 800555c:	4614      	movlt	r4, r2
 800555e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005562:	d005      	beq.n	8005570 <__cvt+0x42>
 8005564:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005568:	d100      	bne.n	800556c <__cvt+0x3e>
 800556a:	3601      	adds	r6, #1
 800556c:	2102      	movs	r1, #2
 800556e:	e000      	b.n	8005572 <__cvt+0x44>
 8005570:	2103      	movs	r1, #3
 8005572:	ab03      	add	r3, sp, #12
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	ab02      	add	r3, sp, #8
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	ec45 4b10 	vmov	d0, r4, r5
 800557e:	4653      	mov	r3, sl
 8005580:	4632      	mov	r2, r6
 8005582:	f000 fe8d 	bl	80062a0 <_dtoa_r>
 8005586:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800558a:	4607      	mov	r7, r0
 800558c:	d102      	bne.n	8005594 <__cvt+0x66>
 800558e:	f019 0f01 	tst.w	r9, #1
 8005592:	d022      	beq.n	80055da <__cvt+0xac>
 8005594:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005598:	eb07 0906 	add.w	r9, r7, r6
 800559c:	d110      	bne.n	80055c0 <__cvt+0x92>
 800559e:	783b      	ldrb	r3, [r7, #0]
 80055a0:	2b30      	cmp	r3, #48	; 0x30
 80055a2:	d10a      	bne.n	80055ba <__cvt+0x8c>
 80055a4:	2200      	movs	r2, #0
 80055a6:	2300      	movs	r3, #0
 80055a8:	4620      	mov	r0, r4
 80055aa:	4629      	mov	r1, r5
 80055ac:	f7fb fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80055b0:	b918      	cbnz	r0, 80055ba <__cvt+0x8c>
 80055b2:	f1c6 0601 	rsb	r6, r6, #1
 80055b6:	f8ca 6000 	str.w	r6, [sl]
 80055ba:	f8da 3000 	ldr.w	r3, [sl]
 80055be:	4499      	add	r9, r3
 80055c0:	2200      	movs	r2, #0
 80055c2:	2300      	movs	r3, #0
 80055c4:	4620      	mov	r0, r4
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7fb fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80055cc:	b108      	cbz	r0, 80055d2 <__cvt+0xa4>
 80055ce:	f8cd 900c 	str.w	r9, [sp, #12]
 80055d2:	2230      	movs	r2, #48	; 0x30
 80055d4:	9b03      	ldr	r3, [sp, #12]
 80055d6:	454b      	cmp	r3, r9
 80055d8:	d307      	bcc.n	80055ea <__cvt+0xbc>
 80055da:	9b03      	ldr	r3, [sp, #12]
 80055dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055de:	1bdb      	subs	r3, r3, r7
 80055e0:	4638      	mov	r0, r7
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	b004      	add	sp, #16
 80055e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ea:	1c59      	adds	r1, r3, #1
 80055ec:	9103      	str	r1, [sp, #12]
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	e7f0      	b.n	80055d4 <__cvt+0xa6>

080055f2 <__exponent>:
 80055f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055f4:	4603      	mov	r3, r0
 80055f6:	2900      	cmp	r1, #0
 80055f8:	bfb8      	it	lt
 80055fa:	4249      	neglt	r1, r1
 80055fc:	f803 2b02 	strb.w	r2, [r3], #2
 8005600:	bfb4      	ite	lt
 8005602:	222d      	movlt	r2, #45	; 0x2d
 8005604:	222b      	movge	r2, #43	; 0x2b
 8005606:	2909      	cmp	r1, #9
 8005608:	7042      	strb	r2, [r0, #1]
 800560a:	dd2a      	ble.n	8005662 <__exponent+0x70>
 800560c:	f10d 0207 	add.w	r2, sp, #7
 8005610:	4617      	mov	r7, r2
 8005612:	260a      	movs	r6, #10
 8005614:	4694      	mov	ip, r2
 8005616:	fb91 f5f6 	sdiv	r5, r1, r6
 800561a:	fb06 1415 	mls	r4, r6, r5, r1
 800561e:	3430      	adds	r4, #48	; 0x30
 8005620:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005624:	460c      	mov	r4, r1
 8005626:	2c63      	cmp	r4, #99	; 0x63
 8005628:	f102 32ff 	add.w	r2, r2, #4294967295
 800562c:	4629      	mov	r1, r5
 800562e:	dcf1      	bgt.n	8005614 <__exponent+0x22>
 8005630:	3130      	adds	r1, #48	; 0x30
 8005632:	f1ac 0402 	sub.w	r4, ip, #2
 8005636:	f802 1c01 	strb.w	r1, [r2, #-1]
 800563a:	1c41      	adds	r1, r0, #1
 800563c:	4622      	mov	r2, r4
 800563e:	42ba      	cmp	r2, r7
 8005640:	d30a      	bcc.n	8005658 <__exponent+0x66>
 8005642:	f10d 0209 	add.w	r2, sp, #9
 8005646:	eba2 020c 	sub.w	r2, r2, ip
 800564a:	42bc      	cmp	r4, r7
 800564c:	bf88      	it	hi
 800564e:	2200      	movhi	r2, #0
 8005650:	4413      	add	r3, r2
 8005652:	1a18      	subs	r0, r3, r0
 8005654:	b003      	add	sp, #12
 8005656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005658:	f812 5b01 	ldrb.w	r5, [r2], #1
 800565c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005660:	e7ed      	b.n	800563e <__exponent+0x4c>
 8005662:	2330      	movs	r3, #48	; 0x30
 8005664:	3130      	adds	r1, #48	; 0x30
 8005666:	7083      	strb	r3, [r0, #2]
 8005668:	70c1      	strb	r1, [r0, #3]
 800566a:	1d03      	adds	r3, r0, #4
 800566c:	e7f1      	b.n	8005652 <__exponent+0x60>
	...

08005670 <_printf_float>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	ed2d 8b02 	vpush	{d8}
 8005678:	b08d      	sub	sp, #52	; 0x34
 800567a:	460c      	mov	r4, r1
 800567c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005680:	4616      	mov	r6, r2
 8005682:	461f      	mov	r7, r3
 8005684:	4605      	mov	r5, r0
 8005686:	f000 fcfb 	bl	8006080 <_localeconv_r>
 800568a:	f8d0 a000 	ldr.w	sl, [r0]
 800568e:	4650      	mov	r0, sl
 8005690:	f7fa fdee 	bl	8000270 <strlen>
 8005694:	2300      	movs	r3, #0
 8005696:	930a      	str	r3, [sp, #40]	; 0x28
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	9305      	str	r3, [sp, #20]
 800569c:	f8d8 3000 	ldr.w	r3, [r8]
 80056a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80056a4:	3307      	adds	r3, #7
 80056a6:	f023 0307 	bic.w	r3, r3, #7
 80056aa:	f103 0208 	add.w	r2, r3, #8
 80056ae:	f8c8 2000 	str.w	r2, [r8]
 80056b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056ba:	9307      	str	r3, [sp, #28]
 80056bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80056c0:	ee08 0a10 	vmov	s16, r0
 80056c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80056c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056cc:	4b9e      	ldr	r3, [pc, #632]	; (8005948 <_printf_float+0x2d8>)
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295
 80056d2:	f7fb fa2b 	bl	8000b2c <__aeabi_dcmpun>
 80056d6:	bb88      	cbnz	r0, 800573c <_printf_float+0xcc>
 80056d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056dc:	4b9a      	ldr	r3, [pc, #616]	; (8005948 <_printf_float+0x2d8>)
 80056de:	f04f 32ff 	mov.w	r2, #4294967295
 80056e2:	f7fb fa05 	bl	8000af0 <__aeabi_dcmple>
 80056e6:	bb48      	cbnz	r0, 800573c <_printf_float+0xcc>
 80056e8:	2200      	movs	r2, #0
 80056ea:	2300      	movs	r3, #0
 80056ec:	4640      	mov	r0, r8
 80056ee:	4649      	mov	r1, r9
 80056f0:	f7fb f9f4 	bl	8000adc <__aeabi_dcmplt>
 80056f4:	b110      	cbz	r0, 80056fc <_printf_float+0x8c>
 80056f6:	232d      	movs	r3, #45	; 0x2d
 80056f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056fc:	4a93      	ldr	r2, [pc, #588]	; (800594c <_printf_float+0x2dc>)
 80056fe:	4b94      	ldr	r3, [pc, #592]	; (8005950 <_printf_float+0x2e0>)
 8005700:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005704:	bf94      	ite	ls
 8005706:	4690      	movls	r8, r2
 8005708:	4698      	movhi	r8, r3
 800570a:	2303      	movs	r3, #3
 800570c:	6123      	str	r3, [r4, #16]
 800570e:	9b05      	ldr	r3, [sp, #20]
 8005710:	f023 0304 	bic.w	r3, r3, #4
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	f04f 0900 	mov.w	r9, #0
 800571a:	9700      	str	r7, [sp, #0]
 800571c:	4633      	mov	r3, r6
 800571e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005720:	4621      	mov	r1, r4
 8005722:	4628      	mov	r0, r5
 8005724:	f000 f9da 	bl	8005adc <_printf_common>
 8005728:	3001      	adds	r0, #1
 800572a:	f040 8090 	bne.w	800584e <_printf_float+0x1de>
 800572e:	f04f 30ff 	mov.w	r0, #4294967295
 8005732:	b00d      	add	sp, #52	; 0x34
 8005734:	ecbd 8b02 	vpop	{d8}
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	4640      	mov	r0, r8
 8005742:	4649      	mov	r1, r9
 8005744:	f7fb f9f2 	bl	8000b2c <__aeabi_dcmpun>
 8005748:	b140      	cbz	r0, 800575c <_printf_float+0xec>
 800574a:	464b      	mov	r3, r9
 800574c:	2b00      	cmp	r3, #0
 800574e:	bfbc      	itt	lt
 8005750:	232d      	movlt	r3, #45	; 0x2d
 8005752:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005756:	4a7f      	ldr	r2, [pc, #508]	; (8005954 <_printf_float+0x2e4>)
 8005758:	4b7f      	ldr	r3, [pc, #508]	; (8005958 <_printf_float+0x2e8>)
 800575a:	e7d1      	b.n	8005700 <_printf_float+0x90>
 800575c:	6863      	ldr	r3, [r4, #4]
 800575e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005762:	9206      	str	r2, [sp, #24]
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	d13f      	bne.n	80057e8 <_printf_float+0x178>
 8005768:	2306      	movs	r3, #6
 800576a:	6063      	str	r3, [r4, #4]
 800576c:	9b05      	ldr	r3, [sp, #20]
 800576e:	6861      	ldr	r1, [r4, #4]
 8005770:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005774:	2300      	movs	r3, #0
 8005776:	9303      	str	r3, [sp, #12]
 8005778:	ab0a      	add	r3, sp, #40	; 0x28
 800577a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800577e:	ab09      	add	r3, sp, #36	; 0x24
 8005780:	ec49 8b10 	vmov	d0, r8, r9
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	6022      	str	r2, [r4, #0]
 8005788:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800578c:	4628      	mov	r0, r5
 800578e:	f7ff fece 	bl	800552e <__cvt>
 8005792:	9b06      	ldr	r3, [sp, #24]
 8005794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005796:	2b47      	cmp	r3, #71	; 0x47
 8005798:	4680      	mov	r8, r0
 800579a:	d108      	bne.n	80057ae <_printf_float+0x13e>
 800579c:	1cc8      	adds	r0, r1, #3
 800579e:	db02      	blt.n	80057a6 <_printf_float+0x136>
 80057a0:	6863      	ldr	r3, [r4, #4]
 80057a2:	4299      	cmp	r1, r3
 80057a4:	dd41      	ble.n	800582a <_printf_float+0x1ba>
 80057a6:	f1ab 0302 	sub.w	r3, fp, #2
 80057aa:	fa5f fb83 	uxtb.w	fp, r3
 80057ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057b2:	d820      	bhi.n	80057f6 <_printf_float+0x186>
 80057b4:	3901      	subs	r1, #1
 80057b6:	465a      	mov	r2, fp
 80057b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057bc:	9109      	str	r1, [sp, #36]	; 0x24
 80057be:	f7ff ff18 	bl	80055f2 <__exponent>
 80057c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057c4:	1813      	adds	r3, r2, r0
 80057c6:	2a01      	cmp	r2, #1
 80057c8:	4681      	mov	r9, r0
 80057ca:	6123      	str	r3, [r4, #16]
 80057cc:	dc02      	bgt.n	80057d4 <_printf_float+0x164>
 80057ce:	6822      	ldr	r2, [r4, #0]
 80057d0:	07d2      	lsls	r2, r2, #31
 80057d2:	d501      	bpl.n	80057d8 <_printf_float+0x168>
 80057d4:	3301      	adds	r3, #1
 80057d6:	6123      	str	r3, [r4, #16]
 80057d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d09c      	beq.n	800571a <_printf_float+0xaa>
 80057e0:	232d      	movs	r3, #45	; 0x2d
 80057e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e6:	e798      	b.n	800571a <_printf_float+0xaa>
 80057e8:	9a06      	ldr	r2, [sp, #24]
 80057ea:	2a47      	cmp	r2, #71	; 0x47
 80057ec:	d1be      	bne.n	800576c <_printf_float+0xfc>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1bc      	bne.n	800576c <_printf_float+0xfc>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e7b9      	b.n	800576a <_printf_float+0xfa>
 80057f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80057fa:	d118      	bne.n	800582e <_printf_float+0x1be>
 80057fc:	2900      	cmp	r1, #0
 80057fe:	6863      	ldr	r3, [r4, #4]
 8005800:	dd0b      	ble.n	800581a <_printf_float+0x1aa>
 8005802:	6121      	str	r1, [r4, #16]
 8005804:	b913      	cbnz	r3, 800580c <_printf_float+0x19c>
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	07d0      	lsls	r0, r2, #31
 800580a:	d502      	bpl.n	8005812 <_printf_float+0x1a2>
 800580c:	3301      	adds	r3, #1
 800580e:	440b      	add	r3, r1
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	65a1      	str	r1, [r4, #88]	; 0x58
 8005814:	f04f 0900 	mov.w	r9, #0
 8005818:	e7de      	b.n	80057d8 <_printf_float+0x168>
 800581a:	b913      	cbnz	r3, 8005822 <_printf_float+0x1b2>
 800581c:	6822      	ldr	r2, [r4, #0]
 800581e:	07d2      	lsls	r2, r2, #31
 8005820:	d501      	bpl.n	8005826 <_printf_float+0x1b6>
 8005822:	3302      	adds	r3, #2
 8005824:	e7f4      	b.n	8005810 <_printf_float+0x1a0>
 8005826:	2301      	movs	r3, #1
 8005828:	e7f2      	b.n	8005810 <_printf_float+0x1a0>
 800582a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800582e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005830:	4299      	cmp	r1, r3
 8005832:	db05      	blt.n	8005840 <_printf_float+0x1d0>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	6121      	str	r1, [r4, #16]
 8005838:	07d8      	lsls	r0, r3, #31
 800583a:	d5ea      	bpl.n	8005812 <_printf_float+0x1a2>
 800583c:	1c4b      	adds	r3, r1, #1
 800583e:	e7e7      	b.n	8005810 <_printf_float+0x1a0>
 8005840:	2900      	cmp	r1, #0
 8005842:	bfd4      	ite	le
 8005844:	f1c1 0202 	rsble	r2, r1, #2
 8005848:	2201      	movgt	r2, #1
 800584a:	4413      	add	r3, r2
 800584c:	e7e0      	b.n	8005810 <_printf_float+0x1a0>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	055a      	lsls	r2, r3, #21
 8005852:	d407      	bmi.n	8005864 <_printf_float+0x1f4>
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	4642      	mov	r2, r8
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	47b8      	blx	r7
 800585e:	3001      	adds	r0, #1
 8005860:	d12c      	bne.n	80058bc <_printf_float+0x24c>
 8005862:	e764      	b.n	800572e <_printf_float+0xbe>
 8005864:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005868:	f240 80e0 	bls.w	8005a2c <_printf_float+0x3bc>
 800586c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005870:	2200      	movs	r2, #0
 8005872:	2300      	movs	r3, #0
 8005874:	f7fb f928 	bl	8000ac8 <__aeabi_dcmpeq>
 8005878:	2800      	cmp	r0, #0
 800587a:	d034      	beq.n	80058e6 <_printf_float+0x276>
 800587c:	4a37      	ldr	r2, [pc, #220]	; (800595c <_printf_float+0x2ec>)
 800587e:	2301      	movs	r3, #1
 8005880:	4631      	mov	r1, r6
 8005882:	4628      	mov	r0, r5
 8005884:	47b8      	blx	r7
 8005886:	3001      	adds	r0, #1
 8005888:	f43f af51 	beq.w	800572e <_printf_float+0xbe>
 800588c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005890:	429a      	cmp	r2, r3
 8005892:	db02      	blt.n	800589a <_printf_float+0x22a>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	07d8      	lsls	r0, r3, #31
 8005898:	d510      	bpl.n	80058bc <_printf_float+0x24c>
 800589a:	ee18 3a10 	vmov	r3, s16
 800589e:	4652      	mov	r2, sl
 80058a0:	4631      	mov	r1, r6
 80058a2:	4628      	mov	r0, r5
 80058a4:	47b8      	blx	r7
 80058a6:	3001      	adds	r0, #1
 80058a8:	f43f af41 	beq.w	800572e <_printf_float+0xbe>
 80058ac:	f04f 0800 	mov.w	r8, #0
 80058b0:	f104 091a 	add.w	r9, r4, #26
 80058b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b6:	3b01      	subs	r3, #1
 80058b8:	4543      	cmp	r3, r8
 80058ba:	dc09      	bgt.n	80058d0 <_printf_float+0x260>
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	079b      	lsls	r3, r3, #30
 80058c0:	f100 8107 	bmi.w	8005ad2 <_printf_float+0x462>
 80058c4:	68e0      	ldr	r0, [r4, #12]
 80058c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058c8:	4298      	cmp	r0, r3
 80058ca:	bfb8      	it	lt
 80058cc:	4618      	movlt	r0, r3
 80058ce:	e730      	b.n	8005732 <_printf_float+0xc2>
 80058d0:	2301      	movs	r3, #1
 80058d2:	464a      	mov	r2, r9
 80058d4:	4631      	mov	r1, r6
 80058d6:	4628      	mov	r0, r5
 80058d8:	47b8      	blx	r7
 80058da:	3001      	adds	r0, #1
 80058dc:	f43f af27 	beq.w	800572e <_printf_float+0xbe>
 80058e0:	f108 0801 	add.w	r8, r8, #1
 80058e4:	e7e6      	b.n	80058b4 <_printf_float+0x244>
 80058e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	dc39      	bgt.n	8005960 <_printf_float+0x2f0>
 80058ec:	4a1b      	ldr	r2, [pc, #108]	; (800595c <_printf_float+0x2ec>)
 80058ee:	2301      	movs	r3, #1
 80058f0:	4631      	mov	r1, r6
 80058f2:	4628      	mov	r0, r5
 80058f4:	47b8      	blx	r7
 80058f6:	3001      	adds	r0, #1
 80058f8:	f43f af19 	beq.w	800572e <_printf_float+0xbe>
 80058fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005900:	4313      	orrs	r3, r2
 8005902:	d102      	bne.n	800590a <_printf_float+0x29a>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	07d9      	lsls	r1, r3, #31
 8005908:	d5d8      	bpl.n	80058bc <_printf_float+0x24c>
 800590a:	ee18 3a10 	vmov	r3, s16
 800590e:	4652      	mov	r2, sl
 8005910:	4631      	mov	r1, r6
 8005912:	4628      	mov	r0, r5
 8005914:	47b8      	blx	r7
 8005916:	3001      	adds	r0, #1
 8005918:	f43f af09 	beq.w	800572e <_printf_float+0xbe>
 800591c:	f04f 0900 	mov.w	r9, #0
 8005920:	f104 0a1a 	add.w	sl, r4, #26
 8005924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005926:	425b      	negs	r3, r3
 8005928:	454b      	cmp	r3, r9
 800592a:	dc01      	bgt.n	8005930 <_printf_float+0x2c0>
 800592c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800592e:	e792      	b.n	8005856 <_printf_float+0x1e6>
 8005930:	2301      	movs	r3, #1
 8005932:	4652      	mov	r2, sl
 8005934:	4631      	mov	r1, r6
 8005936:	4628      	mov	r0, r5
 8005938:	47b8      	blx	r7
 800593a:	3001      	adds	r0, #1
 800593c:	f43f aef7 	beq.w	800572e <_printf_float+0xbe>
 8005940:	f109 0901 	add.w	r9, r9, #1
 8005944:	e7ee      	b.n	8005924 <_printf_float+0x2b4>
 8005946:	bf00      	nop
 8005948:	7fefffff 	.word	0x7fefffff
 800594c:	08008b00 	.word	0x08008b00
 8005950:	08008b04 	.word	0x08008b04
 8005954:	08008b08 	.word	0x08008b08
 8005958:	08008b0c 	.word	0x08008b0c
 800595c:	08008b10 	.word	0x08008b10
 8005960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005964:	429a      	cmp	r2, r3
 8005966:	bfa8      	it	ge
 8005968:	461a      	movge	r2, r3
 800596a:	2a00      	cmp	r2, #0
 800596c:	4691      	mov	r9, r2
 800596e:	dc37      	bgt.n	80059e0 <_printf_float+0x370>
 8005970:	f04f 0b00 	mov.w	fp, #0
 8005974:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005978:	f104 021a 	add.w	r2, r4, #26
 800597c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800597e:	9305      	str	r3, [sp, #20]
 8005980:	eba3 0309 	sub.w	r3, r3, r9
 8005984:	455b      	cmp	r3, fp
 8005986:	dc33      	bgt.n	80059f0 <_printf_float+0x380>
 8005988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800598c:	429a      	cmp	r2, r3
 800598e:	db3b      	blt.n	8005a08 <_printf_float+0x398>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	07da      	lsls	r2, r3, #31
 8005994:	d438      	bmi.n	8005a08 <_printf_float+0x398>
 8005996:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800599a:	eba2 0903 	sub.w	r9, r2, r3
 800599e:	9b05      	ldr	r3, [sp, #20]
 80059a0:	1ad2      	subs	r2, r2, r3
 80059a2:	4591      	cmp	r9, r2
 80059a4:	bfa8      	it	ge
 80059a6:	4691      	movge	r9, r2
 80059a8:	f1b9 0f00 	cmp.w	r9, #0
 80059ac:	dc35      	bgt.n	8005a1a <_printf_float+0x3aa>
 80059ae:	f04f 0800 	mov.w	r8, #0
 80059b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059b6:	f104 0a1a 	add.w	sl, r4, #26
 80059ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059be:	1a9b      	subs	r3, r3, r2
 80059c0:	eba3 0309 	sub.w	r3, r3, r9
 80059c4:	4543      	cmp	r3, r8
 80059c6:	f77f af79 	ble.w	80058bc <_printf_float+0x24c>
 80059ca:	2301      	movs	r3, #1
 80059cc:	4652      	mov	r2, sl
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	f43f aeaa 	beq.w	800572e <_printf_float+0xbe>
 80059da:	f108 0801 	add.w	r8, r8, #1
 80059de:	e7ec      	b.n	80059ba <_printf_float+0x34a>
 80059e0:	4613      	mov	r3, r2
 80059e2:	4631      	mov	r1, r6
 80059e4:	4642      	mov	r2, r8
 80059e6:	4628      	mov	r0, r5
 80059e8:	47b8      	blx	r7
 80059ea:	3001      	adds	r0, #1
 80059ec:	d1c0      	bne.n	8005970 <_printf_float+0x300>
 80059ee:	e69e      	b.n	800572e <_printf_float+0xbe>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4631      	mov	r1, r6
 80059f4:	4628      	mov	r0, r5
 80059f6:	9205      	str	r2, [sp, #20]
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	f43f ae97 	beq.w	800572e <_printf_float+0xbe>
 8005a00:	9a05      	ldr	r2, [sp, #20]
 8005a02:	f10b 0b01 	add.w	fp, fp, #1
 8005a06:	e7b9      	b.n	800597c <_printf_float+0x30c>
 8005a08:	ee18 3a10 	vmov	r3, s16
 8005a0c:	4652      	mov	r2, sl
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b8      	blx	r7
 8005a14:	3001      	adds	r0, #1
 8005a16:	d1be      	bne.n	8005996 <_printf_float+0x326>
 8005a18:	e689      	b.n	800572e <_printf_float+0xbe>
 8005a1a:	9a05      	ldr	r2, [sp, #20]
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	4442      	add	r2, r8
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b8      	blx	r7
 8005a26:	3001      	adds	r0, #1
 8005a28:	d1c1      	bne.n	80059ae <_printf_float+0x33e>
 8005a2a:	e680      	b.n	800572e <_printf_float+0xbe>
 8005a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a2e:	2a01      	cmp	r2, #1
 8005a30:	dc01      	bgt.n	8005a36 <_printf_float+0x3c6>
 8005a32:	07db      	lsls	r3, r3, #31
 8005a34:	d53a      	bpl.n	8005aac <_printf_float+0x43c>
 8005a36:	2301      	movs	r3, #1
 8005a38:	4642      	mov	r2, r8
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	47b8      	blx	r7
 8005a40:	3001      	adds	r0, #1
 8005a42:	f43f ae74 	beq.w	800572e <_printf_float+0xbe>
 8005a46:	ee18 3a10 	vmov	r3, s16
 8005a4a:	4652      	mov	r2, sl
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	f43f ae6b 	beq.w	800572e <_printf_float+0xbe>
 8005a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005a64:	f7fb f830 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a68:	b9d8      	cbnz	r0, 8005aa2 <_printf_float+0x432>
 8005a6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005a6e:	f108 0201 	add.w	r2, r8, #1
 8005a72:	4631      	mov	r1, r6
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b8      	blx	r7
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d10e      	bne.n	8005a9a <_printf_float+0x42a>
 8005a7c:	e657      	b.n	800572e <_printf_float+0xbe>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4652      	mov	r2, sl
 8005a82:	4631      	mov	r1, r6
 8005a84:	4628      	mov	r0, r5
 8005a86:	47b8      	blx	r7
 8005a88:	3001      	adds	r0, #1
 8005a8a:	f43f ae50 	beq.w	800572e <_printf_float+0xbe>
 8005a8e:	f108 0801 	add.w	r8, r8, #1
 8005a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a94:	3b01      	subs	r3, #1
 8005a96:	4543      	cmp	r3, r8
 8005a98:	dcf1      	bgt.n	8005a7e <_printf_float+0x40e>
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005aa0:	e6da      	b.n	8005858 <_printf_float+0x1e8>
 8005aa2:	f04f 0800 	mov.w	r8, #0
 8005aa6:	f104 0a1a 	add.w	sl, r4, #26
 8005aaa:	e7f2      	b.n	8005a92 <_printf_float+0x422>
 8005aac:	2301      	movs	r3, #1
 8005aae:	4642      	mov	r2, r8
 8005ab0:	e7df      	b.n	8005a72 <_printf_float+0x402>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	464a      	mov	r2, r9
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b8      	blx	r7
 8005abc:	3001      	adds	r0, #1
 8005abe:	f43f ae36 	beq.w	800572e <_printf_float+0xbe>
 8005ac2:	f108 0801 	add.w	r8, r8, #1
 8005ac6:	68e3      	ldr	r3, [r4, #12]
 8005ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005aca:	1a5b      	subs	r3, r3, r1
 8005acc:	4543      	cmp	r3, r8
 8005ace:	dcf0      	bgt.n	8005ab2 <_printf_float+0x442>
 8005ad0:	e6f8      	b.n	80058c4 <_printf_float+0x254>
 8005ad2:	f04f 0800 	mov.w	r8, #0
 8005ad6:	f104 0919 	add.w	r9, r4, #25
 8005ada:	e7f4      	b.n	8005ac6 <_printf_float+0x456>

08005adc <_printf_common>:
 8005adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	4699      	mov	r9, r3
 8005ae4:	688a      	ldr	r2, [r1, #8]
 8005ae6:	690b      	ldr	r3, [r1, #16]
 8005ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aec:	4293      	cmp	r3, r2
 8005aee:	bfb8      	it	lt
 8005af0:	4613      	movlt	r3, r2
 8005af2:	6033      	str	r3, [r6, #0]
 8005af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005af8:	4607      	mov	r7, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	b10a      	cbz	r2, 8005b02 <_printf_common+0x26>
 8005afe:	3301      	adds	r3, #1
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	0699      	lsls	r1, r3, #26
 8005b06:	bf42      	ittt	mi
 8005b08:	6833      	ldrmi	r3, [r6, #0]
 8005b0a:	3302      	addmi	r3, #2
 8005b0c:	6033      	strmi	r3, [r6, #0]
 8005b0e:	6825      	ldr	r5, [r4, #0]
 8005b10:	f015 0506 	ands.w	r5, r5, #6
 8005b14:	d106      	bne.n	8005b24 <_printf_common+0x48>
 8005b16:	f104 0a19 	add.w	sl, r4, #25
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	6832      	ldr	r2, [r6, #0]
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	dc26      	bgt.n	8005b72 <_printf_common+0x96>
 8005b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b28:	1e13      	subs	r3, r2, #0
 8005b2a:	6822      	ldr	r2, [r4, #0]
 8005b2c:	bf18      	it	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	0692      	lsls	r2, r2, #26
 8005b32:	d42b      	bmi.n	8005b8c <_printf_common+0xb0>
 8005b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b38:	4649      	mov	r1, r9
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	47c0      	blx	r8
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d01e      	beq.n	8005b80 <_printf_common+0xa4>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	6922      	ldr	r2, [r4, #16]
 8005b46:	f003 0306 	and.w	r3, r3, #6
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	bf02      	ittt	eq
 8005b4e:	68e5      	ldreq	r5, [r4, #12]
 8005b50:	6833      	ldreq	r3, [r6, #0]
 8005b52:	1aed      	subeq	r5, r5, r3
 8005b54:	68a3      	ldr	r3, [r4, #8]
 8005b56:	bf0c      	ite	eq
 8005b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b5c:	2500      	movne	r5, #0
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	bfc4      	itt	gt
 8005b62:	1a9b      	subgt	r3, r3, r2
 8005b64:	18ed      	addgt	r5, r5, r3
 8005b66:	2600      	movs	r6, #0
 8005b68:	341a      	adds	r4, #26
 8005b6a:	42b5      	cmp	r5, r6
 8005b6c:	d11a      	bne.n	8005ba4 <_printf_common+0xc8>
 8005b6e:	2000      	movs	r0, #0
 8005b70:	e008      	b.n	8005b84 <_printf_common+0xa8>
 8005b72:	2301      	movs	r3, #1
 8005b74:	4652      	mov	r2, sl
 8005b76:	4649      	mov	r1, r9
 8005b78:	4638      	mov	r0, r7
 8005b7a:	47c0      	blx	r8
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d103      	bne.n	8005b88 <_printf_common+0xac>
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	3501      	adds	r5, #1
 8005b8a:	e7c6      	b.n	8005b1a <_printf_common+0x3e>
 8005b8c:	18e1      	adds	r1, r4, r3
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	2030      	movs	r0, #48	; 0x30
 8005b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b96:	4422      	add	r2, r4
 8005b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	e7c7      	b.n	8005b34 <_printf_common+0x58>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	4649      	mov	r1, r9
 8005baa:	4638      	mov	r0, r7
 8005bac:	47c0      	blx	r8
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d0e6      	beq.n	8005b80 <_printf_common+0xa4>
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7d9      	b.n	8005b6a <_printf_common+0x8e>
	...

08005bb8 <_printf_i>:
 8005bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbc:	7e0f      	ldrb	r7, [r1, #24]
 8005bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bc0:	2f78      	cmp	r7, #120	; 0x78
 8005bc2:	4691      	mov	r9, r2
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	469a      	mov	sl, r3
 8005bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bce:	d807      	bhi.n	8005be0 <_printf_i+0x28>
 8005bd0:	2f62      	cmp	r7, #98	; 0x62
 8005bd2:	d80a      	bhi.n	8005bea <_printf_i+0x32>
 8005bd4:	2f00      	cmp	r7, #0
 8005bd6:	f000 80d4 	beq.w	8005d82 <_printf_i+0x1ca>
 8005bda:	2f58      	cmp	r7, #88	; 0x58
 8005bdc:	f000 80c0 	beq.w	8005d60 <_printf_i+0x1a8>
 8005be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005be8:	e03a      	b.n	8005c60 <_printf_i+0xa8>
 8005bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bee:	2b15      	cmp	r3, #21
 8005bf0:	d8f6      	bhi.n	8005be0 <_printf_i+0x28>
 8005bf2:	a101      	add	r1, pc, #4	; (adr r1, 8005bf8 <_printf_i+0x40>)
 8005bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bf8:	08005c51 	.word	0x08005c51
 8005bfc:	08005c65 	.word	0x08005c65
 8005c00:	08005be1 	.word	0x08005be1
 8005c04:	08005be1 	.word	0x08005be1
 8005c08:	08005be1 	.word	0x08005be1
 8005c0c:	08005be1 	.word	0x08005be1
 8005c10:	08005c65 	.word	0x08005c65
 8005c14:	08005be1 	.word	0x08005be1
 8005c18:	08005be1 	.word	0x08005be1
 8005c1c:	08005be1 	.word	0x08005be1
 8005c20:	08005be1 	.word	0x08005be1
 8005c24:	08005d69 	.word	0x08005d69
 8005c28:	08005c91 	.word	0x08005c91
 8005c2c:	08005d23 	.word	0x08005d23
 8005c30:	08005be1 	.word	0x08005be1
 8005c34:	08005be1 	.word	0x08005be1
 8005c38:	08005d8b 	.word	0x08005d8b
 8005c3c:	08005be1 	.word	0x08005be1
 8005c40:	08005c91 	.word	0x08005c91
 8005c44:	08005be1 	.word	0x08005be1
 8005c48:	08005be1 	.word	0x08005be1
 8005c4c:	08005d2b 	.word	0x08005d2b
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	1d1a      	adds	r2, r3, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	602a      	str	r2, [r5, #0]
 8005c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c60:	2301      	movs	r3, #1
 8005c62:	e09f      	b.n	8005da4 <_printf_i+0x1ec>
 8005c64:	6820      	ldr	r0, [r4, #0]
 8005c66:	682b      	ldr	r3, [r5, #0]
 8005c68:	0607      	lsls	r7, r0, #24
 8005c6a:	f103 0104 	add.w	r1, r3, #4
 8005c6e:	6029      	str	r1, [r5, #0]
 8005c70:	d501      	bpl.n	8005c76 <_printf_i+0xbe>
 8005c72:	681e      	ldr	r6, [r3, #0]
 8005c74:	e003      	b.n	8005c7e <_printf_i+0xc6>
 8005c76:	0646      	lsls	r6, r0, #25
 8005c78:	d5fb      	bpl.n	8005c72 <_printf_i+0xba>
 8005c7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c7e:	2e00      	cmp	r6, #0
 8005c80:	da03      	bge.n	8005c8a <_printf_i+0xd2>
 8005c82:	232d      	movs	r3, #45	; 0x2d
 8005c84:	4276      	negs	r6, r6
 8005c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c8a:	485a      	ldr	r0, [pc, #360]	; (8005df4 <_printf_i+0x23c>)
 8005c8c:	230a      	movs	r3, #10
 8005c8e:	e012      	b.n	8005cb6 <_printf_i+0xfe>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	6820      	ldr	r0, [r4, #0]
 8005c94:	1d19      	adds	r1, r3, #4
 8005c96:	6029      	str	r1, [r5, #0]
 8005c98:	0605      	lsls	r5, r0, #24
 8005c9a:	d501      	bpl.n	8005ca0 <_printf_i+0xe8>
 8005c9c:	681e      	ldr	r6, [r3, #0]
 8005c9e:	e002      	b.n	8005ca6 <_printf_i+0xee>
 8005ca0:	0641      	lsls	r1, r0, #25
 8005ca2:	d5fb      	bpl.n	8005c9c <_printf_i+0xe4>
 8005ca4:	881e      	ldrh	r6, [r3, #0]
 8005ca6:	4853      	ldr	r0, [pc, #332]	; (8005df4 <_printf_i+0x23c>)
 8005ca8:	2f6f      	cmp	r7, #111	; 0x6f
 8005caa:	bf0c      	ite	eq
 8005cac:	2308      	moveq	r3, #8
 8005cae:	230a      	movne	r3, #10
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cb6:	6865      	ldr	r5, [r4, #4]
 8005cb8:	60a5      	str	r5, [r4, #8]
 8005cba:	2d00      	cmp	r5, #0
 8005cbc:	bfa2      	ittt	ge
 8005cbe:	6821      	ldrge	r1, [r4, #0]
 8005cc0:	f021 0104 	bicge.w	r1, r1, #4
 8005cc4:	6021      	strge	r1, [r4, #0]
 8005cc6:	b90e      	cbnz	r6, 8005ccc <_printf_i+0x114>
 8005cc8:	2d00      	cmp	r5, #0
 8005cca:	d04b      	beq.n	8005d64 <_printf_i+0x1ac>
 8005ccc:	4615      	mov	r5, r2
 8005cce:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cd2:	fb03 6711 	mls	r7, r3, r1, r6
 8005cd6:	5dc7      	ldrb	r7, [r0, r7]
 8005cd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cdc:	4637      	mov	r7, r6
 8005cde:	42bb      	cmp	r3, r7
 8005ce0:	460e      	mov	r6, r1
 8005ce2:	d9f4      	bls.n	8005cce <_printf_i+0x116>
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d10b      	bne.n	8005d00 <_printf_i+0x148>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	07de      	lsls	r6, r3, #31
 8005cec:	d508      	bpl.n	8005d00 <_printf_i+0x148>
 8005cee:	6923      	ldr	r3, [r4, #16]
 8005cf0:	6861      	ldr	r1, [r4, #4]
 8005cf2:	4299      	cmp	r1, r3
 8005cf4:	bfde      	ittt	le
 8005cf6:	2330      	movle	r3, #48	; 0x30
 8005cf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d00:	1b52      	subs	r2, r2, r5
 8005d02:	6122      	str	r2, [r4, #16]
 8005d04:	f8cd a000 	str.w	sl, [sp]
 8005d08:	464b      	mov	r3, r9
 8005d0a:	aa03      	add	r2, sp, #12
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	4640      	mov	r0, r8
 8005d10:	f7ff fee4 	bl	8005adc <_printf_common>
 8005d14:	3001      	adds	r0, #1
 8005d16:	d14a      	bne.n	8005dae <_printf_i+0x1f6>
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1c:	b004      	add	sp, #16
 8005d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	f043 0320 	orr.w	r3, r3, #32
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	4833      	ldr	r0, [pc, #204]	; (8005df8 <_printf_i+0x240>)
 8005d2c:	2778      	movs	r7, #120	; 0x78
 8005d2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	6829      	ldr	r1, [r5, #0]
 8005d36:	061f      	lsls	r7, r3, #24
 8005d38:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d3c:	d402      	bmi.n	8005d44 <_printf_i+0x18c>
 8005d3e:	065f      	lsls	r7, r3, #25
 8005d40:	bf48      	it	mi
 8005d42:	b2b6      	uxthmi	r6, r6
 8005d44:	07df      	lsls	r7, r3, #31
 8005d46:	bf48      	it	mi
 8005d48:	f043 0320 	orrmi.w	r3, r3, #32
 8005d4c:	6029      	str	r1, [r5, #0]
 8005d4e:	bf48      	it	mi
 8005d50:	6023      	strmi	r3, [r4, #0]
 8005d52:	b91e      	cbnz	r6, 8005d5c <_printf_i+0x1a4>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	f023 0320 	bic.w	r3, r3, #32
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	e7a7      	b.n	8005cb0 <_printf_i+0xf8>
 8005d60:	4824      	ldr	r0, [pc, #144]	; (8005df4 <_printf_i+0x23c>)
 8005d62:	e7e4      	b.n	8005d2e <_printf_i+0x176>
 8005d64:	4615      	mov	r5, r2
 8005d66:	e7bd      	b.n	8005ce4 <_printf_i+0x12c>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	6826      	ldr	r6, [r4, #0]
 8005d6c:	6961      	ldr	r1, [r4, #20]
 8005d6e:	1d18      	adds	r0, r3, #4
 8005d70:	6028      	str	r0, [r5, #0]
 8005d72:	0635      	lsls	r5, r6, #24
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	d501      	bpl.n	8005d7c <_printf_i+0x1c4>
 8005d78:	6019      	str	r1, [r3, #0]
 8005d7a:	e002      	b.n	8005d82 <_printf_i+0x1ca>
 8005d7c:	0670      	lsls	r0, r6, #25
 8005d7e:	d5fb      	bpl.n	8005d78 <_printf_i+0x1c0>
 8005d80:	8019      	strh	r1, [r3, #0]
 8005d82:	2300      	movs	r3, #0
 8005d84:	6123      	str	r3, [r4, #16]
 8005d86:	4615      	mov	r5, r2
 8005d88:	e7bc      	b.n	8005d04 <_printf_i+0x14c>
 8005d8a:	682b      	ldr	r3, [r5, #0]
 8005d8c:	1d1a      	adds	r2, r3, #4
 8005d8e:	602a      	str	r2, [r5, #0]
 8005d90:	681d      	ldr	r5, [r3, #0]
 8005d92:	6862      	ldr	r2, [r4, #4]
 8005d94:	2100      	movs	r1, #0
 8005d96:	4628      	mov	r0, r5
 8005d98:	f7fa fa1a 	bl	80001d0 <memchr>
 8005d9c:	b108      	cbz	r0, 8005da2 <_printf_i+0x1ea>
 8005d9e:	1b40      	subs	r0, r0, r5
 8005da0:	6060      	str	r0, [r4, #4]
 8005da2:	6863      	ldr	r3, [r4, #4]
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	2300      	movs	r3, #0
 8005da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dac:	e7aa      	b.n	8005d04 <_printf_i+0x14c>
 8005dae:	6923      	ldr	r3, [r4, #16]
 8005db0:	462a      	mov	r2, r5
 8005db2:	4649      	mov	r1, r9
 8005db4:	4640      	mov	r0, r8
 8005db6:	47d0      	blx	sl
 8005db8:	3001      	adds	r0, #1
 8005dba:	d0ad      	beq.n	8005d18 <_printf_i+0x160>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	079b      	lsls	r3, r3, #30
 8005dc0:	d413      	bmi.n	8005dea <_printf_i+0x232>
 8005dc2:	68e0      	ldr	r0, [r4, #12]
 8005dc4:	9b03      	ldr	r3, [sp, #12]
 8005dc6:	4298      	cmp	r0, r3
 8005dc8:	bfb8      	it	lt
 8005dca:	4618      	movlt	r0, r3
 8005dcc:	e7a6      	b.n	8005d1c <_printf_i+0x164>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	47d0      	blx	sl
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d09d      	beq.n	8005d18 <_printf_i+0x160>
 8005ddc:	3501      	adds	r5, #1
 8005dde:	68e3      	ldr	r3, [r4, #12]
 8005de0:	9903      	ldr	r1, [sp, #12]
 8005de2:	1a5b      	subs	r3, r3, r1
 8005de4:	42ab      	cmp	r3, r5
 8005de6:	dcf2      	bgt.n	8005dce <_printf_i+0x216>
 8005de8:	e7eb      	b.n	8005dc2 <_printf_i+0x20a>
 8005dea:	2500      	movs	r5, #0
 8005dec:	f104 0619 	add.w	r6, r4, #25
 8005df0:	e7f5      	b.n	8005dde <_printf_i+0x226>
 8005df2:	bf00      	nop
 8005df4:	08008b12 	.word	0x08008b12
 8005df8:	08008b23 	.word	0x08008b23

08005dfc <std>:
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	4604      	mov	r4, r0
 8005e02:	e9c0 3300 	strd	r3, r3, [r0]
 8005e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e0a:	6083      	str	r3, [r0, #8]
 8005e0c:	8181      	strh	r1, [r0, #12]
 8005e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e10:	81c2      	strh	r2, [r0, #14]
 8005e12:	6183      	str	r3, [r0, #24]
 8005e14:	4619      	mov	r1, r3
 8005e16:	2208      	movs	r2, #8
 8005e18:	305c      	adds	r0, #92	; 0x5c
 8005e1a:	f000 f928 	bl	800606e <memset>
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <std+0x58>)
 8005e20:	6263      	str	r3, [r4, #36]	; 0x24
 8005e22:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <std+0x5c>)
 8005e24:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e26:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <std+0x60>)
 8005e28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <std+0x64>)
 8005e2c:	6323      	str	r3, [r4, #48]	; 0x30
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <std+0x68>)
 8005e30:	6224      	str	r4, [r4, #32]
 8005e32:	429c      	cmp	r4, r3
 8005e34:	d006      	beq.n	8005e44 <std+0x48>
 8005e36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005e3a:	4294      	cmp	r4, r2
 8005e3c:	d002      	beq.n	8005e44 <std+0x48>
 8005e3e:	33d0      	adds	r3, #208	; 0xd0
 8005e40:	429c      	cmp	r4, r3
 8005e42:	d105      	bne.n	8005e50 <std+0x54>
 8005e44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e4c:	f000 b98c 	b.w	8006168 <__retarget_lock_init_recursive>
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	bf00      	nop
 8005e54:	08005fe9 	.word	0x08005fe9
 8005e58:	0800600b 	.word	0x0800600b
 8005e5c:	08006043 	.word	0x08006043
 8005e60:	08006067 	.word	0x08006067
 8005e64:	200004b4 	.word	0x200004b4

08005e68 <stdio_exit_handler>:
 8005e68:	4a02      	ldr	r2, [pc, #8]	; (8005e74 <stdio_exit_handler+0xc>)
 8005e6a:	4903      	ldr	r1, [pc, #12]	; (8005e78 <stdio_exit_handler+0x10>)
 8005e6c:	4803      	ldr	r0, [pc, #12]	; (8005e7c <stdio_exit_handler+0x14>)
 8005e6e:	f000 b869 	b.w	8005f44 <_fwalk_sglue>
 8005e72:	bf00      	nop
 8005e74:	2000000c 	.word	0x2000000c
 8005e78:	08007b39 	.word	0x08007b39
 8005e7c:	20000018 	.word	0x20000018

08005e80 <cleanup_stdio>:
 8005e80:	6841      	ldr	r1, [r0, #4]
 8005e82:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <cleanup_stdio+0x34>)
 8005e84:	4299      	cmp	r1, r3
 8005e86:	b510      	push	{r4, lr}
 8005e88:	4604      	mov	r4, r0
 8005e8a:	d001      	beq.n	8005e90 <cleanup_stdio+0x10>
 8005e8c:	f001 fe54 	bl	8007b38 <_fflush_r>
 8005e90:	68a1      	ldr	r1, [r4, #8]
 8005e92:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <cleanup_stdio+0x38>)
 8005e94:	4299      	cmp	r1, r3
 8005e96:	d002      	beq.n	8005e9e <cleanup_stdio+0x1e>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f001 fe4d 	bl	8007b38 <_fflush_r>
 8005e9e:	68e1      	ldr	r1, [r4, #12]
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <cleanup_stdio+0x3c>)
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	d004      	beq.n	8005eb0 <cleanup_stdio+0x30>
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eac:	f001 be44 	b.w	8007b38 <_fflush_r>
 8005eb0:	bd10      	pop	{r4, pc}
 8005eb2:	bf00      	nop
 8005eb4:	200004b4 	.word	0x200004b4
 8005eb8:	2000051c 	.word	0x2000051c
 8005ebc:	20000584 	.word	0x20000584

08005ec0 <global_stdio_init.part.0>:
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <global_stdio_init.part.0+0x30>)
 8005ec4:	4c0b      	ldr	r4, [pc, #44]	; (8005ef4 <global_stdio_init.part.0+0x34>)
 8005ec6:	4a0c      	ldr	r2, [pc, #48]	; (8005ef8 <global_stdio_init.part.0+0x38>)
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	4620      	mov	r0, r4
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2104      	movs	r1, #4
 8005ed0:	f7ff ff94 	bl	8005dfc <std>
 8005ed4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005ed8:	2201      	movs	r2, #1
 8005eda:	2109      	movs	r1, #9
 8005edc:	f7ff ff8e 	bl	8005dfc <std>
 8005ee0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eea:	2112      	movs	r1, #18
 8005eec:	f7ff bf86 	b.w	8005dfc <std>
 8005ef0:	200005ec 	.word	0x200005ec
 8005ef4:	200004b4 	.word	0x200004b4
 8005ef8:	08005e69 	.word	0x08005e69

08005efc <__sfp_lock_acquire>:
 8005efc:	4801      	ldr	r0, [pc, #4]	; (8005f04 <__sfp_lock_acquire+0x8>)
 8005efe:	f000 b934 	b.w	800616a <__retarget_lock_acquire_recursive>
 8005f02:	bf00      	nop
 8005f04:	200005f5 	.word	0x200005f5

08005f08 <__sfp_lock_release>:
 8005f08:	4801      	ldr	r0, [pc, #4]	; (8005f10 <__sfp_lock_release+0x8>)
 8005f0a:	f000 b92f 	b.w	800616c <__retarget_lock_release_recursive>
 8005f0e:	bf00      	nop
 8005f10:	200005f5 	.word	0x200005f5

08005f14 <__sinit>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	4604      	mov	r4, r0
 8005f18:	f7ff fff0 	bl	8005efc <__sfp_lock_acquire>
 8005f1c:	6a23      	ldr	r3, [r4, #32]
 8005f1e:	b11b      	cbz	r3, 8005f28 <__sinit+0x14>
 8005f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f24:	f7ff bff0 	b.w	8005f08 <__sfp_lock_release>
 8005f28:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <__sinit+0x28>)
 8005f2a:	6223      	str	r3, [r4, #32]
 8005f2c:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <__sinit+0x2c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f5      	bne.n	8005f20 <__sinit+0xc>
 8005f34:	f7ff ffc4 	bl	8005ec0 <global_stdio_init.part.0>
 8005f38:	e7f2      	b.n	8005f20 <__sinit+0xc>
 8005f3a:	bf00      	nop
 8005f3c:	08005e81 	.word	0x08005e81
 8005f40:	200005ec 	.word	0x200005ec

08005f44 <_fwalk_sglue>:
 8005f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f48:	4607      	mov	r7, r0
 8005f4a:	4688      	mov	r8, r1
 8005f4c:	4614      	mov	r4, r2
 8005f4e:	2600      	movs	r6, #0
 8005f50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f54:	f1b9 0901 	subs.w	r9, r9, #1
 8005f58:	d505      	bpl.n	8005f66 <_fwalk_sglue+0x22>
 8005f5a:	6824      	ldr	r4, [r4, #0]
 8005f5c:	2c00      	cmp	r4, #0
 8005f5e:	d1f7      	bne.n	8005f50 <_fwalk_sglue+0xc>
 8005f60:	4630      	mov	r0, r6
 8005f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f66:	89ab      	ldrh	r3, [r5, #12]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d907      	bls.n	8005f7c <_fwalk_sglue+0x38>
 8005f6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f70:	3301      	adds	r3, #1
 8005f72:	d003      	beq.n	8005f7c <_fwalk_sglue+0x38>
 8005f74:	4629      	mov	r1, r5
 8005f76:	4638      	mov	r0, r7
 8005f78:	47c0      	blx	r8
 8005f7a:	4306      	orrs	r6, r0
 8005f7c:	3568      	adds	r5, #104	; 0x68
 8005f7e:	e7e9      	b.n	8005f54 <_fwalk_sglue+0x10>

08005f80 <sniprintf>:
 8005f80:	b40c      	push	{r2, r3}
 8005f82:	b530      	push	{r4, r5, lr}
 8005f84:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <sniprintf+0x64>)
 8005f86:	1e0c      	subs	r4, r1, #0
 8005f88:	681d      	ldr	r5, [r3, #0]
 8005f8a:	b09d      	sub	sp, #116	; 0x74
 8005f8c:	da08      	bge.n	8005fa0 <sniprintf+0x20>
 8005f8e:	238b      	movs	r3, #139	; 0x8b
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	f04f 30ff 	mov.w	r0, #4294967295
 8005f96:	b01d      	add	sp, #116	; 0x74
 8005f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f9c:	b002      	add	sp, #8
 8005f9e:	4770      	bx	lr
 8005fa0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005fa4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005fa8:	bf14      	ite	ne
 8005faa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fae:	4623      	moveq	r3, r4
 8005fb0:	9304      	str	r3, [sp, #16]
 8005fb2:	9307      	str	r3, [sp, #28]
 8005fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fb8:	9002      	str	r0, [sp, #8]
 8005fba:	9006      	str	r0, [sp, #24]
 8005fbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005fc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fc2:	ab21      	add	r3, sp, #132	; 0x84
 8005fc4:	a902      	add	r1, sp, #8
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	9301      	str	r3, [sp, #4]
 8005fca:	f001 fc31 	bl	8007830 <_svfiprintf_r>
 8005fce:	1c43      	adds	r3, r0, #1
 8005fd0:	bfbc      	itt	lt
 8005fd2:	238b      	movlt	r3, #139	; 0x8b
 8005fd4:	602b      	strlt	r3, [r5, #0]
 8005fd6:	2c00      	cmp	r4, #0
 8005fd8:	d0dd      	beq.n	8005f96 <sniprintf+0x16>
 8005fda:	9b02      	ldr	r3, [sp, #8]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	e7d9      	b.n	8005f96 <sniprintf+0x16>
 8005fe2:	bf00      	nop
 8005fe4:	20000064 	.word	0x20000064

08005fe8 <__sread>:
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	460c      	mov	r4, r1
 8005fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff0:	f000 f86c 	bl	80060cc <_read_r>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	bfab      	itete	ge
 8005ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8005ffc:	181b      	addge	r3, r3, r0
 8005ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006002:	bfac      	ite	ge
 8006004:	6563      	strge	r3, [r4, #84]	; 0x54
 8006006:	81a3      	strhlt	r3, [r4, #12]
 8006008:	bd10      	pop	{r4, pc}

0800600a <__swrite>:
 800600a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800600e:	461f      	mov	r7, r3
 8006010:	898b      	ldrh	r3, [r1, #12]
 8006012:	05db      	lsls	r3, r3, #23
 8006014:	4605      	mov	r5, r0
 8006016:	460c      	mov	r4, r1
 8006018:	4616      	mov	r6, r2
 800601a:	d505      	bpl.n	8006028 <__swrite+0x1e>
 800601c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006020:	2302      	movs	r3, #2
 8006022:	2200      	movs	r2, #0
 8006024:	f000 f840 	bl	80060a8 <_lseek_r>
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800602e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	4632      	mov	r2, r6
 8006036:	463b      	mov	r3, r7
 8006038:	4628      	mov	r0, r5
 800603a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800603e:	f000 b857 	b.w	80060f0 <_write_r>

08006042 <__sseek>:
 8006042:	b510      	push	{r4, lr}
 8006044:	460c      	mov	r4, r1
 8006046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800604a:	f000 f82d 	bl	80060a8 <_lseek_r>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	bf15      	itete	ne
 8006054:	6560      	strne	r0, [r4, #84]	; 0x54
 8006056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800605a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800605e:	81a3      	strheq	r3, [r4, #12]
 8006060:	bf18      	it	ne
 8006062:	81a3      	strhne	r3, [r4, #12]
 8006064:	bd10      	pop	{r4, pc}

08006066 <__sclose>:
 8006066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800606a:	f000 b80d 	b.w	8006088 <_close_r>

0800606e <memset>:
 800606e:	4402      	add	r2, r0
 8006070:	4603      	mov	r3, r0
 8006072:	4293      	cmp	r3, r2
 8006074:	d100      	bne.n	8006078 <memset+0xa>
 8006076:	4770      	bx	lr
 8006078:	f803 1b01 	strb.w	r1, [r3], #1
 800607c:	e7f9      	b.n	8006072 <memset+0x4>
	...

08006080 <_localeconv_r>:
 8006080:	4800      	ldr	r0, [pc, #0]	; (8006084 <_localeconv_r+0x4>)
 8006082:	4770      	bx	lr
 8006084:	20000158 	.word	0x20000158

08006088 <_close_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d06      	ldr	r5, [pc, #24]	; (80060a4 <_close_r+0x1c>)
 800608c:	2300      	movs	r3, #0
 800608e:	4604      	mov	r4, r0
 8006090:	4608      	mov	r0, r1
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	f7fb fabf 	bl	8001616 <_close>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_close_r+0x1a>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_close_r+0x1a>
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	200005f0 	.word	0x200005f0

080060a8 <_lseek_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d07      	ldr	r5, [pc, #28]	; (80060c8 <_lseek_r+0x20>)
 80060ac:	4604      	mov	r4, r0
 80060ae:	4608      	mov	r0, r1
 80060b0:	4611      	mov	r1, r2
 80060b2:	2200      	movs	r2, #0
 80060b4:	602a      	str	r2, [r5, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f7fb fad4 	bl	8001664 <_lseek>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_lseek_r+0x1e>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_lseek_r+0x1e>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	200005f0 	.word	0x200005f0

080060cc <_read_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4d07      	ldr	r5, [pc, #28]	; (80060ec <_read_r+0x20>)
 80060d0:	4604      	mov	r4, r0
 80060d2:	4608      	mov	r0, r1
 80060d4:	4611      	mov	r1, r2
 80060d6:	2200      	movs	r2, #0
 80060d8:	602a      	str	r2, [r5, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	f7fb fa62 	bl	80015a4 <_read>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d102      	bne.n	80060ea <_read_r+0x1e>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b103      	cbz	r3, 80060ea <_read_r+0x1e>
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	200005f0 	.word	0x200005f0

080060f0 <_write_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d07      	ldr	r5, [pc, #28]	; (8006110 <_write_r+0x20>)
 80060f4:	4604      	mov	r4, r0
 80060f6:	4608      	mov	r0, r1
 80060f8:	4611      	mov	r1, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	602a      	str	r2, [r5, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f7fb fa6d 	bl	80015de <_write>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_write_r+0x1e>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_write_r+0x1e>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	200005f0 	.word	0x200005f0

08006114 <__errno>:
 8006114:	4b01      	ldr	r3, [pc, #4]	; (800611c <__errno+0x8>)
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	20000064 	.word	0x20000064

08006120 <__libc_init_array>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	4d0d      	ldr	r5, [pc, #52]	; (8006158 <__libc_init_array+0x38>)
 8006124:	4c0d      	ldr	r4, [pc, #52]	; (800615c <__libc_init_array+0x3c>)
 8006126:	1b64      	subs	r4, r4, r5
 8006128:	10a4      	asrs	r4, r4, #2
 800612a:	2600      	movs	r6, #0
 800612c:	42a6      	cmp	r6, r4
 800612e:	d109      	bne.n	8006144 <__libc_init_array+0x24>
 8006130:	4d0b      	ldr	r5, [pc, #44]	; (8006160 <__libc_init_array+0x40>)
 8006132:	4c0c      	ldr	r4, [pc, #48]	; (8006164 <__libc_init_array+0x44>)
 8006134:	f002 f896 	bl	8008264 <_init>
 8006138:	1b64      	subs	r4, r4, r5
 800613a:	10a4      	asrs	r4, r4, #2
 800613c:	2600      	movs	r6, #0
 800613e:	42a6      	cmp	r6, r4
 8006140:	d105      	bne.n	800614e <__libc_init_array+0x2e>
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	f855 3b04 	ldr.w	r3, [r5], #4
 8006148:	4798      	blx	r3
 800614a:	3601      	adds	r6, #1
 800614c:	e7ee      	b.n	800612c <__libc_init_array+0xc>
 800614e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006152:	4798      	blx	r3
 8006154:	3601      	adds	r6, #1
 8006156:	e7f2      	b.n	800613e <__libc_init_array+0x1e>
 8006158:	08008e7c 	.word	0x08008e7c
 800615c:	08008e7c 	.word	0x08008e7c
 8006160:	08008e7c 	.word	0x08008e7c
 8006164:	08008e80 	.word	0x08008e80

08006168 <__retarget_lock_init_recursive>:
 8006168:	4770      	bx	lr

0800616a <__retarget_lock_acquire_recursive>:
 800616a:	4770      	bx	lr

0800616c <__retarget_lock_release_recursive>:
 800616c:	4770      	bx	lr

0800616e <memcpy>:
 800616e:	440a      	add	r2, r1
 8006170:	4291      	cmp	r1, r2
 8006172:	f100 33ff 	add.w	r3, r0, #4294967295
 8006176:	d100      	bne.n	800617a <memcpy+0xc>
 8006178:	4770      	bx	lr
 800617a:	b510      	push	{r4, lr}
 800617c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006184:	4291      	cmp	r1, r2
 8006186:	d1f9      	bne.n	800617c <memcpy+0xe>
 8006188:	bd10      	pop	{r4, pc}

0800618a <quorem>:
 800618a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618e:	6903      	ldr	r3, [r0, #16]
 8006190:	690c      	ldr	r4, [r1, #16]
 8006192:	42a3      	cmp	r3, r4
 8006194:	4607      	mov	r7, r0
 8006196:	db7e      	blt.n	8006296 <quorem+0x10c>
 8006198:	3c01      	subs	r4, #1
 800619a:	f101 0814 	add.w	r8, r1, #20
 800619e:	f100 0514 	add.w	r5, r0, #20
 80061a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061b0:	3301      	adds	r3, #1
 80061b2:	429a      	cmp	r2, r3
 80061b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80061c0:	d331      	bcc.n	8006226 <quorem+0x9c>
 80061c2:	f04f 0e00 	mov.w	lr, #0
 80061c6:	4640      	mov	r0, r8
 80061c8:	46ac      	mov	ip, r5
 80061ca:	46f2      	mov	sl, lr
 80061cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80061d0:	b293      	uxth	r3, r2
 80061d2:	fb06 e303 	mla	r3, r6, r3, lr
 80061d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061da:	0c1a      	lsrs	r2, r3, #16
 80061dc:	b29b      	uxth	r3, r3
 80061de:	ebaa 0303 	sub.w	r3, sl, r3
 80061e2:	f8dc a000 	ldr.w	sl, [ip]
 80061e6:	fa13 f38a 	uxtah	r3, r3, sl
 80061ea:	fb06 220e 	mla	r2, r6, lr, r2
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	9b00      	ldr	r3, [sp, #0]
 80061f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061f6:	b292      	uxth	r2, r2
 80061f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006200:	f8bd 3000 	ldrh.w	r3, [sp]
 8006204:	4581      	cmp	r9, r0
 8006206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800620a:	f84c 3b04 	str.w	r3, [ip], #4
 800620e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006212:	d2db      	bcs.n	80061cc <quorem+0x42>
 8006214:	f855 300b 	ldr.w	r3, [r5, fp]
 8006218:	b92b      	cbnz	r3, 8006226 <quorem+0x9c>
 800621a:	9b01      	ldr	r3, [sp, #4]
 800621c:	3b04      	subs	r3, #4
 800621e:	429d      	cmp	r5, r3
 8006220:	461a      	mov	r2, r3
 8006222:	d32c      	bcc.n	800627e <quorem+0xf4>
 8006224:	613c      	str	r4, [r7, #16]
 8006226:	4638      	mov	r0, r7
 8006228:	f001 f9a8 	bl	800757c <__mcmp>
 800622c:	2800      	cmp	r0, #0
 800622e:	db22      	blt.n	8006276 <quorem+0xec>
 8006230:	3601      	adds	r6, #1
 8006232:	4629      	mov	r1, r5
 8006234:	2000      	movs	r0, #0
 8006236:	f858 2b04 	ldr.w	r2, [r8], #4
 800623a:	f8d1 c000 	ldr.w	ip, [r1]
 800623e:	b293      	uxth	r3, r2
 8006240:	1ac3      	subs	r3, r0, r3
 8006242:	0c12      	lsrs	r2, r2, #16
 8006244:	fa13 f38c 	uxtah	r3, r3, ip
 8006248:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800624c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006250:	b29b      	uxth	r3, r3
 8006252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006256:	45c1      	cmp	r9, r8
 8006258:	f841 3b04 	str.w	r3, [r1], #4
 800625c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006260:	d2e9      	bcs.n	8006236 <quorem+0xac>
 8006262:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006266:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800626a:	b922      	cbnz	r2, 8006276 <quorem+0xec>
 800626c:	3b04      	subs	r3, #4
 800626e:	429d      	cmp	r5, r3
 8006270:	461a      	mov	r2, r3
 8006272:	d30a      	bcc.n	800628a <quorem+0x100>
 8006274:	613c      	str	r4, [r7, #16]
 8006276:	4630      	mov	r0, r6
 8006278:	b003      	add	sp, #12
 800627a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	3b04      	subs	r3, #4
 8006282:	2a00      	cmp	r2, #0
 8006284:	d1ce      	bne.n	8006224 <quorem+0x9a>
 8006286:	3c01      	subs	r4, #1
 8006288:	e7c9      	b.n	800621e <quorem+0x94>
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	3b04      	subs	r3, #4
 800628e:	2a00      	cmp	r2, #0
 8006290:	d1f0      	bne.n	8006274 <quorem+0xea>
 8006292:	3c01      	subs	r4, #1
 8006294:	e7eb      	b.n	800626e <quorem+0xe4>
 8006296:	2000      	movs	r0, #0
 8006298:	e7ee      	b.n	8006278 <quorem+0xee>
 800629a:	0000      	movs	r0, r0
 800629c:	0000      	movs	r0, r0
	...

080062a0 <_dtoa_r>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	ed2d 8b04 	vpush	{d8-d9}
 80062a8:	69c5      	ldr	r5, [r0, #28]
 80062aa:	b093      	sub	sp, #76	; 0x4c
 80062ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80062b0:	ec57 6b10 	vmov	r6, r7, d0
 80062b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062b8:	9107      	str	r1, [sp, #28]
 80062ba:	4604      	mov	r4, r0
 80062bc:	920a      	str	r2, [sp, #40]	; 0x28
 80062be:	930d      	str	r3, [sp, #52]	; 0x34
 80062c0:	b975      	cbnz	r5, 80062e0 <_dtoa_r+0x40>
 80062c2:	2010      	movs	r0, #16
 80062c4:	f000 fe2a 	bl	8006f1c <malloc>
 80062c8:	4602      	mov	r2, r0
 80062ca:	61e0      	str	r0, [r4, #28]
 80062cc:	b920      	cbnz	r0, 80062d8 <_dtoa_r+0x38>
 80062ce:	4bae      	ldr	r3, [pc, #696]	; (8006588 <_dtoa_r+0x2e8>)
 80062d0:	21ef      	movs	r1, #239	; 0xef
 80062d2:	48ae      	ldr	r0, [pc, #696]	; (800658c <_dtoa_r+0x2ec>)
 80062d4:	f001 fc82 	bl	8007bdc <__assert_func>
 80062d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062dc:	6005      	str	r5, [r0, #0]
 80062de:	60c5      	str	r5, [r0, #12]
 80062e0:	69e3      	ldr	r3, [r4, #28]
 80062e2:	6819      	ldr	r1, [r3, #0]
 80062e4:	b151      	cbz	r1, 80062fc <_dtoa_r+0x5c>
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	604a      	str	r2, [r1, #4]
 80062ea:	2301      	movs	r3, #1
 80062ec:	4093      	lsls	r3, r2
 80062ee:	608b      	str	r3, [r1, #8]
 80062f0:	4620      	mov	r0, r4
 80062f2:	f000 ff07 	bl	8007104 <_Bfree>
 80062f6:	69e3      	ldr	r3, [r4, #28]
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	1e3b      	subs	r3, r7, #0
 80062fe:	bfbb      	ittet	lt
 8006300:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006304:	9303      	strlt	r3, [sp, #12]
 8006306:	2300      	movge	r3, #0
 8006308:	2201      	movlt	r2, #1
 800630a:	bfac      	ite	ge
 800630c:	f8c8 3000 	strge.w	r3, [r8]
 8006310:	f8c8 2000 	strlt.w	r2, [r8]
 8006314:	4b9e      	ldr	r3, [pc, #632]	; (8006590 <_dtoa_r+0x2f0>)
 8006316:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800631a:	ea33 0308 	bics.w	r3, r3, r8
 800631e:	d11b      	bne.n	8006358 <_dtoa_r+0xb8>
 8006320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006322:	f242 730f 	movw	r3, #9999	; 0x270f
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800632c:	4333      	orrs	r3, r6
 800632e:	f000 8593 	beq.w	8006e58 <_dtoa_r+0xbb8>
 8006332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006334:	b963      	cbnz	r3, 8006350 <_dtoa_r+0xb0>
 8006336:	4b97      	ldr	r3, [pc, #604]	; (8006594 <_dtoa_r+0x2f4>)
 8006338:	e027      	b.n	800638a <_dtoa_r+0xea>
 800633a:	4b97      	ldr	r3, [pc, #604]	; (8006598 <_dtoa_r+0x2f8>)
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	3308      	adds	r3, #8
 8006340:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	9800      	ldr	r0, [sp, #0]
 8006346:	b013      	add	sp, #76	; 0x4c
 8006348:	ecbd 8b04 	vpop	{d8-d9}
 800634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006350:	4b90      	ldr	r3, [pc, #576]	; (8006594 <_dtoa_r+0x2f4>)
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	3303      	adds	r3, #3
 8006356:	e7f3      	b.n	8006340 <_dtoa_r+0xa0>
 8006358:	ed9d 7b02 	vldr	d7, [sp, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	ec51 0b17 	vmov	r0, r1, d7
 8006362:	eeb0 8a47 	vmov.f32	s16, s14
 8006366:	eef0 8a67 	vmov.f32	s17, s15
 800636a:	2300      	movs	r3, #0
 800636c:	f7fa fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006370:	4681      	mov	r9, r0
 8006372:	b160      	cbz	r0, 800638e <_dtoa_r+0xee>
 8006374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006376:	2301      	movs	r3, #1
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8568 	beq.w	8006e52 <_dtoa_r+0xbb2>
 8006382:	4b86      	ldr	r3, [pc, #536]	; (800659c <_dtoa_r+0x2fc>)
 8006384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	3b01      	subs	r3, #1
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	e7da      	b.n	8006344 <_dtoa_r+0xa4>
 800638e:	aa10      	add	r2, sp, #64	; 0x40
 8006390:	a911      	add	r1, sp, #68	; 0x44
 8006392:	4620      	mov	r0, r4
 8006394:	eeb0 0a48 	vmov.f32	s0, s16
 8006398:	eef0 0a68 	vmov.f32	s1, s17
 800639c:	f001 f994 	bl	80076c8 <__d2b>
 80063a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80063a4:	4682      	mov	sl, r0
 80063a6:	2d00      	cmp	r5, #0
 80063a8:	d07f      	beq.n	80064aa <_dtoa_r+0x20a>
 80063aa:	ee18 3a90 	vmov	r3, s17
 80063ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80063b6:	ec51 0b18 	vmov	r0, r1, d8
 80063ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80063c6:	4619      	mov	r1, r3
 80063c8:	2200      	movs	r2, #0
 80063ca:	4b75      	ldr	r3, [pc, #468]	; (80065a0 <_dtoa_r+0x300>)
 80063cc:	f7f9 ff5c 	bl	8000288 <__aeabi_dsub>
 80063d0:	a367      	add	r3, pc, #412	; (adr r3, 8006570 <_dtoa_r+0x2d0>)
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f7fa f90f 	bl	80005f8 <__aeabi_dmul>
 80063da:	a367      	add	r3, pc, #412	; (adr r3, 8006578 <_dtoa_r+0x2d8>)
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	f7f9 ff54 	bl	800028c <__adddf3>
 80063e4:	4606      	mov	r6, r0
 80063e6:	4628      	mov	r0, r5
 80063e8:	460f      	mov	r7, r1
 80063ea:	f7fa f89b 	bl	8000524 <__aeabi_i2d>
 80063ee:	a364      	add	r3, pc, #400	; (adr r3, 8006580 <_dtoa_r+0x2e0>)
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f7fa f900 	bl	80005f8 <__aeabi_dmul>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4630      	mov	r0, r6
 80063fe:	4639      	mov	r1, r7
 8006400:	f7f9 ff44 	bl	800028c <__adddf3>
 8006404:	4606      	mov	r6, r0
 8006406:	460f      	mov	r7, r1
 8006408:	f7fa fba6 	bl	8000b58 <__aeabi_d2iz>
 800640c:	2200      	movs	r2, #0
 800640e:	4683      	mov	fp, r0
 8006410:	2300      	movs	r3, #0
 8006412:	4630      	mov	r0, r6
 8006414:	4639      	mov	r1, r7
 8006416:	f7fa fb61 	bl	8000adc <__aeabi_dcmplt>
 800641a:	b148      	cbz	r0, 8006430 <_dtoa_r+0x190>
 800641c:	4658      	mov	r0, fp
 800641e:	f7fa f881 	bl	8000524 <__aeabi_i2d>
 8006422:	4632      	mov	r2, r6
 8006424:	463b      	mov	r3, r7
 8006426:	f7fa fb4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800642a:	b908      	cbnz	r0, 8006430 <_dtoa_r+0x190>
 800642c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006430:	f1bb 0f16 	cmp.w	fp, #22
 8006434:	d857      	bhi.n	80064e6 <_dtoa_r+0x246>
 8006436:	4b5b      	ldr	r3, [pc, #364]	; (80065a4 <_dtoa_r+0x304>)
 8006438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	ec51 0b18 	vmov	r0, r1, d8
 8006444:	f7fa fb4a 	bl	8000adc <__aeabi_dcmplt>
 8006448:	2800      	cmp	r0, #0
 800644a:	d04e      	beq.n	80064ea <_dtoa_r+0x24a>
 800644c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006450:	2300      	movs	r3, #0
 8006452:	930c      	str	r3, [sp, #48]	; 0x30
 8006454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006456:	1b5b      	subs	r3, r3, r5
 8006458:	1e5a      	subs	r2, r3, #1
 800645a:	bf45      	ittet	mi
 800645c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006460:	9305      	strmi	r3, [sp, #20]
 8006462:	2300      	movpl	r3, #0
 8006464:	2300      	movmi	r3, #0
 8006466:	9206      	str	r2, [sp, #24]
 8006468:	bf54      	ite	pl
 800646a:	9305      	strpl	r3, [sp, #20]
 800646c:	9306      	strmi	r3, [sp, #24]
 800646e:	f1bb 0f00 	cmp.w	fp, #0
 8006472:	db3c      	blt.n	80064ee <_dtoa_r+0x24e>
 8006474:	9b06      	ldr	r3, [sp, #24]
 8006476:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800647a:	445b      	add	r3, fp
 800647c:	9306      	str	r3, [sp, #24]
 800647e:	2300      	movs	r3, #0
 8006480:	9308      	str	r3, [sp, #32]
 8006482:	9b07      	ldr	r3, [sp, #28]
 8006484:	2b09      	cmp	r3, #9
 8006486:	d868      	bhi.n	800655a <_dtoa_r+0x2ba>
 8006488:	2b05      	cmp	r3, #5
 800648a:	bfc4      	itt	gt
 800648c:	3b04      	subgt	r3, #4
 800648e:	9307      	strgt	r3, [sp, #28]
 8006490:	9b07      	ldr	r3, [sp, #28]
 8006492:	f1a3 0302 	sub.w	r3, r3, #2
 8006496:	bfcc      	ite	gt
 8006498:	2500      	movgt	r5, #0
 800649a:	2501      	movle	r5, #1
 800649c:	2b03      	cmp	r3, #3
 800649e:	f200 8085 	bhi.w	80065ac <_dtoa_r+0x30c>
 80064a2:	e8df f003 	tbb	[pc, r3]
 80064a6:	3b2e      	.short	0x3b2e
 80064a8:	5839      	.short	0x5839
 80064aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80064ae:	441d      	add	r5, r3
 80064b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	bfc1      	itttt	gt
 80064b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80064c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80064c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80064c8:	bfd6      	itet	le
 80064ca:	f1c3 0320 	rsble	r3, r3, #32
 80064ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80064d2:	fa06 f003 	lslle.w	r0, r6, r3
 80064d6:	f7fa f815 	bl	8000504 <__aeabi_ui2d>
 80064da:	2201      	movs	r2, #1
 80064dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80064e0:	3d01      	subs	r5, #1
 80064e2:	920e      	str	r2, [sp, #56]	; 0x38
 80064e4:	e76f      	b.n	80063c6 <_dtoa_r+0x126>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e7b3      	b.n	8006452 <_dtoa_r+0x1b2>
 80064ea:	900c      	str	r0, [sp, #48]	; 0x30
 80064ec:	e7b2      	b.n	8006454 <_dtoa_r+0x1b4>
 80064ee:	9b05      	ldr	r3, [sp, #20]
 80064f0:	eba3 030b 	sub.w	r3, r3, fp
 80064f4:	9305      	str	r3, [sp, #20]
 80064f6:	f1cb 0300 	rsb	r3, fp, #0
 80064fa:	9308      	str	r3, [sp, #32]
 80064fc:	2300      	movs	r3, #0
 80064fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006500:	e7bf      	b.n	8006482 <_dtoa_r+0x1e2>
 8006502:	2300      	movs	r3, #0
 8006504:	9309      	str	r3, [sp, #36]	; 0x24
 8006506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006508:	2b00      	cmp	r3, #0
 800650a:	dc52      	bgt.n	80065b2 <_dtoa_r+0x312>
 800650c:	2301      	movs	r3, #1
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	9304      	str	r3, [sp, #16]
 8006512:	461a      	mov	r2, r3
 8006514:	920a      	str	r2, [sp, #40]	; 0x28
 8006516:	e00b      	b.n	8006530 <_dtoa_r+0x290>
 8006518:	2301      	movs	r3, #1
 800651a:	e7f3      	b.n	8006504 <_dtoa_r+0x264>
 800651c:	2300      	movs	r3, #0
 800651e:	9309      	str	r3, [sp, #36]	; 0x24
 8006520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006522:	445b      	add	r3, fp
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	3301      	adds	r3, #1
 8006528:	2b01      	cmp	r3, #1
 800652a:	9304      	str	r3, [sp, #16]
 800652c:	bfb8      	it	lt
 800652e:	2301      	movlt	r3, #1
 8006530:	69e0      	ldr	r0, [r4, #28]
 8006532:	2100      	movs	r1, #0
 8006534:	2204      	movs	r2, #4
 8006536:	f102 0614 	add.w	r6, r2, #20
 800653a:	429e      	cmp	r6, r3
 800653c:	d93d      	bls.n	80065ba <_dtoa_r+0x31a>
 800653e:	6041      	str	r1, [r0, #4]
 8006540:	4620      	mov	r0, r4
 8006542:	f000 fd9f 	bl	8007084 <_Balloc>
 8006546:	9000      	str	r0, [sp, #0]
 8006548:	2800      	cmp	r0, #0
 800654a:	d139      	bne.n	80065c0 <_dtoa_r+0x320>
 800654c:	4b16      	ldr	r3, [pc, #88]	; (80065a8 <_dtoa_r+0x308>)
 800654e:	4602      	mov	r2, r0
 8006550:	f240 11af 	movw	r1, #431	; 0x1af
 8006554:	e6bd      	b.n	80062d2 <_dtoa_r+0x32>
 8006556:	2301      	movs	r3, #1
 8006558:	e7e1      	b.n	800651e <_dtoa_r+0x27e>
 800655a:	2501      	movs	r5, #1
 800655c:	2300      	movs	r3, #0
 800655e:	9307      	str	r3, [sp, #28]
 8006560:	9509      	str	r5, [sp, #36]	; 0x24
 8006562:	f04f 33ff 	mov.w	r3, #4294967295
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	9304      	str	r3, [sp, #16]
 800656a:	2200      	movs	r2, #0
 800656c:	2312      	movs	r3, #18
 800656e:	e7d1      	b.n	8006514 <_dtoa_r+0x274>
 8006570:	636f4361 	.word	0x636f4361
 8006574:	3fd287a7 	.word	0x3fd287a7
 8006578:	8b60c8b3 	.word	0x8b60c8b3
 800657c:	3fc68a28 	.word	0x3fc68a28
 8006580:	509f79fb 	.word	0x509f79fb
 8006584:	3fd34413 	.word	0x3fd34413
 8006588:	08008b41 	.word	0x08008b41
 800658c:	08008b58 	.word	0x08008b58
 8006590:	7ff00000 	.word	0x7ff00000
 8006594:	08008b3d 	.word	0x08008b3d
 8006598:	08008b34 	.word	0x08008b34
 800659c:	08008b11 	.word	0x08008b11
 80065a0:	3ff80000 	.word	0x3ff80000
 80065a4:	08008c48 	.word	0x08008c48
 80065a8:	08008bb0 	.word	0x08008bb0
 80065ac:	2301      	movs	r3, #1
 80065ae:	9309      	str	r3, [sp, #36]	; 0x24
 80065b0:	e7d7      	b.n	8006562 <_dtoa_r+0x2c2>
 80065b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	9304      	str	r3, [sp, #16]
 80065b8:	e7ba      	b.n	8006530 <_dtoa_r+0x290>
 80065ba:	3101      	adds	r1, #1
 80065bc:	0052      	lsls	r2, r2, #1
 80065be:	e7ba      	b.n	8006536 <_dtoa_r+0x296>
 80065c0:	69e3      	ldr	r3, [r4, #28]
 80065c2:	9a00      	ldr	r2, [sp, #0]
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	9b04      	ldr	r3, [sp, #16]
 80065c8:	2b0e      	cmp	r3, #14
 80065ca:	f200 80a8 	bhi.w	800671e <_dtoa_r+0x47e>
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	f000 80a5 	beq.w	800671e <_dtoa_r+0x47e>
 80065d4:	f1bb 0f00 	cmp.w	fp, #0
 80065d8:	dd38      	ble.n	800664c <_dtoa_r+0x3ac>
 80065da:	4bc0      	ldr	r3, [pc, #768]	; (80068dc <_dtoa_r+0x63c>)
 80065dc:	f00b 020f 	and.w	r2, fp, #15
 80065e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80065e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80065ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80065f0:	d019      	beq.n	8006626 <_dtoa_r+0x386>
 80065f2:	4bbb      	ldr	r3, [pc, #748]	; (80068e0 <_dtoa_r+0x640>)
 80065f4:	ec51 0b18 	vmov	r0, r1, d8
 80065f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065fc:	f7fa f926 	bl	800084c <__aeabi_ddiv>
 8006600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006604:	f008 080f 	and.w	r8, r8, #15
 8006608:	2503      	movs	r5, #3
 800660a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80068e0 <_dtoa_r+0x640>
 800660e:	f1b8 0f00 	cmp.w	r8, #0
 8006612:	d10a      	bne.n	800662a <_dtoa_r+0x38a>
 8006614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006618:	4632      	mov	r2, r6
 800661a:	463b      	mov	r3, r7
 800661c:	f7fa f916 	bl	800084c <__aeabi_ddiv>
 8006620:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006624:	e02b      	b.n	800667e <_dtoa_r+0x3de>
 8006626:	2502      	movs	r5, #2
 8006628:	e7ef      	b.n	800660a <_dtoa_r+0x36a>
 800662a:	f018 0f01 	tst.w	r8, #1
 800662e:	d008      	beq.n	8006642 <_dtoa_r+0x3a2>
 8006630:	4630      	mov	r0, r6
 8006632:	4639      	mov	r1, r7
 8006634:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006638:	f7f9 ffde 	bl	80005f8 <__aeabi_dmul>
 800663c:	3501      	adds	r5, #1
 800663e:	4606      	mov	r6, r0
 8006640:	460f      	mov	r7, r1
 8006642:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006646:	f109 0908 	add.w	r9, r9, #8
 800664a:	e7e0      	b.n	800660e <_dtoa_r+0x36e>
 800664c:	f000 809f 	beq.w	800678e <_dtoa_r+0x4ee>
 8006650:	f1cb 0600 	rsb	r6, fp, #0
 8006654:	4ba1      	ldr	r3, [pc, #644]	; (80068dc <_dtoa_r+0x63c>)
 8006656:	4fa2      	ldr	r7, [pc, #648]	; (80068e0 <_dtoa_r+0x640>)
 8006658:	f006 020f 	and.w	r2, r6, #15
 800665c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	ec51 0b18 	vmov	r0, r1, d8
 8006668:	f7f9 ffc6 	bl	80005f8 <__aeabi_dmul>
 800666c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006670:	1136      	asrs	r6, r6, #4
 8006672:	2300      	movs	r3, #0
 8006674:	2502      	movs	r5, #2
 8006676:	2e00      	cmp	r6, #0
 8006678:	d17e      	bne.n	8006778 <_dtoa_r+0x4d8>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1d0      	bne.n	8006620 <_dtoa_r+0x380>
 800667e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006680:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8084 	beq.w	8006792 <_dtoa_r+0x4f2>
 800668a:	4b96      	ldr	r3, [pc, #600]	; (80068e4 <_dtoa_r+0x644>)
 800668c:	2200      	movs	r2, #0
 800668e:	4640      	mov	r0, r8
 8006690:	4649      	mov	r1, r9
 8006692:	f7fa fa23 	bl	8000adc <__aeabi_dcmplt>
 8006696:	2800      	cmp	r0, #0
 8006698:	d07b      	beq.n	8006792 <_dtoa_r+0x4f2>
 800669a:	9b04      	ldr	r3, [sp, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d078      	beq.n	8006792 <_dtoa_r+0x4f2>
 80066a0:	9b01      	ldr	r3, [sp, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dd39      	ble.n	800671a <_dtoa_r+0x47a>
 80066a6:	4b90      	ldr	r3, [pc, #576]	; (80068e8 <_dtoa_r+0x648>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	4640      	mov	r0, r8
 80066ac:	4649      	mov	r1, r9
 80066ae:	f7f9 ffa3 	bl	80005f8 <__aeabi_dmul>
 80066b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066b6:	9e01      	ldr	r6, [sp, #4]
 80066b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80066bc:	3501      	adds	r5, #1
 80066be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80066c2:	4628      	mov	r0, r5
 80066c4:	f7f9 ff2e 	bl	8000524 <__aeabi_i2d>
 80066c8:	4642      	mov	r2, r8
 80066ca:	464b      	mov	r3, r9
 80066cc:	f7f9 ff94 	bl	80005f8 <__aeabi_dmul>
 80066d0:	4b86      	ldr	r3, [pc, #536]	; (80068ec <_dtoa_r+0x64c>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	f7f9 fdda 	bl	800028c <__adddf3>
 80066d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80066dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e0:	9303      	str	r3, [sp, #12]
 80066e2:	2e00      	cmp	r6, #0
 80066e4:	d158      	bne.n	8006798 <_dtoa_r+0x4f8>
 80066e6:	4b82      	ldr	r3, [pc, #520]	; (80068f0 <_dtoa_r+0x650>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	4640      	mov	r0, r8
 80066ec:	4649      	mov	r1, r9
 80066ee:	f7f9 fdcb 	bl	8000288 <__aeabi_dsub>
 80066f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f6:	4680      	mov	r8, r0
 80066f8:	4689      	mov	r9, r1
 80066fa:	f7fa fa0d 	bl	8000b18 <__aeabi_dcmpgt>
 80066fe:	2800      	cmp	r0, #0
 8006700:	f040 8296 	bne.w	8006c30 <_dtoa_r+0x990>
 8006704:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006708:	4640      	mov	r0, r8
 800670a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800670e:	4649      	mov	r1, r9
 8006710:	f7fa f9e4 	bl	8000adc <__aeabi_dcmplt>
 8006714:	2800      	cmp	r0, #0
 8006716:	f040 8289 	bne.w	8006c2c <_dtoa_r+0x98c>
 800671a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800671e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006720:	2b00      	cmp	r3, #0
 8006722:	f2c0 814e 	blt.w	80069c2 <_dtoa_r+0x722>
 8006726:	f1bb 0f0e 	cmp.w	fp, #14
 800672a:	f300 814a 	bgt.w	80069c2 <_dtoa_r+0x722>
 800672e:	4b6b      	ldr	r3, [pc, #428]	; (80068dc <_dtoa_r+0x63c>)
 8006730:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673a:	2b00      	cmp	r3, #0
 800673c:	f280 80dc 	bge.w	80068f8 <_dtoa_r+0x658>
 8006740:	9b04      	ldr	r3, [sp, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	f300 80d8 	bgt.w	80068f8 <_dtoa_r+0x658>
 8006748:	f040 826f 	bne.w	8006c2a <_dtoa_r+0x98a>
 800674c:	4b68      	ldr	r3, [pc, #416]	; (80068f0 <_dtoa_r+0x650>)
 800674e:	2200      	movs	r2, #0
 8006750:	4640      	mov	r0, r8
 8006752:	4649      	mov	r1, r9
 8006754:	f7f9 ff50 	bl	80005f8 <__aeabi_dmul>
 8006758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800675c:	f7fa f9d2 	bl	8000b04 <__aeabi_dcmpge>
 8006760:	9e04      	ldr	r6, [sp, #16]
 8006762:	4637      	mov	r7, r6
 8006764:	2800      	cmp	r0, #0
 8006766:	f040 8245 	bne.w	8006bf4 <_dtoa_r+0x954>
 800676a:	9d00      	ldr	r5, [sp, #0]
 800676c:	2331      	movs	r3, #49	; 0x31
 800676e:	f805 3b01 	strb.w	r3, [r5], #1
 8006772:	f10b 0b01 	add.w	fp, fp, #1
 8006776:	e241      	b.n	8006bfc <_dtoa_r+0x95c>
 8006778:	07f2      	lsls	r2, r6, #31
 800677a:	d505      	bpl.n	8006788 <_dtoa_r+0x4e8>
 800677c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006780:	f7f9 ff3a 	bl	80005f8 <__aeabi_dmul>
 8006784:	3501      	adds	r5, #1
 8006786:	2301      	movs	r3, #1
 8006788:	1076      	asrs	r6, r6, #1
 800678a:	3708      	adds	r7, #8
 800678c:	e773      	b.n	8006676 <_dtoa_r+0x3d6>
 800678e:	2502      	movs	r5, #2
 8006790:	e775      	b.n	800667e <_dtoa_r+0x3de>
 8006792:	9e04      	ldr	r6, [sp, #16]
 8006794:	465f      	mov	r7, fp
 8006796:	e792      	b.n	80066be <_dtoa_r+0x41e>
 8006798:	9900      	ldr	r1, [sp, #0]
 800679a:	4b50      	ldr	r3, [pc, #320]	; (80068dc <_dtoa_r+0x63c>)
 800679c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067a0:	4431      	add	r1, r6
 80067a2:	9102      	str	r1, [sp, #8]
 80067a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067a6:	eeb0 9a47 	vmov.f32	s18, s14
 80067aa:	eef0 9a67 	vmov.f32	s19, s15
 80067ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80067b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067b6:	2900      	cmp	r1, #0
 80067b8:	d044      	beq.n	8006844 <_dtoa_r+0x5a4>
 80067ba:	494e      	ldr	r1, [pc, #312]	; (80068f4 <_dtoa_r+0x654>)
 80067bc:	2000      	movs	r0, #0
 80067be:	f7fa f845 	bl	800084c <__aeabi_ddiv>
 80067c2:	ec53 2b19 	vmov	r2, r3, d9
 80067c6:	f7f9 fd5f 	bl	8000288 <__aeabi_dsub>
 80067ca:	9d00      	ldr	r5, [sp, #0]
 80067cc:	ec41 0b19 	vmov	d9, r0, r1
 80067d0:	4649      	mov	r1, r9
 80067d2:	4640      	mov	r0, r8
 80067d4:	f7fa f9c0 	bl	8000b58 <__aeabi_d2iz>
 80067d8:	4606      	mov	r6, r0
 80067da:	f7f9 fea3 	bl	8000524 <__aeabi_i2d>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4640      	mov	r0, r8
 80067e4:	4649      	mov	r1, r9
 80067e6:	f7f9 fd4f 	bl	8000288 <__aeabi_dsub>
 80067ea:	3630      	adds	r6, #48	; 0x30
 80067ec:	f805 6b01 	strb.w	r6, [r5], #1
 80067f0:	ec53 2b19 	vmov	r2, r3, d9
 80067f4:	4680      	mov	r8, r0
 80067f6:	4689      	mov	r9, r1
 80067f8:	f7fa f970 	bl	8000adc <__aeabi_dcmplt>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d164      	bne.n	80068ca <_dtoa_r+0x62a>
 8006800:	4642      	mov	r2, r8
 8006802:	464b      	mov	r3, r9
 8006804:	4937      	ldr	r1, [pc, #220]	; (80068e4 <_dtoa_r+0x644>)
 8006806:	2000      	movs	r0, #0
 8006808:	f7f9 fd3e 	bl	8000288 <__aeabi_dsub>
 800680c:	ec53 2b19 	vmov	r2, r3, d9
 8006810:	f7fa f964 	bl	8000adc <__aeabi_dcmplt>
 8006814:	2800      	cmp	r0, #0
 8006816:	f040 80b6 	bne.w	8006986 <_dtoa_r+0x6e6>
 800681a:	9b02      	ldr	r3, [sp, #8]
 800681c:	429d      	cmp	r5, r3
 800681e:	f43f af7c 	beq.w	800671a <_dtoa_r+0x47a>
 8006822:	4b31      	ldr	r3, [pc, #196]	; (80068e8 <_dtoa_r+0x648>)
 8006824:	ec51 0b19 	vmov	r0, r1, d9
 8006828:	2200      	movs	r2, #0
 800682a:	f7f9 fee5 	bl	80005f8 <__aeabi_dmul>
 800682e:	4b2e      	ldr	r3, [pc, #184]	; (80068e8 <_dtoa_r+0x648>)
 8006830:	ec41 0b19 	vmov	d9, r0, r1
 8006834:	2200      	movs	r2, #0
 8006836:	4640      	mov	r0, r8
 8006838:	4649      	mov	r1, r9
 800683a:	f7f9 fedd 	bl	80005f8 <__aeabi_dmul>
 800683e:	4680      	mov	r8, r0
 8006840:	4689      	mov	r9, r1
 8006842:	e7c5      	b.n	80067d0 <_dtoa_r+0x530>
 8006844:	ec51 0b17 	vmov	r0, r1, d7
 8006848:	f7f9 fed6 	bl	80005f8 <__aeabi_dmul>
 800684c:	9b02      	ldr	r3, [sp, #8]
 800684e:	9d00      	ldr	r5, [sp, #0]
 8006850:	930f      	str	r3, [sp, #60]	; 0x3c
 8006852:	ec41 0b19 	vmov	d9, r0, r1
 8006856:	4649      	mov	r1, r9
 8006858:	4640      	mov	r0, r8
 800685a:	f7fa f97d 	bl	8000b58 <__aeabi_d2iz>
 800685e:	4606      	mov	r6, r0
 8006860:	f7f9 fe60 	bl	8000524 <__aeabi_i2d>
 8006864:	3630      	adds	r6, #48	; 0x30
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4640      	mov	r0, r8
 800686c:	4649      	mov	r1, r9
 800686e:	f7f9 fd0b 	bl	8000288 <__aeabi_dsub>
 8006872:	f805 6b01 	strb.w	r6, [r5], #1
 8006876:	9b02      	ldr	r3, [sp, #8]
 8006878:	429d      	cmp	r5, r3
 800687a:	4680      	mov	r8, r0
 800687c:	4689      	mov	r9, r1
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	d124      	bne.n	80068ce <_dtoa_r+0x62e>
 8006884:	4b1b      	ldr	r3, [pc, #108]	; (80068f4 <_dtoa_r+0x654>)
 8006886:	ec51 0b19 	vmov	r0, r1, d9
 800688a:	f7f9 fcff 	bl	800028c <__adddf3>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4640      	mov	r0, r8
 8006894:	4649      	mov	r1, r9
 8006896:	f7fa f93f 	bl	8000b18 <__aeabi_dcmpgt>
 800689a:	2800      	cmp	r0, #0
 800689c:	d173      	bne.n	8006986 <_dtoa_r+0x6e6>
 800689e:	ec53 2b19 	vmov	r2, r3, d9
 80068a2:	4914      	ldr	r1, [pc, #80]	; (80068f4 <_dtoa_r+0x654>)
 80068a4:	2000      	movs	r0, #0
 80068a6:	f7f9 fcef 	bl	8000288 <__aeabi_dsub>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4640      	mov	r0, r8
 80068b0:	4649      	mov	r1, r9
 80068b2:	f7fa f913 	bl	8000adc <__aeabi_dcmplt>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	f43f af2f 	beq.w	800671a <_dtoa_r+0x47a>
 80068bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80068be:	1e6b      	subs	r3, r5, #1
 80068c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80068c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068c6:	2b30      	cmp	r3, #48	; 0x30
 80068c8:	d0f8      	beq.n	80068bc <_dtoa_r+0x61c>
 80068ca:	46bb      	mov	fp, r7
 80068cc:	e04a      	b.n	8006964 <_dtoa_r+0x6c4>
 80068ce:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <_dtoa_r+0x648>)
 80068d0:	f7f9 fe92 	bl	80005f8 <__aeabi_dmul>
 80068d4:	4680      	mov	r8, r0
 80068d6:	4689      	mov	r9, r1
 80068d8:	e7bd      	b.n	8006856 <_dtoa_r+0x5b6>
 80068da:	bf00      	nop
 80068dc:	08008c48 	.word	0x08008c48
 80068e0:	08008c20 	.word	0x08008c20
 80068e4:	3ff00000 	.word	0x3ff00000
 80068e8:	40240000 	.word	0x40240000
 80068ec:	401c0000 	.word	0x401c0000
 80068f0:	40140000 	.word	0x40140000
 80068f4:	3fe00000 	.word	0x3fe00000
 80068f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068fc:	9d00      	ldr	r5, [sp, #0]
 80068fe:	4642      	mov	r2, r8
 8006900:	464b      	mov	r3, r9
 8006902:	4630      	mov	r0, r6
 8006904:	4639      	mov	r1, r7
 8006906:	f7f9 ffa1 	bl	800084c <__aeabi_ddiv>
 800690a:	f7fa f925 	bl	8000b58 <__aeabi_d2iz>
 800690e:	9001      	str	r0, [sp, #4]
 8006910:	f7f9 fe08 	bl	8000524 <__aeabi_i2d>
 8006914:	4642      	mov	r2, r8
 8006916:	464b      	mov	r3, r9
 8006918:	f7f9 fe6e 	bl	80005f8 <__aeabi_dmul>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4630      	mov	r0, r6
 8006922:	4639      	mov	r1, r7
 8006924:	f7f9 fcb0 	bl	8000288 <__aeabi_dsub>
 8006928:	9e01      	ldr	r6, [sp, #4]
 800692a:	9f04      	ldr	r7, [sp, #16]
 800692c:	3630      	adds	r6, #48	; 0x30
 800692e:	f805 6b01 	strb.w	r6, [r5], #1
 8006932:	9e00      	ldr	r6, [sp, #0]
 8006934:	1bae      	subs	r6, r5, r6
 8006936:	42b7      	cmp	r7, r6
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	d134      	bne.n	80069a8 <_dtoa_r+0x708>
 800693e:	f7f9 fca5 	bl	800028c <__adddf3>
 8006942:	4642      	mov	r2, r8
 8006944:	464b      	mov	r3, r9
 8006946:	4606      	mov	r6, r0
 8006948:	460f      	mov	r7, r1
 800694a:	f7fa f8e5 	bl	8000b18 <__aeabi_dcmpgt>
 800694e:	b9c8      	cbnz	r0, 8006984 <_dtoa_r+0x6e4>
 8006950:	4642      	mov	r2, r8
 8006952:	464b      	mov	r3, r9
 8006954:	4630      	mov	r0, r6
 8006956:	4639      	mov	r1, r7
 8006958:	f7fa f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800695c:	b110      	cbz	r0, 8006964 <_dtoa_r+0x6c4>
 800695e:	9b01      	ldr	r3, [sp, #4]
 8006960:	07db      	lsls	r3, r3, #31
 8006962:	d40f      	bmi.n	8006984 <_dtoa_r+0x6e4>
 8006964:	4651      	mov	r1, sl
 8006966:	4620      	mov	r0, r4
 8006968:	f000 fbcc 	bl	8007104 <_Bfree>
 800696c:	2300      	movs	r3, #0
 800696e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006970:	702b      	strb	r3, [r5, #0]
 8006972:	f10b 0301 	add.w	r3, fp, #1
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800697a:	2b00      	cmp	r3, #0
 800697c:	f43f ace2 	beq.w	8006344 <_dtoa_r+0xa4>
 8006980:	601d      	str	r5, [r3, #0]
 8006982:	e4df      	b.n	8006344 <_dtoa_r+0xa4>
 8006984:	465f      	mov	r7, fp
 8006986:	462b      	mov	r3, r5
 8006988:	461d      	mov	r5, r3
 800698a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800698e:	2a39      	cmp	r2, #57	; 0x39
 8006990:	d106      	bne.n	80069a0 <_dtoa_r+0x700>
 8006992:	9a00      	ldr	r2, [sp, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	d1f7      	bne.n	8006988 <_dtoa_r+0x6e8>
 8006998:	9900      	ldr	r1, [sp, #0]
 800699a:	2230      	movs	r2, #48	; 0x30
 800699c:	3701      	adds	r7, #1
 800699e:	700a      	strb	r2, [r1, #0]
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	3201      	adds	r2, #1
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	e790      	b.n	80068ca <_dtoa_r+0x62a>
 80069a8:	4ba3      	ldr	r3, [pc, #652]	; (8006c38 <_dtoa_r+0x998>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	f7f9 fe24 	bl	80005f8 <__aeabi_dmul>
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
 80069b4:	4606      	mov	r6, r0
 80069b6:	460f      	mov	r7, r1
 80069b8:	f7fa f886 	bl	8000ac8 <__aeabi_dcmpeq>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d09e      	beq.n	80068fe <_dtoa_r+0x65e>
 80069c0:	e7d0      	b.n	8006964 <_dtoa_r+0x6c4>
 80069c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069c4:	2a00      	cmp	r2, #0
 80069c6:	f000 80ca 	beq.w	8006b5e <_dtoa_r+0x8be>
 80069ca:	9a07      	ldr	r2, [sp, #28]
 80069cc:	2a01      	cmp	r2, #1
 80069ce:	f300 80ad 	bgt.w	8006b2c <_dtoa_r+0x88c>
 80069d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069d4:	2a00      	cmp	r2, #0
 80069d6:	f000 80a5 	beq.w	8006b24 <_dtoa_r+0x884>
 80069da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069de:	9e08      	ldr	r6, [sp, #32]
 80069e0:	9d05      	ldr	r5, [sp, #20]
 80069e2:	9a05      	ldr	r2, [sp, #20]
 80069e4:	441a      	add	r2, r3
 80069e6:	9205      	str	r2, [sp, #20]
 80069e8:	9a06      	ldr	r2, [sp, #24]
 80069ea:	2101      	movs	r1, #1
 80069ec:	441a      	add	r2, r3
 80069ee:	4620      	mov	r0, r4
 80069f0:	9206      	str	r2, [sp, #24]
 80069f2:	f000 fc3d 	bl	8007270 <__i2b>
 80069f6:	4607      	mov	r7, r0
 80069f8:	b165      	cbz	r5, 8006a14 <_dtoa_r+0x774>
 80069fa:	9b06      	ldr	r3, [sp, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	dd09      	ble.n	8006a14 <_dtoa_r+0x774>
 8006a00:	42ab      	cmp	r3, r5
 8006a02:	9a05      	ldr	r2, [sp, #20]
 8006a04:	bfa8      	it	ge
 8006a06:	462b      	movge	r3, r5
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	9205      	str	r2, [sp, #20]
 8006a0c:	9a06      	ldr	r2, [sp, #24]
 8006a0e:	1aed      	subs	r5, r5, r3
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	9306      	str	r3, [sp, #24]
 8006a14:	9b08      	ldr	r3, [sp, #32]
 8006a16:	b1f3      	cbz	r3, 8006a56 <_dtoa_r+0x7b6>
 8006a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 80a3 	beq.w	8006b66 <_dtoa_r+0x8c6>
 8006a20:	2e00      	cmp	r6, #0
 8006a22:	dd10      	ble.n	8006a46 <_dtoa_r+0x7a6>
 8006a24:	4639      	mov	r1, r7
 8006a26:	4632      	mov	r2, r6
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 fce1 	bl	80073f0 <__pow5mult>
 8006a2e:	4652      	mov	r2, sl
 8006a30:	4601      	mov	r1, r0
 8006a32:	4607      	mov	r7, r0
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 fc31 	bl	800729c <__multiply>
 8006a3a:	4651      	mov	r1, sl
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 fb60 	bl	8007104 <_Bfree>
 8006a44:	46c2      	mov	sl, r8
 8006a46:	9b08      	ldr	r3, [sp, #32]
 8006a48:	1b9a      	subs	r2, r3, r6
 8006a4a:	d004      	beq.n	8006a56 <_dtoa_r+0x7b6>
 8006a4c:	4651      	mov	r1, sl
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 fcce 	bl	80073f0 <__pow5mult>
 8006a54:	4682      	mov	sl, r0
 8006a56:	2101      	movs	r1, #1
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f000 fc09 	bl	8007270 <__i2b>
 8006a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	4606      	mov	r6, r0
 8006a64:	f340 8081 	ble.w	8006b6a <_dtoa_r+0x8ca>
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 fcbf 	bl	80073f0 <__pow5mult>
 8006a72:	9b07      	ldr	r3, [sp, #28]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	4606      	mov	r6, r0
 8006a78:	dd7a      	ble.n	8006b70 <_dtoa_r+0x8d0>
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	6933      	ldr	r3, [r6, #16]
 8006a80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a84:	6918      	ldr	r0, [r3, #16]
 8006a86:	f000 fba5 	bl	80071d4 <__hi0bits>
 8006a8a:	f1c0 0020 	rsb	r0, r0, #32
 8006a8e:	9b06      	ldr	r3, [sp, #24]
 8006a90:	4418      	add	r0, r3
 8006a92:	f010 001f 	ands.w	r0, r0, #31
 8006a96:	f000 8094 	beq.w	8006bc2 <_dtoa_r+0x922>
 8006a9a:	f1c0 0320 	rsb	r3, r0, #32
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	f340 8085 	ble.w	8006bae <_dtoa_r+0x90e>
 8006aa4:	9b05      	ldr	r3, [sp, #20]
 8006aa6:	f1c0 001c 	rsb	r0, r0, #28
 8006aaa:	4403      	add	r3, r0
 8006aac:	9305      	str	r3, [sp, #20]
 8006aae:	9b06      	ldr	r3, [sp, #24]
 8006ab0:	4403      	add	r3, r0
 8006ab2:	4405      	add	r5, r0
 8006ab4:	9306      	str	r3, [sp, #24]
 8006ab6:	9b05      	ldr	r3, [sp, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	dd05      	ble.n	8006ac8 <_dtoa_r+0x828>
 8006abc:	4651      	mov	r1, sl
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fcef 	bl	80074a4 <__lshift>
 8006ac6:	4682      	mov	sl, r0
 8006ac8:	9b06      	ldr	r3, [sp, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dd05      	ble.n	8006ada <_dtoa_r+0x83a>
 8006ace:	4631      	mov	r1, r6
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 fce6 	bl	80074a4 <__lshift>
 8006ad8:	4606      	mov	r6, r0
 8006ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d072      	beq.n	8006bc6 <_dtoa_r+0x926>
 8006ae0:	4631      	mov	r1, r6
 8006ae2:	4650      	mov	r0, sl
 8006ae4:	f000 fd4a 	bl	800757c <__mcmp>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	da6c      	bge.n	8006bc6 <_dtoa_r+0x926>
 8006aec:	2300      	movs	r3, #0
 8006aee:	4651      	mov	r1, sl
 8006af0:	220a      	movs	r2, #10
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 fb28 	bl	8007148 <__multadd>
 8006af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006afa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006afe:	4682      	mov	sl, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 81b0 	beq.w	8006e66 <_dtoa_r+0xbc6>
 8006b06:	2300      	movs	r3, #0
 8006b08:	4639      	mov	r1, r7
 8006b0a:	220a      	movs	r2, #10
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f000 fb1b 	bl	8007148 <__multadd>
 8006b12:	9b01      	ldr	r3, [sp, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	4607      	mov	r7, r0
 8006b18:	f300 8096 	bgt.w	8006c48 <_dtoa_r+0x9a8>
 8006b1c:	9b07      	ldr	r3, [sp, #28]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	dc59      	bgt.n	8006bd6 <_dtoa_r+0x936>
 8006b22:	e091      	b.n	8006c48 <_dtoa_r+0x9a8>
 8006b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b2a:	e758      	b.n	80069de <_dtoa_r+0x73e>
 8006b2c:	9b04      	ldr	r3, [sp, #16]
 8006b2e:	1e5e      	subs	r6, r3, #1
 8006b30:	9b08      	ldr	r3, [sp, #32]
 8006b32:	42b3      	cmp	r3, r6
 8006b34:	bfbf      	itttt	lt
 8006b36:	9b08      	ldrlt	r3, [sp, #32]
 8006b38:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006b3a:	9608      	strlt	r6, [sp, #32]
 8006b3c:	1af3      	sublt	r3, r6, r3
 8006b3e:	bfb4      	ite	lt
 8006b40:	18d2      	addlt	r2, r2, r3
 8006b42:	1b9e      	subge	r6, r3, r6
 8006b44:	9b04      	ldr	r3, [sp, #16]
 8006b46:	bfbc      	itt	lt
 8006b48:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006b4a:	2600      	movlt	r6, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	bfb7      	itett	lt
 8006b50:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006b54:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006b58:	1a9d      	sublt	r5, r3, r2
 8006b5a:	2300      	movlt	r3, #0
 8006b5c:	e741      	b.n	80069e2 <_dtoa_r+0x742>
 8006b5e:	9e08      	ldr	r6, [sp, #32]
 8006b60:	9d05      	ldr	r5, [sp, #20]
 8006b62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b64:	e748      	b.n	80069f8 <_dtoa_r+0x758>
 8006b66:	9a08      	ldr	r2, [sp, #32]
 8006b68:	e770      	b.n	8006a4c <_dtoa_r+0x7ac>
 8006b6a:	9b07      	ldr	r3, [sp, #28]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	dc19      	bgt.n	8006ba4 <_dtoa_r+0x904>
 8006b70:	9b02      	ldr	r3, [sp, #8]
 8006b72:	b9bb      	cbnz	r3, 8006ba4 <_dtoa_r+0x904>
 8006b74:	9b03      	ldr	r3, [sp, #12]
 8006b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b7a:	b99b      	cbnz	r3, 8006ba4 <_dtoa_r+0x904>
 8006b7c:	9b03      	ldr	r3, [sp, #12]
 8006b7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b82:	0d1b      	lsrs	r3, r3, #20
 8006b84:	051b      	lsls	r3, r3, #20
 8006b86:	b183      	cbz	r3, 8006baa <_dtoa_r+0x90a>
 8006b88:	9b05      	ldr	r3, [sp, #20]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	9305      	str	r3, [sp, #20]
 8006b8e:	9b06      	ldr	r3, [sp, #24]
 8006b90:	3301      	adds	r3, #1
 8006b92:	9306      	str	r3, [sp, #24]
 8006b94:	f04f 0801 	mov.w	r8, #1
 8006b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f47f af6f 	bne.w	8006a7e <_dtoa_r+0x7de>
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	e774      	b.n	8006a8e <_dtoa_r+0x7ee>
 8006ba4:	f04f 0800 	mov.w	r8, #0
 8006ba8:	e7f6      	b.n	8006b98 <_dtoa_r+0x8f8>
 8006baa:	4698      	mov	r8, r3
 8006bac:	e7f4      	b.n	8006b98 <_dtoa_r+0x8f8>
 8006bae:	d082      	beq.n	8006ab6 <_dtoa_r+0x816>
 8006bb0:	9a05      	ldr	r2, [sp, #20]
 8006bb2:	331c      	adds	r3, #28
 8006bb4:	441a      	add	r2, r3
 8006bb6:	9205      	str	r2, [sp, #20]
 8006bb8:	9a06      	ldr	r2, [sp, #24]
 8006bba:	441a      	add	r2, r3
 8006bbc:	441d      	add	r5, r3
 8006bbe:	9206      	str	r2, [sp, #24]
 8006bc0:	e779      	b.n	8006ab6 <_dtoa_r+0x816>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	e7f4      	b.n	8006bb0 <_dtoa_r+0x910>
 8006bc6:	9b04      	ldr	r3, [sp, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dc37      	bgt.n	8006c3c <_dtoa_r+0x99c>
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	dd34      	ble.n	8006c3c <_dtoa_r+0x99c>
 8006bd2:	9b04      	ldr	r3, [sp, #16]
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	9b01      	ldr	r3, [sp, #4]
 8006bd8:	b963      	cbnz	r3, 8006bf4 <_dtoa_r+0x954>
 8006bda:	4631      	mov	r1, r6
 8006bdc:	2205      	movs	r2, #5
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 fab2 	bl	8007148 <__multadd>
 8006be4:	4601      	mov	r1, r0
 8006be6:	4606      	mov	r6, r0
 8006be8:	4650      	mov	r0, sl
 8006bea:	f000 fcc7 	bl	800757c <__mcmp>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f73f adbb 	bgt.w	800676a <_dtoa_r+0x4ca>
 8006bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf6:	9d00      	ldr	r5, [sp, #0]
 8006bf8:	ea6f 0b03 	mvn.w	fp, r3
 8006bfc:	f04f 0800 	mov.w	r8, #0
 8006c00:	4631      	mov	r1, r6
 8006c02:	4620      	mov	r0, r4
 8006c04:	f000 fa7e 	bl	8007104 <_Bfree>
 8006c08:	2f00      	cmp	r7, #0
 8006c0a:	f43f aeab 	beq.w	8006964 <_dtoa_r+0x6c4>
 8006c0e:	f1b8 0f00 	cmp.w	r8, #0
 8006c12:	d005      	beq.n	8006c20 <_dtoa_r+0x980>
 8006c14:	45b8      	cmp	r8, r7
 8006c16:	d003      	beq.n	8006c20 <_dtoa_r+0x980>
 8006c18:	4641      	mov	r1, r8
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 fa72 	bl	8007104 <_Bfree>
 8006c20:	4639      	mov	r1, r7
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 fa6e 	bl	8007104 <_Bfree>
 8006c28:	e69c      	b.n	8006964 <_dtoa_r+0x6c4>
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	4637      	mov	r7, r6
 8006c2e:	e7e1      	b.n	8006bf4 <_dtoa_r+0x954>
 8006c30:	46bb      	mov	fp, r7
 8006c32:	4637      	mov	r7, r6
 8006c34:	e599      	b.n	800676a <_dtoa_r+0x4ca>
 8006c36:	bf00      	nop
 8006c38:	40240000 	.word	0x40240000
 8006c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80c8 	beq.w	8006dd4 <_dtoa_r+0xb34>
 8006c44:	9b04      	ldr	r3, [sp, #16]
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	2d00      	cmp	r5, #0
 8006c4a:	dd05      	ble.n	8006c58 <_dtoa_r+0x9b8>
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	462a      	mov	r2, r5
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 fc27 	bl	80074a4 <__lshift>
 8006c56:	4607      	mov	r7, r0
 8006c58:	f1b8 0f00 	cmp.w	r8, #0
 8006c5c:	d05b      	beq.n	8006d16 <_dtoa_r+0xa76>
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fa0f 	bl	8007084 <_Balloc>
 8006c66:	4605      	mov	r5, r0
 8006c68:	b928      	cbnz	r0, 8006c76 <_dtoa_r+0x9d6>
 8006c6a:	4b83      	ldr	r3, [pc, #524]	; (8006e78 <_dtoa_r+0xbd8>)
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c72:	f7ff bb2e 	b.w	80062d2 <_dtoa_r+0x32>
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	3202      	adds	r2, #2
 8006c7a:	0092      	lsls	r2, r2, #2
 8006c7c:	f107 010c 	add.w	r1, r7, #12
 8006c80:	300c      	adds	r0, #12
 8006c82:	f7ff fa74 	bl	800616e <memcpy>
 8006c86:	2201      	movs	r2, #1
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fc0a 	bl	80074a4 <__lshift>
 8006c90:	9b00      	ldr	r3, [sp, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	9304      	str	r3, [sp, #16]
 8006c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	9308      	str	r3, [sp, #32]
 8006c9e:	9b02      	ldr	r3, [sp, #8]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	46b8      	mov	r8, r7
 8006ca6:	9306      	str	r3, [sp, #24]
 8006ca8:	4607      	mov	r7, r0
 8006caa:	9b04      	ldr	r3, [sp, #16]
 8006cac:	4631      	mov	r1, r6
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	4650      	mov	r0, sl
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	f7ff fa69 	bl	800618a <quorem>
 8006cb8:	4641      	mov	r1, r8
 8006cba:	9002      	str	r0, [sp, #8]
 8006cbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006cc0:	4650      	mov	r0, sl
 8006cc2:	f000 fc5b 	bl	800757c <__mcmp>
 8006cc6:	463a      	mov	r2, r7
 8006cc8:	9005      	str	r0, [sp, #20]
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 fc71 	bl	80075b4 <__mdiff>
 8006cd2:	68c2      	ldr	r2, [r0, #12]
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	bb02      	cbnz	r2, 8006d1a <_dtoa_r+0xa7a>
 8006cd8:	4601      	mov	r1, r0
 8006cda:	4650      	mov	r0, sl
 8006cdc:	f000 fc4e 	bl	800757c <__mcmp>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ce8:	f000 fa0c 	bl	8007104 <_Bfree>
 8006cec:	9b07      	ldr	r3, [sp, #28]
 8006cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cf0:	9d04      	ldr	r5, [sp, #16]
 8006cf2:	ea43 0102 	orr.w	r1, r3, r2
 8006cf6:	9b06      	ldr	r3, [sp, #24]
 8006cf8:	4319      	orrs	r1, r3
 8006cfa:	d110      	bne.n	8006d1e <_dtoa_r+0xa7e>
 8006cfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d00:	d029      	beq.n	8006d56 <_dtoa_r+0xab6>
 8006d02:	9b05      	ldr	r3, [sp, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	dd02      	ble.n	8006d0e <_dtoa_r+0xa6e>
 8006d08:	9b02      	ldr	r3, [sp, #8]
 8006d0a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d0e:	9b01      	ldr	r3, [sp, #4]
 8006d10:	f883 9000 	strb.w	r9, [r3]
 8006d14:	e774      	b.n	8006c00 <_dtoa_r+0x960>
 8006d16:	4638      	mov	r0, r7
 8006d18:	e7ba      	b.n	8006c90 <_dtoa_r+0x9f0>
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	e7e1      	b.n	8006ce2 <_dtoa_r+0xa42>
 8006d1e:	9b05      	ldr	r3, [sp, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	db04      	blt.n	8006d2e <_dtoa_r+0xa8e>
 8006d24:	9907      	ldr	r1, [sp, #28]
 8006d26:	430b      	orrs	r3, r1
 8006d28:	9906      	ldr	r1, [sp, #24]
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	d120      	bne.n	8006d70 <_dtoa_r+0xad0>
 8006d2e:	2a00      	cmp	r2, #0
 8006d30:	dded      	ble.n	8006d0e <_dtoa_r+0xa6e>
 8006d32:	4651      	mov	r1, sl
 8006d34:	2201      	movs	r2, #1
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 fbb4 	bl	80074a4 <__lshift>
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	4682      	mov	sl, r0
 8006d40:	f000 fc1c 	bl	800757c <__mcmp>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	dc03      	bgt.n	8006d50 <_dtoa_r+0xab0>
 8006d48:	d1e1      	bne.n	8006d0e <_dtoa_r+0xa6e>
 8006d4a:	f019 0f01 	tst.w	r9, #1
 8006d4e:	d0de      	beq.n	8006d0e <_dtoa_r+0xa6e>
 8006d50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d54:	d1d8      	bne.n	8006d08 <_dtoa_r+0xa68>
 8006d56:	9a01      	ldr	r2, [sp, #4]
 8006d58:	2339      	movs	r3, #57	; 0x39
 8006d5a:	7013      	strb	r3, [r2, #0]
 8006d5c:	462b      	mov	r3, r5
 8006d5e:	461d      	mov	r5, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d66:	2a39      	cmp	r2, #57	; 0x39
 8006d68:	d06c      	beq.n	8006e44 <_dtoa_r+0xba4>
 8006d6a:	3201      	adds	r2, #1
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	e747      	b.n	8006c00 <_dtoa_r+0x960>
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	dd07      	ble.n	8006d84 <_dtoa_r+0xae4>
 8006d74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d78:	d0ed      	beq.n	8006d56 <_dtoa_r+0xab6>
 8006d7a:	9a01      	ldr	r2, [sp, #4]
 8006d7c:	f109 0301 	add.w	r3, r9, #1
 8006d80:	7013      	strb	r3, [r2, #0]
 8006d82:	e73d      	b.n	8006c00 <_dtoa_r+0x960>
 8006d84:	9b04      	ldr	r3, [sp, #16]
 8006d86:	9a08      	ldr	r2, [sp, #32]
 8006d88:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d043      	beq.n	8006e18 <_dtoa_r+0xb78>
 8006d90:	4651      	mov	r1, sl
 8006d92:	2300      	movs	r3, #0
 8006d94:	220a      	movs	r2, #10
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 f9d6 	bl	8007148 <__multadd>
 8006d9c:	45b8      	cmp	r8, r7
 8006d9e:	4682      	mov	sl, r0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	f04f 020a 	mov.w	r2, #10
 8006da8:	4641      	mov	r1, r8
 8006daa:	4620      	mov	r0, r4
 8006dac:	d107      	bne.n	8006dbe <_dtoa_r+0xb1e>
 8006dae:	f000 f9cb 	bl	8007148 <__multadd>
 8006db2:	4680      	mov	r8, r0
 8006db4:	4607      	mov	r7, r0
 8006db6:	9b04      	ldr	r3, [sp, #16]
 8006db8:	3301      	adds	r3, #1
 8006dba:	9304      	str	r3, [sp, #16]
 8006dbc:	e775      	b.n	8006caa <_dtoa_r+0xa0a>
 8006dbe:	f000 f9c3 	bl	8007148 <__multadd>
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	4680      	mov	r8, r0
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	220a      	movs	r2, #10
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 f9bc 	bl	8007148 <__multadd>
 8006dd0:	4607      	mov	r7, r0
 8006dd2:	e7f0      	b.n	8006db6 <_dtoa_r+0xb16>
 8006dd4:	9b04      	ldr	r3, [sp, #16]
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	9d00      	ldr	r5, [sp, #0]
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4650      	mov	r0, sl
 8006dde:	f7ff f9d4 	bl	800618a <quorem>
 8006de2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006de6:	9b00      	ldr	r3, [sp, #0]
 8006de8:	f805 9b01 	strb.w	r9, [r5], #1
 8006dec:	1aea      	subs	r2, r5, r3
 8006dee:	9b01      	ldr	r3, [sp, #4]
 8006df0:	4293      	cmp	r3, r2
 8006df2:	dd07      	ble.n	8006e04 <_dtoa_r+0xb64>
 8006df4:	4651      	mov	r1, sl
 8006df6:	2300      	movs	r3, #0
 8006df8:	220a      	movs	r2, #10
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f000 f9a4 	bl	8007148 <__multadd>
 8006e00:	4682      	mov	sl, r0
 8006e02:	e7ea      	b.n	8006dda <_dtoa_r+0xb3a>
 8006e04:	9b01      	ldr	r3, [sp, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfc8      	it	gt
 8006e0a:	461d      	movgt	r5, r3
 8006e0c:	9b00      	ldr	r3, [sp, #0]
 8006e0e:	bfd8      	it	le
 8006e10:	2501      	movle	r5, #1
 8006e12:	441d      	add	r5, r3
 8006e14:	f04f 0800 	mov.w	r8, #0
 8006e18:	4651      	mov	r1, sl
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 fb41 	bl	80074a4 <__lshift>
 8006e22:	4631      	mov	r1, r6
 8006e24:	4682      	mov	sl, r0
 8006e26:	f000 fba9 	bl	800757c <__mcmp>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	dc96      	bgt.n	8006d5c <_dtoa_r+0xabc>
 8006e2e:	d102      	bne.n	8006e36 <_dtoa_r+0xb96>
 8006e30:	f019 0f01 	tst.w	r9, #1
 8006e34:	d192      	bne.n	8006d5c <_dtoa_r+0xabc>
 8006e36:	462b      	mov	r3, r5
 8006e38:	461d      	mov	r5, r3
 8006e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e3e:	2a30      	cmp	r2, #48	; 0x30
 8006e40:	d0fa      	beq.n	8006e38 <_dtoa_r+0xb98>
 8006e42:	e6dd      	b.n	8006c00 <_dtoa_r+0x960>
 8006e44:	9a00      	ldr	r2, [sp, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d189      	bne.n	8006d5e <_dtoa_r+0xabe>
 8006e4a:	f10b 0b01 	add.w	fp, fp, #1
 8006e4e:	2331      	movs	r3, #49	; 0x31
 8006e50:	e796      	b.n	8006d80 <_dtoa_r+0xae0>
 8006e52:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <_dtoa_r+0xbdc>)
 8006e54:	f7ff ba99 	b.w	800638a <_dtoa_r+0xea>
 8006e58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f47f aa6d 	bne.w	800633a <_dtoa_r+0x9a>
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <_dtoa_r+0xbe0>)
 8006e62:	f7ff ba92 	b.w	800638a <_dtoa_r+0xea>
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	dcb5      	bgt.n	8006dd8 <_dtoa_r+0xb38>
 8006e6c:	9b07      	ldr	r3, [sp, #28]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	f73f aeb1 	bgt.w	8006bd6 <_dtoa_r+0x936>
 8006e74:	e7b0      	b.n	8006dd8 <_dtoa_r+0xb38>
 8006e76:	bf00      	nop
 8006e78:	08008bb0 	.word	0x08008bb0
 8006e7c:	08008b10 	.word	0x08008b10
 8006e80:	08008b34 	.word	0x08008b34

08006e84 <_free_r>:
 8006e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e86:	2900      	cmp	r1, #0
 8006e88:	d044      	beq.n	8006f14 <_free_r+0x90>
 8006e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e8e:	9001      	str	r0, [sp, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f1a1 0404 	sub.w	r4, r1, #4
 8006e96:	bfb8      	it	lt
 8006e98:	18e4      	addlt	r4, r4, r3
 8006e9a:	f000 f8e7 	bl	800706c <__malloc_lock>
 8006e9e:	4a1e      	ldr	r2, [pc, #120]	; (8006f18 <_free_r+0x94>)
 8006ea0:	9801      	ldr	r0, [sp, #4]
 8006ea2:	6813      	ldr	r3, [r2, #0]
 8006ea4:	b933      	cbnz	r3, 8006eb4 <_free_r+0x30>
 8006ea6:	6063      	str	r3, [r4, #4]
 8006ea8:	6014      	str	r4, [r2, #0]
 8006eaa:	b003      	add	sp, #12
 8006eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eb0:	f000 b8e2 	b.w	8007078 <__malloc_unlock>
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	d908      	bls.n	8006eca <_free_r+0x46>
 8006eb8:	6825      	ldr	r5, [r4, #0]
 8006eba:	1961      	adds	r1, r4, r5
 8006ebc:	428b      	cmp	r3, r1
 8006ebe:	bf01      	itttt	eq
 8006ec0:	6819      	ldreq	r1, [r3, #0]
 8006ec2:	685b      	ldreq	r3, [r3, #4]
 8006ec4:	1949      	addeq	r1, r1, r5
 8006ec6:	6021      	streq	r1, [r4, #0]
 8006ec8:	e7ed      	b.n	8006ea6 <_free_r+0x22>
 8006eca:	461a      	mov	r2, r3
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	b10b      	cbz	r3, 8006ed4 <_free_r+0x50>
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	d9fa      	bls.n	8006eca <_free_r+0x46>
 8006ed4:	6811      	ldr	r1, [r2, #0]
 8006ed6:	1855      	adds	r5, r2, r1
 8006ed8:	42a5      	cmp	r5, r4
 8006eda:	d10b      	bne.n	8006ef4 <_free_r+0x70>
 8006edc:	6824      	ldr	r4, [r4, #0]
 8006ede:	4421      	add	r1, r4
 8006ee0:	1854      	adds	r4, r2, r1
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	6011      	str	r1, [r2, #0]
 8006ee6:	d1e0      	bne.n	8006eaa <_free_r+0x26>
 8006ee8:	681c      	ldr	r4, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	6053      	str	r3, [r2, #4]
 8006eee:	440c      	add	r4, r1
 8006ef0:	6014      	str	r4, [r2, #0]
 8006ef2:	e7da      	b.n	8006eaa <_free_r+0x26>
 8006ef4:	d902      	bls.n	8006efc <_free_r+0x78>
 8006ef6:	230c      	movs	r3, #12
 8006ef8:	6003      	str	r3, [r0, #0]
 8006efa:	e7d6      	b.n	8006eaa <_free_r+0x26>
 8006efc:	6825      	ldr	r5, [r4, #0]
 8006efe:	1961      	adds	r1, r4, r5
 8006f00:	428b      	cmp	r3, r1
 8006f02:	bf04      	itt	eq
 8006f04:	6819      	ldreq	r1, [r3, #0]
 8006f06:	685b      	ldreq	r3, [r3, #4]
 8006f08:	6063      	str	r3, [r4, #4]
 8006f0a:	bf04      	itt	eq
 8006f0c:	1949      	addeq	r1, r1, r5
 8006f0e:	6021      	streq	r1, [r4, #0]
 8006f10:	6054      	str	r4, [r2, #4]
 8006f12:	e7ca      	b.n	8006eaa <_free_r+0x26>
 8006f14:	b003      	add	sp, #12
 8006f16:	bd30      	pop	{r4, r5, pc}
 8006f18:	200005f8 	.word	0x200005f8

08006f1c <malloc>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <malloc+0xc>)
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	f000 b823 	b.w	8006f6c <_malloc_r>
 8006f26:	bf00      	nop
 8006f28:	20000064 	.word	0x20000064

08006f2c <sbrk_aligned>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	4e0e      	ldr	r6, [pc, #56]	; (8006f68 <sbrk_aligned+0x3c>)
 8006f30:	460c      	mov	r4, r1
 8006f32:	6831      	ldr	r1, [r6, #0]
 8006f34:	4605      	mov	r5, r0
 8006f36:	b911      	cbnz	r1, 8006f3e <sbrk_aligned+0x12>
 8006f38:	f000 fe40 	bl	8007bbc <_sbrk_r>
 8006f3c:	6030      	str	r0, [r6, #0]
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4628      	mov	r0, r5
 8006f42:	f000 fe3b 	bl	8007bbc <_sbrk_r>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	d00a      	beq.n	8006f60 <sbrk_aligned+0x34>
 8006f4a:	1cc4      	adds	r4, r0, #3
 8006f4c:	f024 0403 	bic.w	r4, r4, #3
 8006f50:	42a0      	cmp	r0, r4
 8006f52:	d007      	beq.n	8006f64 <sbrk_aligned+0x38>
 8006f54:	1a21      	subs	r1, r4, r0
 8006f56:	4628      	mov	r0, r5
 8006f58:	f000 fe30 	bl	8007bbc <_sbrk_r>
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d101      	bne.n	8006f64 <sbrk_aligned+0x38>
 8006f60:	f04f 34ff 	mov.w	r4, #4294967295
 8006f64:	4620      	mov	r0, r4
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	200005fc 	.word	0x200005fc

08006f6c <_malloc_r>:
 8006f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f70:	1ccd      	adds	r5, r1, #3
 8006f72:	f025 0503 	bic.w	r5, r5, #3
 8006f76:	3508      	adds	r5, #8
 8006f78:	2d0c      	cmp	r5, #12
 8006f7a:	bf38      	it	cc
 8006f7c:	250c      	movcc	r5, #12
 8006f7e:	2d00      	cmp	r5, #0
 8006f80:	4607      	mov	r7, r0
 8006f82:	db01      	blt.n	8006f88 <_malloc_r+0x1c>
 8006f84:	42a9      	cmp	r1, r5
 8006f86:	d905      	bls.n	8006f94 <_malloc_r+0x28>
 8006f88:	230c      	movs	r3, #12
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	4630      	mov	r0, r6
 8006f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007068 <_malloc_r+0xfc>
 8006f98:	f000 f868 	bl	800706c <__malloc_lock>
 8006f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa0:	461c      	mov	r4, r3
 8006fa2:	bb5c      	cbnz	r4, 8006ffc <_malloc_r+0x90>
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f7ff ffc0 	bl	8006f2c <sbrk_aligned>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	4604      	mov	r4, r0
 8006fb0:	d155      	bne.n	800705e <_malloc_r+0xf2>
 8006fb2:	f8d8 4000 	ldr.w	r4, [r8]
 8006fb6:	4626      	mov	r6, r4
 8006fb8:	2e00      	cmp	r6, #0
 8006fba:	d145      	bne.n	8007048 <_malloc_r+0xdc>
 8006fbc:	2c00      	cmp	r4, #0
 8006fbe:	d048      	beq.n	8007052 <_malloc_r+0xe6>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	eb04 0903 	add.w	r9, r4, r3
 8006fca:	f000 fdf7 	bl	8007bbc <_sbrk_r>
 8006fce:	4581      	cmp	r9, r0
 8006fd0:	d13f      	bne.n	8007052 <_malloc_r+0xe6>
 8006fd2:	6821      	ldr	r1, [r4, #0]
 8006fd4:	1a6d      	subs	r5, r5, r1
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f7ff ffa7 	bl	8006f2c <sbrk_aligned>
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d037      	beq.n	8007052 <_malloc_r+0xe6>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	442b      	add	r3, r5
 8006fe6:	6023      	str	r3, [r4, #0]
 8006fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d038      	beq.n	8007062 <_malloc_r+0xf6>
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	42a2      	cmp	r2, r4
 8006ff4:	d12b      	bne.n	800704e <_malloc_r+0xe2>
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	605a      	str	r2, [r3, #4]
 8006ffa:	e00f      	b.n	800701c <_malloc_r+0xb0>
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	1b52      	subs	r2, r2, r5
 8007000:	d41f      	bmi.n	8007042 <_malloc_r+0xd6>
 8007002:	2a0b      	cmp	r2, #11
 8007004:	d917      	bls.n	8007036 <_malloc_r+0xca>
 8007006:	1961      	adds	r1, r4, r5
 8007008:	42a3      	cmp	r3, r4
 800700a:	6025      	str	r5, [r4, #0]
 800700c:	bf18      	it	ne
 800700e:	6059      	strne	r1, [r3, #4]
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	bf08      	it	eq
 8007014:	f8c8 1000 	streq.w	r1, [r8]
 8007018:	5162      	str	r2, [r4, r5]
 800701a:	604b      	str	r3, [r1, #4]
 800701c:	4638      	mov	r0, r7
 800701e:	f104 060b 	add.w	r6, r4, #11
 8007022:	f000 f829 	bl	8007078 <__malloc_unlock>
 8007026:	f026 0607 	bic.w	r6, r6, #7
 800702a:	1d23      	adds	r3, r4, #4
 800702c:	1af2      	subs	r2, r6, r3
 800702e:	d0ae      	beq.n	8006f8e <_malloc_r+0x22>
 8007030:	1b9b      	subs	r3, r3, r6
 8007032:	50a3      	str	r3, [r4, r2]
 8007034:	e7ab      	b.n	8006f8e <_malloc_r+0x22>
 8007036:	42a3      	cmp	r3, r4
 8007038:	6862      	ldr	r2, [r4, #4]
 800703a:	d1dd      	bne.n	8006ff8 <_malloc_r+0x8c>
 800703c:	f8c8 2000 	str.w	r2, [r8]
 8007040:	e7ec      	b.n	800701c <_malloc_r+0xb0>
 8007042:	4623      	mov	r3, r4
 8007044:	6864      	ldr	r4, [r4, #4]
 8007046:	e7ac      	b.n	8006fa2 <_malloc_r+0x36>
 8007048:	4634      	mov	r4, r6
 800704a:	6876      	ldr	r6, [r6, #4]
 800704c:	e7b4      	b.n	8006fb8 <_malloc_r+0x4c>
 800704e:	4613      	mov	r3, r2
 8007050:	e7cc      	b.n	8006fec <_malloc_r+0x80>
 8007052:	230c      	movs	r3, #12
 8007054:	603b      	str	r3, [r7, #0]
 8007056:	4638      	mov	r0, r7
 8007058:	f000 f80e 	bl	8007078 <__malloc_unlock>
 800705c:	e797      	b.n	8006f8e <_malloc_r+0x22>
 800705e:	6025      	str	r5, [r4, #0]
 8007060:	e7dc      	b.n	800701c <_malloc_r+0xb0>
 8007062:	605b      	str	r3, [r3, #4]
 8007064:	deff      	udf	#255	; 0xff
 8007066:	bf00      	nop
 8007068:	200005f8 	.word	0x200005f8

0800706c <__malloc_lock>:
 800706c:	4801      	ldr	r0, [pc, #4]	; (8007074 <__malloc_lock+0x8>)
 800706e:	f7ff b87c 	b.w	800616a <__retarget_lock_acquire_recursive>
 8007072:	bf00      	nop
 8007074:	200005f4 	.word	0x200005f4

08007078 <__malloc_unlock>:
 8007078:	4801      	ldr	r0, [pc, #4]	; (8007080 <__malloc_unlock+0x8>)
 800707a:	f7ff b877 	b.w	800616c <__retarget_lock_release_recursive>
 800707e:	bf00      	nop
 8007080:	200005f4 	.word	0x200005f4

08007084 <_Balloc>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	69c6      	ldr	r6, [r0, #28]
 8007088:	4604      	mov	r4, r0
 800708a:	460d      	mov	r5, r1
 800708c:	b976      	cbnz	r6, 80070ac <_Balloc+0x28>
 800708e:	2010      	movs	r0, #16
 8007090:	f7ff ff44 	bl	8006f1c <malloc>
 8007094:	4602      	mov	r2, r0
 8007096:	61e0      	str	r0, [r4, #28]
 8007098:	b920      	cbnz	r0, 80070a4 <_Balloc+0x20>
 800709a:	4b18      	ldr	r3, [pc, #96]	; (80070fc <_Balloc+0x78>)
 800709c:	4818      	ldr	r0, [pc, #96]	; (8007100 <_Balloc+0x7c>)
 800709e:	216b      	movs	r1, #107	; 0x6b
 80070a0:	f000 fd9c 	bl	8007bdc <__assert_func>
 80070a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070a8:	6006      	str	r6, [r0, #0]
 80070aa:	60c6      	str	r6, [r0, #12]
 80070ac:	69e6      	ldr	r6, [r4, #28]
 80070ae:	68f3      	ldr	r3, [r6, #12]
 80070b0:	b183      	cbz	r3, 80070d4 <_Balloc+0x50>
 80070b2:	69e3      	ldr	r3, [r4, #28]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070ba:	b9b8      	cbnz	r0, 80070ec <_Balloc+0x68>
 80070bc:	2101      	movs	r1, #1
 80070be:	fa01 f605 	lsl.w	r6, r1, r5
 80070c2:	1d72      	adds	r2, r6, #5
 80070c4:	0092      	lsls	r2, r2, #2
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 fda6 	bl	8007c18 <_calloc_r>
 80070cc:	b160      	cbz	r0, 80070e8 <_Balloc+0x64>
 80070ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070d2:	e00e      	b.n	80070f2 <_Balloc+0x6e>
 80070d4:	2221      	movs	r2, #33	; 0x21
 80070d6:	2104      	movs	r1, #4
 80070d8:	4620      	mov	r0, r4
 80070da:	f000 fd9d 	bl	8007c18 <_calloc_r>
 80070de:	69e3      	ldr	r3, [r4, #28]
 80070e0:	60f0      	str	r0, [r6, #12]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1e4      	bne.n	80070b2 <_Balloc+0x2e>
 80070e8:	2000      	movs	r0, #0
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	6802      	ldr	r2, [r0, #0]
 80070ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070f2:	2300      	movs	r3, #0
 80070f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070f8:	e7f7      	b.n	80070ea <_Balloc+0x66>
 80070fa:	bf00      	nop
 80070fc:	08008b41 	.word	0x08008b41
 8007100:	08008bc1 	.word	0x08008bc1

08007104 <_Bfree>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	69c6      	ldr	r6, [r0, #28]
 8007108:	4605      	mov	r5, r0
 800710a:	460c      	mov	r4, r1
 800710c:	b976      	cbnz	r6, 800712c <_Bfree+0x28>
 800710e:	2010      	movs	r0, #16
 8007110:	f7ff ff04 	bl	8006f1c <malloc>
 8007114:	4602      	mov	r2, r0
 8007116:	61e8      	str	r0, [r5, #28]
 8007118:	b920      	cbnz	r0, 8007124 <_Bfree+0x20>
 800711a:	4b09      	ldr	r3, [pc, #36]	; (8007140 <_Bfree+0x3c>)
 800711c:	4809      	ldr	r0, [pc, #36]	; (8007144 <_Bfree+0x40>)
 800711e:	218f      	movs	r1, #143	; 0x8f
 8007120:	f000 fd5c 	bl	8007bdc <__assert_func>
 8007124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007128:	6006      	str	r6, [r0, #0]
 800712a:	60c6      	str	r6, [r0, #12]
 800712c:	b13c      	cbz	r4, 800713e <_Bfree+0x3a>
 800712e:	69eb      	ldr	r3, [r5, #28]
 8007130:	6862      	ldr	r2, [r4, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007138:	6021      	str	r1, [r4, #0]
 800713a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	08008b41 	.word	0x08008b41
 8007144:	08008bc1 	.word	0x08008bc1

08007148 <__multadd>:
 8007148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714c:	690d      	ldr	r5, [r1, #16]
 800714e:	4607      	mov	r7, r0
 8007150:	460c      	mov	r4, r1
 8007152:	461e      	mov	r6, r3
 8007154:	f101 0c14 	add.w	ip, r1, #20
 8007158:	2000      	movs	r0, #0
 800715a:	f8dc 3000 	ldr.w	r3, [ip]
 800715e:	b299      	uxth	r1, r3
 8007160:	fb02 6101 	mla	r1, r2, r1, r6
 8007164:	0c1e      	lsrs	r6, r3, #16
 8007166:	0c0b      	lsrs	r3, r1, #16
 8007168:	fb02 3306 	mla	r3, r2, r6, r3
 800716c:	b289      	uxth	r1, r1
 800716e:	3001      	adds	r0, #1
 8007170:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007174:	4285      	cmp	r5, r0
 8007176:	f84c 1b04 	str.w	r1, [ip], #4
 800717a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800717e:	dcec      	bgt.n	800715a <__multadd+0x12>
 8007180:	b30e      	cbz	r6, 80071c6 <__multadd+0x7e>
 8007182:	68a3      	ldr	r3, [r4, #8]
 8007184:	42ab      	cmp	r3, r5
 8007186:	dc19      	bgt.n	80071bc <__multadd+0x74>
 8007188:	6861      	ldr	r1, [r4, #4]
 800718a:	4638      	mov	r0, r7
 800718c:	3101      	adds	r1, #1
 800718e:	f7ff ff79 	bl	8007084 <_Balloc>
 8007192:	4680      	mov	r8, r0
 8007194:	b928      	cbnz	r0, 80071a2 <__multadd+0x5a>
 8007196:	4602      	mov	r2, r0
 8007198:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <__multadd+0x84>)
 800719a:	480d      	ldr	r0, [pc, #52]	; (80071d0 <__multadd+0x88>)
 800719c:	21ba      	movs	r1, #186	; 0xba
 800719e:	f000 fd1d 	bl	8007bdc <__assert_func>
 80071a2:	6922      	ldr	r2, [r4, #16]
 80071a4:	3202      	adds	r2, #2
 80071a6:	f104 010c 	add.w	r1, r4, #12
 80071aa:	0092      	lsls	r2, r2, #2
 80071ac:	300c      	adds	r0, #12
 80071ae:	f7fe ffde 	bl	800616e <memcpy>
 80071b2:	4621      	mov	r1, r4
 80071b4:	4638      	mov	r0, r7
 80071b6:	f7ff ffa5 	bl	8007104 <_Bfree>
 80071ba:	4644      	mov	r4, r8
 80071bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071c0:	3501      	adds	r5, #1
 80071c2:	615e      	str	r6, [r3, #20]
 80071c4:	6125      	str	r5, [r4, #16]
 80071c6:	4620      	mov	r0, r4
 80071c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071cc:	08008bb0 	.word	0x08008bb0
 80071d0:	08008bc1 	.word	0x08008bc1

080071d4 <__hi0bits>:
 80071d4:	0c03      	lsrs	r3, r0, #16
 80071d6:	041b      	lsls	r3, r3, #16
 80071d8:	b9d3      	cbnz	r3, 8007210 <__hi0bits+0x3c>
 80071da:	0400      	lsls	r0, r0, #16
 80071dc:	2310      	movs	r3, #16
 80071de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071e2:	bf04      	itt	eq
 80071e4:	0200      	lsleq	r0, r0, #8
 80071e6:	3308      	addeq	r3, #8
 80071e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071ec:	bf04      	itt	eq
 80071ee:	0100      	lsleq	r0, r0, #4
 80071f0:	3304      	addeq	r3, #4
 80071f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80071f6:	bf04      	itt	eq
 80071f8:	0080      	lsleq	r0, r0, #2
 80071fa:	3302      	addeq	r3, #2
 80071fc:	2800      	cmp	r0, #0
 80071fe:	db05      	blt.n	800720c <__hi0bits+0x38>
 8007200:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007204:	f103 0301 	add.w	r3, r3, #1
 8007208:	bf08      	it	eq
 800720a:	2320      	moveq	r3, #32
 800720c:	4618      	mov	r0, r3
 800720e:	4770      	bx	lr
 8007210:	2300      	movs	r3, #0
 8007212:	e7e4      	b.n	80071de <__hi0bits+0xa>

08007214 <__lo0bits>:
 8007214:	6803      	ldr	r3, [r0, #0]
 8007216:	f013 0207 	ands.w	r2, r3, #7
 800721a:	d00c      	beq.n	8007236 <__lo0bits+0x22>
 800721c:	07d9      	lsls	r1, r3, #31
 800721e:	d422      	bmi.n	8007266 <__lo0bits+0x52>
 8007220:	079a      	lsls	r2, r3, #30
 8007222:	bf49      	itett	mi
 8007224:	085b      	lsrmi	r3, r3, #1
 8007226:	089b      	lsrpl	r3, r3, #2
 8007228:	6003      	strmi	r3, [r0, #0]
 800722a:	2201      	movmi	r2, #1
 800722c:	bf5c      	itt	pl
 800722e:	6003      	strpl	r3, [r0, #0]
 8007230:	2202      	movpl	r2, #2
 8007232:	4610      	mov	r0, r2
 8007234:	4770      	bx	lr
 8007236:	b299      	uxth	r1, r3
 8007238:	b909      	cbnz	r1, 800723e <__lo0bits+0x2a>
 800723a:	0c1b      	lsrs	r3, r3, #16
 800723c:	2210      	movs	r2, #16
 800723e:	b2d9      	uxtb	r1, r3
 8007240:	b909      	cbnz	r1, 8007246 <__lo0bits+0x32>
 8007242:	3208      	adds	r2, #8
 8007244:	0a1b      	lsrs	r3, r3, #8
 8007246:	0719      	lsls	r1, r3, #28
 8007248:	bf04      	itt	eq
 800724a:	091b      	lsreq	r3, r3, #4
 800724c:	3204      	addeq	r2, #4
 800724e:	0799      	lsls	r1, r3, #30
 8007250:	bf04      	itt	eq
 8007252:	089b      	lsreq	r3, r3, #2
 8007254:	3202      	addeq	r2, #2
 8007256:	07d9      	lsls	r1, r3, #31
 8007258:	d403      	bmi.n	8007262 <__lo0bits+0x4e>
 800725a:	085b      	lsrs	r3, r3, #1
 800725c:	f102 0201 	add.w	r2, r2, #1
 8007260:	d003      	beq.n	800726a <__lo0bits+0x56>
 8007262:	6003      	str	r3, [r0, #0]
 8007264:	e7e5      	b.n	8007232 <__lo0bits+0x1e>
 8007266:	2200      	movs	r2, #0
 8007268:	e7e3      	b.n	8007232 <__lo0bits+0x1e>
 800726a:	2220      	movs	r2, #32
 800726c:	e7e1      	b.n	8007232 <__lo0bits+0x1e>
	...

08007270 <__i2b>:
 8007270:	b510      	push	{r4, lr}
 8007272:	460c      	mov	r4, r1
 8007274:	2101      	movs	r1, #1
 8007276:	f7ff ff05 	bl	8007084 <_Balloc>
 800727a:	4602      	mov	r2, r0
 800727c:	b928      	cbnz	r0, 800728a <__i2b+0x1a>
 800727e:	4b05      	ldr	r3, [pc, #20]	; (8007294 <__i2b+0x24>)
 8007280:	4805      	ldr	r0, [pc, #20]	; (8007298 <__i2b+0x28>)
 8007282:	f240 1145 	movw	r1, #325	; 0x145
 8007286:	f000 fca9 	bl	8007bdc <__assert_func>
 800728a:	2301      	movs	r3, #1
 800728c:	6144      	str	r4, [r0, #20]
 800728e:	6103      	str	r3, [r0, #16]
 8007290:	bd10      	pop	{r4, pc}
 8007292:	bf00      	nop
 8007294:	08008bb0 	.word	0x08008bb0
 8007298:	08008bc1 	.word	0x08008bc1

0800729c <__multiply>:
 800729c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a0:	4691      	mov	r9, r2
 80072a2:	690a      	ldr	r2, [r1, #16]
 80072a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	bfb8      	it	lt
 80072ac:	460b      	movlt	r3, r1
 80072ae:	460c      	mov	r4, r1
 80072b0:	bfbc      	itt	lt
 80072b2:	464c      	movlt	r4, r9
 80072b4:	4699      	movlt	r9, r3
 80072b6:	6927      	ldr	r7, [r4, #16]
 80072b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072bc:	68a3      	ldr	r3, [r4, #8]
 80072be:	6861      	ldr	r1, [r4, #4]
 80072c0:	eb07 060a 	add.w	r6, r7, sl
 80072c4:	42b3      	cmp	r3, r6
 80072c6:	b085      	sub	sp, #20
 80072c8:	bfb8      	it	lt
 80072ca:	3101      	addlt	r1, #1
 80072cc:	f7ff feda 	bl	8007084 <_Balloc>
 80072d0:	b930      	cbnz	r0, 80072e0 <__multiply+0x44>
 80072d2:	4602      	mov	r2, r0
 80072d4:	4b44      	ldr	r3, [pc, #272]	; (80073e8 <__multiply+0x14c>)
 80072d6:	4845      	ldr	r0, [pc, #276]	; (80073ec <__multiply+0x150>)
 80072d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80072dc:	f000 fc7e 	bl	8007bdc <__assert_func>
 80072e0:	f100 0514 	add.w	r5, r0, #20
 80072e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072e8:	462b      	mov	r3, r5
 80072ea:	2200      	movs	r2, #0
 80072ec:	4543      	cmp	r3, r8
 80072ee:	d321      	bcc.n	8007334 <__multiply+0x98>
 80072f0:	f104 0314 	add.w	r3, r4, #20
 80072f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072f8:	f109 0314 	add.w	r3, r9, #20
 80072fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007300:	9202      	str	r2, [sp, #8]
 8007302:	1b3a      	subs	r2, r7, r4
 8007304:	3a15      	subs	r2, #21
 8007306:	f022 0203 	bic.w	r2, r2, #3
 800730a:	3204      	adds	r2, #4
 800730c:	f104 0115 	add.w	r1, r4, #21
 8007310:	428f      	cmp	r7, r1
 8007312:	bf38      	it	cc
 8007314:	2204      	movcc	r2, #4
 8007316:	9201      	str	r2, [sp, #4]
 8007318:	9a02      	ldr	r2, [sp, #8]
 800731a:	9303      	str	r3, [sp, #12]
 800731c:	429a      	cmp	r2, r3
 800731e:	d80c      	bhi.n	800733a <__multiply+0x9e>
 8007320:	2e00      	cmp	r6, #0
 8007322:	dd03      	ble.n	800732c <__multiply+0x90>
 8007324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007328:	2b00      	cmp	r3, #0
 800732a:	d05b      	beq.n	80073e4 <__multiply+0x148>
 800732c:	6106      	str	r6, [r0, #16]
 800732e:	b005      	add	sp, #20
 8007330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007334:	f843 2b04 	str.w	r2, [r3], #4
 8007338:	e7d8      	b.n	80072ec <__multiply+0x50>
 800733a:	f8b3 a000 	ldrh.w	sl, [r3]
 800733e:	f1ba 0f00 	cmp.w	sl, #0
 8007342:	d024      	beq.n	800738e <__multiply+0xf2>
 8007344:	f104 0e14 	add.w	lr, r4, #20
 8007348:	46a9      	mov	r9, r5
 800734a:	f04f 0c00 	mov.w	ip, #0
 800734e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007352:	f8d9 1000 	ldr.w	r1, [r9]
 8007356:	fa1f fb82 	uxth.w	fp, r2
 800735a:	b289      	uxth	r1, r1
 800735c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007360:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007364:	f8d9 2000 	ldr.w	r2, [r9]
 8007368:	4461      	add	r1, ip
 800736a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800736e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007372:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007376:	b289      	uxth	r1, r1
 8007378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800737c:	4577      	cmp	r7, lr
 800737e:	f849 1b04 	str.w	r1, [r9], #4
 8007382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007386:	d8e2      	bhi.n	800734e <__multiply+0xb2>
 8007388:	9a01      	ldr	r2, [sp, #4]
 800738a:	f845 c002 	str.w	ip, [r5, r2]
 800738e:	9a03      	ldr	r2, [sp, #12]
 8007390:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007394:	3304      	adds	r3, #4
 8007396:	f1b9 0f00 	cmp.w	r9, #0
 800739a:	d021      	beq.n	80073e0 <__multiply+0x144>
 800739c:	6829      	ldr	r1, [r5, #0]
 800739e:	f104 0c14 	add.w	ip, r4, #20
 80073a2:	46ae      	mov	lr, r5
 80073a4:	f04f 0a00 	mov.w	sl, #0
 80073a8:	f8bc b000 	ldrh.w	fp, [ip]
 80073ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073b0:	fb09 220b 	mla	r2, r9, fp, r2
 80073b4:	4452      	add	r2, sl
 80073b6:	b289      	uxth	r1, r1
 80073b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073bc:	f84e 1b04 	str.w	r1, [lr], #4
 80073c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80073c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073c8:	f8be 1000 	ldrh.w	r1, [lr]
 80073cc:	fb09 110a 	mla	r1, r9, sl, r1
 80073d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80073d4:	4567      	cmp	r7, ip
 80073d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073da:	d8e5      	bhi.n	80073a8 <__multiply+0x10c>
 80073dc:	9a01      	ldr	r2, [sp, #4]
 80073de:	50a9      	str	r1, [r5, r2]
 80073e0:	3504      	adds	r5, #4
 80073e2:	e799      	b.n	8007318 <__multiply+0x7c>
 80073e4:	3e01      	subs	r6, #1
 80073e6:	e79b      	b.n	8007320 <__multiply+0x84>
 80073e8:	08008bb0 	.word	0x08008bb0
 80073ec:	08008bc1 	.word	0x08008bc1

080073f0 <__pow5mult>:
 80073f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f4:	4615      	mov	r5, r2
 80073f6:	f012 0203 	ands.w	r2, r2, #3
 80073fa:	4606      	mov	r6, r0
 80073fc:	460f      	mov	r7, r1
 80073fe:	d007      	beq.n	8007410 <__pow5mult+0x20>
 8007400:	4c25      	ldr	r4, [pc, #148]	; (8007498 <__pow5mult+0xa8>)
 8007402:	3a01      	subs	r2, #1
 8007404:	2300      	movs	r3, #0
 8007406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800740a:	f7ff fe9d 	bl	8007148 <__multadd>
 800740e:	4607      	mov	r7, r0
 8007410:	10ad      	asrs	r5, r5, #2
 8007412:	d03d      	beq.n	8007490 <__pow5mult+0xa0>
 8007414:	69f4      	ldr	r4, [r6, #28]
 8007416:	b97c      	cbnz	r4, 8007438 <__pow5mult+0x48>
 8007418:	2010      	movs	r0, #16
 800741a:	f7ff fd7f 	bl	8006f1c <malloc>
 800741e:	4602      	mov	r2, r0
 8007420:	61f0      	str	r0, [r6, #28]
 8007422:	b928      	cbnz	r0, 8007430 <__pow5mult+0x40>
 8007424:	4b1d      	ldr	r3, [pc, #116]	; (800749c <__pow5mult+0xac>)
 8007426:	481e      	ldr	r0, [pc, #120]	; (80074a0 <__pow5mult+0xb0>)
 8007428:	f240 11b3 	movw	r1, #435	; 0x1b3
 800742c:	f000 fbd6 	bl	8007bdc <__assert_func>
 8007430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007434:	6004      	str	r4, [r0, #0]
 8007436:	60c4      	str	r4, [r0, #12]
 8007438:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800743c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007440:	b94c      	cbnz	r4, 8007456 <__pow5mult+0x66>
 8007442:	f240 2171 	movw	r1, #625	; 0x271
 8007446:	4630      	mov	r0, r6
 8007448:	f7ff ff12 	bl	8007270 <__i2b>
 800744c:	2300      	movs	r3, #0
 800744e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007452:	4604      	mov	r4, r0
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	f04f 0900 	mov.w	r9, #0
 800745a:	07eb      	lsls	r3, r5, #31
 800745c:	d50a      	bpl.n	8007474 <__pow5mult+0x84>
 800745e:	4639      	mov	r1, r7
 8007460:	4622      	mov	r2, r4
 8007462:	4630      	mov	r0, r6
 8007464:	f7ff ff1a 	bl	800729c <__multiply>
 8007468:	4639      	mov	r1, r7
 800746a:	4680      	mov	r8, r0
 800746c:	4630      	mov	r0, r6
 800746e:	f7ff fe49 	bl	8007104 <_Bfree>
 8007472:	4647      	mov	r7, r8
 8007474:	106d      	asrs	r5, r5, #1
 8007476:	d00b      	beq.n	8007490 <__pow5mult+0xa0>
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	b938      	cbnz	r0, 800748c <__pow5mult+0x9c>
 800747c:	4622      	mov	r2, r4
 800747e:	4621      	mov	r1, r4
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff ff0b 	bl	800729c <__multiply>
 8007486:	6020      	str	r0, [r4, #0]
 8007488:	f8c0 9000 	str.w	r9, [r0]
 800748c:	4604      	mov	r4, r0
 800748e:	e7e4      	b.n	800745a <__pow5mult+0x6a>
 8007490:	4638      	mov	r0, r7
 8007492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007496:	bf00      	nop
 8007498:	08008d10 	.word	0x08008d10
 800749c:	08008b41 	.word	0x08008b41
 80074a0:	08008bc1 	.word	0x08008bc1

080074a4 <__lshift>:
 80074a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	460c      	mov	r4, r1
 80074aa:	6849      	ldr	r1, [r1, #4]
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	4607      	mov	r7, r0
 80074b6:	4691      	mov	r9, r2
 80074b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074bc:	f108 0601 	add.w	r6, r8, #1
 80074c0:	42b3      	cmp	r3, r6
 80074c2:	db0b      	blt.n	80074dc <__lshift+0x38>
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff fddd 	bl	8007084 <_Balloc>
 80074ca:	4605      	mov	r5, r0
 80074cc:	b948      	cbnz	r0, 80074e2 <__lshift+0x3e>
 80074ce:	4602      	mov	r2, r0
 80074d0:	4b28      	ldr	r3, [pc, #160]	; (8007574 <__lshift+0xd0>)
 80074d2:	4829      	ldr	r0, [pc, #164]	; (8007578 <__lshift+0xd4>)
 80074d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80074d8:	f000 fb80 	bl	8007bdc <__assert_func>
 80074dc:	3101      	adds	r1, #1
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	e7ee      	b.n	80074c0 <__lshift+0x1c>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f100 0114 	add.w	r1, r0, #20
 80074e8:	f100 0210 	add.w	r2, r0, #16
 80074ec:	4618      	mov	r0, r3
 80074ee:	4553      	cmp	r3, sl
 80074f0:	db33      	blt.n	800755a <__lshift+0xb6>
 80074f2:	6920      	ldr	r0, [r4, #16]
 80074f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074f8:	f104 0314 	add.w	r3, r4, #20
 80074fc:	f019 091f 	ands.w	r9, r9, #31
 8007500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007508:	d02b      	beq.n	8007562 <__lshift+0xbe>
 800750a:	f1c9 0e20 	rsb	lr, r9, #32
 800750e:	468a      	mov	sl, r1
 8007510:	2200      	movs	r2, #0
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	fa00 f009 	lsl.w	r0, r0, r9
 8007518:	4310      	orrs	r0, r2
 800751a:	f84a 0b04 	str.w	r0, [sl], #4
 800751e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007522:	459c      	cmp	ip, r3
 8007524:	fa22 f20e 	lsr.w	r2, r2, lr
 8007528:	d8f3      	bhi.n	8007512 <__lshift+0x6e>
 800752a:	ebac 0304 	sub.w	r3, ip, r4
 800752e:	3b15      	subs	r3, #21
 8007530:	f023 0303 	bic.w	r3, r3, #3
 8007534:	3304      	adds	r3, #4
 8007536:	f104 0015 	add.w	r0, r4, #21
 800753a:	4584      	cmp	ip, r0
 800753c:	bf38      	it	cc
 800753e:	2304      	movcc	r3, #4
 8007540:	50ca      	str	r2, [r1, r3]
 8007542:	b10a      	cbz	r2, 8007548 <__lshift+0xa4>
 8007544:	f108 0602 	add.w	r6, r8, #2
 8007548:	3e01      	subs	r6, #1
 800754a:	4638      	mov	r0, r7
 800754c:	612e      	str	r6, [r5, #16]
 800754e:	4621      	mov	r1, r4
 8007550:	f7ff fdd8 	bl	8007104 <_Bfree>
 8007554:	4628      	mov	r0, r5
 8007556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755a:	f842 0f04 	str.w	r0, [r2, #4]!
 800755e:	3301      	adds	r3, #1
 8007560:	e7c5      	b.n	80074ee <__lshift+0x4a>
 8007562:	3904      	subs	r1, #4
 8007564:	f853 2b04 	ldr.w	r2, [r3], #4
 8007568:	f841 2f04 	str.w	r2, [r1, #4]!
 800756c:	459c      	cmp	ip, r3
 800756e:	d8f9      	bhi.n	8007564 <__lshift+0xc0>
 8007570:	e7ea      	b.n	8007548 <__lshift+0xa4>
 8007572:	bf00      	nop
 8007574:	08008bb0 	.word	0x08008bb0
 8007578:	08008bc1 	.word	0x08008bc1

0800757c <__mcmp>:
 800757c:	b530      	push	{r4, r5, lr}
 800757e:	6902      	ldr	r2, [r0, #16]
 8007580:	690c      	ldr	r4, [r1, #16]
 8007582:	1b12      	subs	r2, r2, r4
 8007584:	d10e      	bne.n	80075a4 <__mcmp+0x28>
 8007586:	f100 0314 	add.w	r3, r0, #20
 800758a:	3114      	adds	r1, #20
 800758c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007590:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007594:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007598:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800759c:	42a5      	cmp	r5, r4
 800759e:	d003      	beq.n	80075a8 <__mcmp+0x2c>
 80075a0:	d305      	bcc.n	80075ae <__mcmp+0x32>
 80075a2:	2201      	movs	r2, #1
 80075a4:	4610      	mov	r0, r2
 80075a6:	bd30      	pop	{r4, r5, pc}
 80075a8:	4283      	cmp	r3, r0
 80075aa:	d3f3      	bcc.n	8007594 <__mcmp+0x18>
 80075ac:	e7fa      	b.n	80075a4 <__mcmp+0x28>
 80075ae:	f04f 32ff 	mov.w	r2, #4294967295
 80075b2:	e7f7      	b.n	80075a4 <__mcmp+0x28>

080075b4 <__mdiff>:
 80075b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b8:	460c      	mov	r4, r1
 80075ba:	4606      	mov	r6, r0
 80075bc:	4611      	mov	r1, r2
 80075be:	4620      	mov	r0, r4
 80075c0:	4690      	mov	r8, r2
 80075c2:	f7ff ffdb 	bl	800757c <__mcmp>
 80075c6:	1e05      	subs	r5, r0, #0
 80075c8:	d110      	bne.n	80075ec <__mdiff+0x38>
 80075ca:	4629      	mov	r1, r5
 80075cc:	4630      	mov	r0, r6
 80075ce:	f7ff fd59 	bl	8007084 <_Balloc>
 80075d2:	b930      	cbnz	r0, 80075e2 <__mdiff+0x2e>
 80075d4:	4b3a      	ldr	r3, [pc, #232]	; (80076c0 <__mdiff+0x10c>)
 80075d6:	4602      	mov	r2, r0
 80075d8:	f240 2137 	movw	r1, #567	; 0x237
 80075dc:	4839      	ldr	r0, [pc, #228]	; (80076c4 <__mdiff+0x110>)
 80075de:	f000 fafd 	bl	8007bdc <__assert_func>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ec:	bfa4      	itt	ge
 80075ee:	4643      	movge	r3, r8
 80075f0:	46a0      	movge	r8, r4
 80075f2:	4630      	mov	r0, r6
 80075f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075f8:	bfa6      	itte	ge
 80075fa:	461c      	movge	r4, r3
 80075fc:	2500      	movge	r5, #0
 80075fe:	2501      	movlt	r5, #1
 8007600:	f7ff fd40 	bl	8007084 <_Balloc>
 8007604:	b920      	cbnz	r0, 8007610 <__mdiff+0x5c>
 8007606:	4b2e      	ldr	r3, [pc, #184]	; (80076c0 <__mdiff+0x10c>)
 8007608:	4602      	mov	r2, r0
 800760a:	f240 2145 	movw	r1, #581	; 0x245
 800760e:	e7e5      	b.n	80075dc <__mdiff+0x28>
 8007610:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007614:	6926      	ldr	r6, [r4, #16]
 8007616:	60c5      	str	r5, [r0, #12]
 8007618:	f104 0914 	add.w	r9, r4, #20
 800761c:	f108 0514 	add.w	r5, r8, #20
 8007620:	f100 0e14 	add.w	lr, r0, #20
 8007624:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007628:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800762c:	f108 0210 	add.w	r2, r8, #16
 8007630:	46f2      	mov	sl, lr
 8007632:	2100      	movs	r1, #0
 8007634:	f859 3b04 	ldr.w	r3, [r9], #4
 8007638:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800763c:	fa11 f88b 	uxtah	r8, r1, fp
 8007640:	b299      	uxth	r1, r3
 8007642:	0c1b      	lsrs	r3, r3, #16
 8007644:	eba8 0801 	sub.w	r8, r8, r1
 8007648:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800764c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007650:	fa1f f888 	uxth.w	r8, r8
 8007654:	1419      	asrs	r1, r3, #16
 8007656:	454e      	cmp	r6, r9
 8007658:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800765c:	f84a 3b04 	str.w	r3, [sl], #4
 8007660:	d8e8      	bhi.n	8007634 <__mdiff+0x80>
 8007662:	1b33      	subs	r3, r6, r4
 8007664:	3b15      	subs	r3, #21
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	3304      	adds	r3, #4
 800766c:	3415      	adds	r4, #21
 800766e:	42a6      	cmp	r6, r4
 8007670:	bf38      	it	cc
 8007672:	2304      	movcc	r3, #4
 8007674:	441d      	add	r5, r3
 8007676:	4473      	add	r3, lr
 8007678:	469e      	mov	lr, r3
 800767a:	462e      	mov	r6, r5
 800767c:	4566      	cmp	r6, ip
 800767e:	d30e      	bcc.n	800769e <__mdiff+0xea>
 8007680:	f10c 0203 	add.w	r2, ip, #3
 8007684:	1b52      	subs	r2, r2, r5
 8007686:	f022 0203 	bic.w	r2, r2, #3
 800768a:	3d03      	subs	r5, #3
 800768c:	45ac      	cmp	ip, r5
 800768e:	bf38      	it	cc
 8007690:	2200      	movcc	r2, #0
 8007692:	4413      	add	r3, r2
 8007694:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007698:	b17a      	cbz	r2, 80076ba <__mdiff+0x106>
 800769a:	6107      	str	r7, [r0, #16]
 800769c:	e7a4      	b.n	80075e8 <__mdiff+0x34>
 800769e:	f856 8b04 	ldr.w	r8, [r6], #4
 80076a2:	fa11 f288 	uxtah	r2, r1, r8
 80076a6:	1414      	asrs	r4, r2, #16
 80076a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076ac:	b292      	uxth	r2, r2
 80076ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076b2:	f84e 2b04 	str.w	r2, [lr], #4
 80076b6:	1421      	asrs	r1, r4, #16
 80076b8:	e7e0      	b.n	800767c <__mdiff+0xc8>
 80076ba:	3f01      	subs	r7, #1
 80076bc:	e7ea      	b.n	8007694 <__mdiff+0xe0>
 80076be:	bf00      	nop
 80076c0:	08008bb0 	.word	0x08008bb0
 80076c4:	08008bc1 	.word	0x08008bc1

080076c8 <__d2b>:
 80076c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076cc:	460f      	mov	r7, r1
 80076ce:	2101      	movs	r1, #1
 80076d0:	ec59 8b10 	vmov	r8, r9, d0
 80076d4:	4616      	mov	r6, r2
 80076d6:	f7ff fcd5 	bl	8007084 <_Balloc>
 80076da:	4604      	mov	r4, r0
 80076dc:	b930      	cbnz	r0, 80076ec <__d2b+0x24>
 80076de:	4602      	mov	r2, r0
 80076e0:	4b24      	ldr	r3, [pc, #144]	; (8007774 <__d2b+0xac>)
 80076e2:	4825      	ldr	r0, [pc, #148]	; (8007778 <__d2b+0xb0>)
 80076e4:	f240 310f 	movw	r1, #783	; 0x30f
 80076e8:	f000 fa78 	bl	8007bdc <__assert_func>
 80076ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076f4:	bb2d      	cbnz	r5, 8007742 <__d2b+0x7a>
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	f1b8 0300 	subs.w	r3, r8, #0
 80076fc:	d026      	beq.n	800774c <__d2b+0x84>
 80076fe:	4668      	mov	r0, sp
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	f7ff fd87 	bl	8007214 <__lo0bits>
 8007706:	e9dd 1200 	ldrd	r1, r2, [sp]
 800770a:	b1e8      	cbz	r0, 8007748 <__d2b+0x80>
 800770c:	f1c0 0320 	rsb	r3, r0, #32
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	430b      	orrs	r3, r1
 8007716:	40c2      	lsrs	r2, r0
 8007718:	6163      	str	r3, [r4, #20]
 800771a:	9201      	str	r2, [sp, #4]
 800771c:	9b01      	ldr	r3, [sp, #4]
 800771e:	61a3      	str	r3, [r4, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	bf14      	ite	ne
 8007724:	2202      	movne	r2, #2
 8007726:	2201      	moveq	r2, #1
 8007728:	6122      	str	r2, [r4, #16]
 800772a:	b1bd      	cbz	r5, 800775c <__d2b+0x94>
 800772c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007730:	4405      	add	r5, r0
 8007732:	603d      	str	r5, [r7, #0]
 8007734:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007738:	6030      	str	r0, [r6, #0]
 800773a:	4620      	mov	r0, r4
 800773c:	b003      	add	sp, #12
 800773e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007746:	e7d6      	b.n	80076f6 <__d2b+0x2e>
 8007748:	6161      	str	r1, [r4, #20]
 800774a:	e7e7      	b.n	800771c <__d2b+0x54>
 800774c:	a801      	add	r0, sp, #4
 800774e:	f7ff fd61 	bl	8007214 <__lo0bits>
 8007752:	9b01      	ldr	r3, [sp, #4]
 8007754:	6163      	str	r3, [r4, #20]
 8007756:	3020      	adds	r0, #32
 8007758:	2201      	movs	r2, #1
 800775a:	e7e5      	b.n	8007728 <__d2b+0x60>
 800775c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007760:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007764:	6038      	str	r0, [r7, #0]
 8007766:	6918      	ldr	r0, [r3, #16]
 8007768:	f7ff fd34 	bl	80071d4 <__hi0bits>
 800776c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007770:	e7e2      	b.n	8007738 <__d2b+0x70>
 8007772:	bf00      	nop
 8007774:	08008bb0 	.word	0x08008bb0
 8007778:	08008bc1 	.word	0x08008bc1

0800777c <__ssputs_r>:
 800777c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007780:	688e      	ldr	r6, [r1, #8]
 8007782:	461f      	mov	r7, r3
 8007784:	42be      	cmp	r6, r7
 8007786:	680b      	ldr	r3, [r1, #0]
 8007788:	4682      	mov	sl, r0
 800778a:	460c      	mov	r4, r1
 800778c:	4690      	mov	r8, r2
 800778e:	d82c      	bhi.n	80077ea <__ssputs_r+0x6e>
 8007790:	898a      	ldrh	r2, [r1, #12]
 8007792:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007796:	d026      	beq.n	80077e6 <__ssputs_r+0x6a>
 8007798:	6965      	ldr	r5, [r4, #20]
 800779a:	6909      	ldr	r1, [r1, #16]
 800779c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077a0:	eba3 0901 	sub.w	r9, r3, r1
 80077a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077a8:	1c7b      	adds	r3, r7, #1
 80077aa:	444b      	add	r3, r9
 80077ac:	106d      	asrs	r5, r5, #1
 80077ae:	429d      	cmp	r5, r3
 80077b0:	bf38      	it	cc
 80077b2:	461d      	movcc	r5, r3
 80077b4:	0553      	lsls	r3, r2, #21
 80077b6:	d527      	bpl.n	8007808 <__ssputs_r+0x8c>
 80077b8:	4629      	mov	r1, r5
 80077ba:	f7ff fbd7 	bl	8006f6c <_malloc_r>
 80077be:	4606      	mov	r6, r0
 80077c0:	b360      	cbz	r0, 800781c <__ssputs_r+0xa0>
 80077c2:	6921      	ldr	r1, [r4, #16]
 80077c4:	464a      	mov	r2, r9
 80077c6:	f7fe fcd2 	bl	800616e <memcpy>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d4:	81a3      	strh	r3, [r4, #12]
 80077d6:	6126      	str	r6, [r4, #16]
 80077d8:	6165      	str	r5, [r4, #20]
 80077da:	444e      	add	r6, r9
 80077dc:	eba5 0509 	sub.w	r5, r5, r9
 80077e0:	6026      	str	r6, [r4, #0]
 80077e2:	60a5      	str	r5, [r4, #8]
 80077e4:	463e      	mov	r6, r7
 80077e6:	42be      	cmp	r6, r7
 80077e8:	d900      	bls.n	80077ec <__ssputs_r+0x70>
 80077ea:	463e      	mov	r6, r7
 80077ec:	6820      	ldr	r0, [r4, #0]
 80077ee:	4632      	mov	r2, r6
 80077f0:	4641      	mov	r1, r8
 80077f2:	f000 f9c9 	bl	8007b88 <memmove>
 80077f6:	68a3      	ldr	r3, [r4, #8]
 80077f8:	1b9b      	subs	r3, r3, r6
 80077fa:	60a3      	str	r3, [r4, #8]
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	4433      	add	r3, r6
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	2000      	movs	r0, #0
 8007804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007808:	462a      	mov	r2, r5
 800780a:	f000 fa2d 	bl	8007c68 <_realloc_r>
 800780e:	4606      	mov	r6, r0
 8007810:	2800      	cmp	r0, #0
 8007812:	d1e0      	bne.n	80077d6 <__ssputs_r+0x5a>
 8007814:	6921      	ldr	r1, [r4, #16]
 8007816:	4650      	mov	r0, sl
 8007818:	f7ff fb34 	bl	8006e84 <_free_r>
 800781c:	230c      	movs	r3, #12
 800781e:	f8ca 3000 	str.w	r3, [sl]
 8007822:	89a3      	ldrh	r3, [r4, #12]
 8007824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	f04f 30ff 	mov.w	r0, #4294967295
 800782e:	e7e9      	b.n	8007804 <__ssputs_r+0x88>

08007830 <_svfiprintf_r>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	4698      	mov	r8, r3
 8007836:	898b      	ldrh	r3, [r1, #12]
 8007838:	061b      	lsls	r3, r3, #24
 800783a:	b09d      	sub	sp, #116	; 0x74
 800783c:	4607      	mov	r7, r0
 800783e:	460d      	mov	r5, r1
 8007840:	4614      	mov	r4, r2
 8007842:	d50e      	bpl.n	8007862 <_svfiprintf_r+0x32>
 8007844:	690b      	ldr	r3, [r1, #16]
 8007846:	b963      	cbnz	r3, 8007862 <_svfiprintf_r+0x32>
 8007848:	2140      	movs	r1, #64	; 0x40
 800784a:	f7ff fb8f 	bl	8006f6c <_malloc_r>
 800784e:	6028      	str	r0, [r5, #0]
 8007850:	6128      	str	r0, [r5, #16]
 8007852:	b920      	cbnz	r0, 800785e <_svfiprintf_r+0x2e>
 8007854:	230c      	movs	r3, #12
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	f04f 30ff 	mov.w	r0, #4294967295
 800785c:	e0d0      	b.n	8007a00 <_svfiprintf_r+0x1d0>
 800785e:	2340      	movs	r3, #64	; 0x40
 8007860:	616b      	str	r3, [r5, #20]
 8007862:	2300      	movs	r3, #0
 8007864:	9309      	str	r3, [sp, #36]	; 0x24
 8007866:	2320      	movs	r3, #32
 8007868:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800786c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007870:	2330      	movs	r3, #48	; 0x30
 8007872:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007a18 <_svfiprintf_r+0x1e8>
 8007876:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800787a:	f04f 0901 	mov.w	r9, #1
 800787e:	4623      	mov	r3, r4
 8007880:	469a      	mov	sl, r3
 8007882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007886:	b10a      	cbz	r2, 800788c <_svfiprintf_r+0x5c>
 8007888:	2a25      	cmp	r2, #37	; 0x25
 800788a:	d1f9      	bne.n	8007880 <_svfiprintf_r+0x50>
 800788c:	ebba 0b04 	subs.w	fp, sl, r4
 8007890:	d00b      	beq.n	80078aa <_svfiprintf_r+0x7a>
 8007892:	465b      	mov	r3, fp
 8007894:	4622      	mov	r2, r4
 8007896:	4629      	mov	r1, r5
 8007898:	4638      	mov	r0, r7
 800789a:	f7ff ff6f 	bl	800777c <__ssputs_r>
 800789e:	3001      	adds	r0, #1
 80078a0:	f000 80a9 	beq.w	80079f6 <_svfiprintf_r+0x1c6>
 80078a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078a6:	445a      	add	r2, fp
 80078a8:	9209      	str	r2, [sp, #36]	; 0x24
 80078aa:	f89a 3000 	ldrb.w	r3, [sl]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 80a1 	beq.w	80079f6 <_svfiprintf_r+0x1c6>
 80078b4:	2300      	movs	r3, #0
 80078b6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078be:	f10a 0a01 	add.w	sl, sl, #1
 80078c2:	9304      	str	r3, [sp, #16]
 80078c4:	9307      	str	r3, [sp, #28]
 80078c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ca:	931a      	str	r3, [sp, #104]	; 0x68
 80078cc:	4654      	mov	r4, sl
 80078ce:	2205      	movs	r2, #5
 80078d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d4:	4850      	ldr	r0, [pc, #320]	; (8007a18 <_svfiprintf_r+0x1e8>)
 80078d6:	f7f8 fc7b 	bl	80001d0 <memchr>
 80078da:	9a04      	ldr	r2, [sp, #16]
 80078dc:	b9d8      	cbnz	r0, 8007916 <_svfiprintf_r+0xe6>
 80078de:	06d0      	lsls	r0, r2, #27
 80078e0:	bf44      	itt	mi
 80078e2:	2320      	movmi	r3, #32
 80078e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078e8:	0711      	lsls	r1, r2, #28
 80078ea:	bf44      	itt	mi
 80078ec:	232b      	movmi	r3, #43	; 0x2b
 80078ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078f2:	f89a 3000 	ldrb.w	r3, [sl]
 80078f6:	2b2a      	cmp	r3, #42	; 0x2a
 80078f8:	d015      	beq.n	8007926 <_svfiprintf_r+0xf6>
 80078fa:	9a07      	ldr	r2, [sp, #28]
 80078fc:	4654      	mov	r4, sl
 80078fe:	2000      	movs	r0, #0
 8007900:	f04f 0c0a 	mov.w	ip, #10
 8007904:	4621      	mov	r1, r4
 8007906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800790a:	3b30      	subs	r3, #48	; 0x30
 800790c:	2b09      	cmp	r3, #9
 800790e:	d94d      	bls.n	80079ac <_svfiprintf_r+0x17c>
 8007910:	b1b0      	cbz	r0, 8007940 <_svfiprintf_r+0x110>
 8007912:	9207      	str	r2, [sp, #28]
 8007914:	e014      	b.n	8007940 <_svfiprintf_r+0x110>
 8007916:	eba0 0308 	sub.w	r3, r0, r8
 800791a:	fa09 f303 	lsl.w	r3, r9, r3
 800791e:	4313      	orrs	r3, r2
 8007920:	9304      	str	r3, [sp, #16]
 8007922:	46a2      	mov	sl, r4
 8007924:	e7d2      	b.n	80078cc <_svfiprintf_r+0x9c>
 8007926:	9b03      	ldr	r3, [sp, #12]
 8007928:	1d19      	adds	r1, r3, #4
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	9103      	str	r1, [sp, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	bfbb      	ittet	lt
 8007932:	425b      	neglt	r3, r3
 8007934:	f042 0202 	orrlt.w	r2, r2, #2
 8007938:	9307      	strge	r3, [sp, #28]
 800793a:	9307      	strlt	r3, [sp, #28]
 800793c:	bfb8      	it	lt
 800793e:	9204      	strlt	r2, [sp, #16]
 8007940:	7823      	ldrb	r3, [r4, #0]
 8007942:	2b2e      	cmp	r3, #46	; 0x2e
 8007944:	d10c      	bne.n	8007960 <_svfiprintf_r+0x130>
 8007946:	7863      	ldrb	r3, [r4, #1]
 8007948:	2b2a      	cmp	r3, #42	; 0x2a
 800794a:	d134      	bne.n	80079b6 <_svfiprintf_r+0x186>
 800794c:	9b03      	ldr	r3, [sp, #12]
 800794e:	1d1a      	adds	r2, r3, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	9203      	str	r2, [sp, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	bfb8      	it	lt
 8007958:	f04f 33ff 	movlt.w	r3, #4294967295
 800795c:	3402      	adds	r4, #2
 800795e:	9305      	str	r3, [sp, #20]
 8007960:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007a28 <_svfiprintf_r+0x1f8>
 8007964:	7821      	ldrb	r1, [r4, #0]
 8007966:	2203      	movs	r2, #3
 8007968:	4650      	mov	r0, sl
 800796a:	f7f8 fc31 	bl	80001d0 <memchr>
 800796e:	b138      	cbz	r0, 8007980 <_svfiprintf_r+0x150>
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	eba0 000a 	sub.w	r0, r0, sl
 8007976:	2240      	movs	r2, #64	; 0x40
 8007978:	4082      	lsls	r2, r0
 800797a:	4313      	orrs	r3, r2
 800797c:	3401      	adds	r4, #1
 800797e:	9304      	str	r3, [sp, #16]
 8007980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007984:	4825      	ldr	r0, [pc, #148]	; (8007a1c <_svfiprintf_r+0x1ec>)
 8007986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800798a:	2206      	movs	r2, #6
 800798c:	f7f8 fc20 	bl	80001d0 <memchr>
 8007990:	2800      	cmp	r0, #0
 8007992:	d038      	beq.n	8007a06 <_svfiprintf_r+0x1d6>
 8007994:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <_svfiprintf_r+0x1f0>)
 8007996:	bb1b      	cbnz	r3, 80079e0 <_svfiprintf_r+0x1b0>
 8007998:	9b03      	ldr	r3, [sp, #12]
 800799a:	3307      	adds	r3, #7
 800799c:	f023 0307 	bic.w	r3, r3, #7
 80079a0:	3308      	adds	r3, #8
 80079a2:	9303      	str	r3, [sp, #12]
 80079a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a6:	4433      	add	r3, r6
 80079a8:	9309      	str	r3, [sp, #36]	; 0x24
 80079aa:	e768      	b.n	800787e <_svfiprintf_r+0x4e>
 80079ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80079b0:	460c      	mov	r4, r1
 80079b2:	2001      	movs	r0, #1
 80079b4:	e7a6      	b.n	8007904 <_svfiprintf_r+0xd4>
 80079b6:	2300      	movs	r3, #0
 80079b8:	3401      	adds	r4, #1
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	4619      	mov	r1, r3
 80079be:	f04f 0c0a 	mov.w	ip, #10
 80079c2:	4620      	mov	r0, r4
 80079c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079c8:	3a30      	subs	r2, #48	; 0x30
 80079ca:	2a09      	cmp	r2, #9
 80079cc:	d903      	bls.n	80079d6 <_svfiprintf_r+0x1a6>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0c6      	beq.n	8007960 <_svfiprintf_r+0x130>
 80079d2:	9105      	str	r1, [sp, #20]
 80079d4:	e7c4      	b.n	8007960 <_svfiprintf_r+0x130>
 80079d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80079da:	4604      	mov	r4, r0
 80079dc:	2301      	movs	r3, #1
 80079de:	e7f0      	b.n	80079c2 <_svfiprintf_r+0x192>
 80079e0:	ab03      	add	r3, sp, #12
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	462a      	mov	r2, r5
 80079e6:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <_svfiprintf_r+0x1f4>)
 80079e8:	a904      	add	r1, sp, #16
 80079ea:	4638      	mov	r0, r7
 80079ec:	f7fd fe40 	bl	8005670 <_printf_float>
 80079f0:	1c42      	adds	r2, r0, #1
 80079f2:	4606      	mov	r6, r0
 80079f4:	d1d6      	bne.n	80079a4 <_svfiprintf_r+0x174>
 80079f6:	89ab      	ldrh	r3, [r5, #12]
 80079f8:	065b      	lsls	r3, r3, #25
 80079fa:	f53f af2d 	bmi.w	8007858 <_svfiprintf_r+0x28>
 80079fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a00:	b01d      	add	sp, #116	; 0x74
 8007a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a06:	ab03      	add	r3, sp, #12
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	462a      	mov	r2, r5
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <_svfiprintf_r+0x1f4>)
 8007a0e:	a904      	add	r1, sp, #16
 8007a10:	4638      	mov	r0, r7
 8007a12:	f7fe f8d1 	bl	8005bb8 <_printf_i>
 8007a16:	e7eb      	b.n	80079f0 <_svfiprintf_r+0x1c0>
 8007a18:	08008d1c 	.word	0x08008d1c
 8007a1c:	08008d26 	.word	0x08008d26
 8007a20:	08005671 	.word	0x08005671
 8007a24:	0800777d 	.word	0x0800777d
 8007a28:	08008d22 	.word	0x08008d22

08007a2c <__sflush_r>:
 8007a2c:	898a      	ldrh	r2, [r1, #12]
 8007a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a32:	4605      	mov	r5, r0
 8007a34:	0710      	lsls	r0, r2, #28
 8007a36:	460c      	mov	r4, r1
 8007a38:	d458      	bmi.n	8007aec <__sflush_r+0xc0>
 8007a3a:	684b      	ldr	r3, [r1, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dc05      	bgt.n	8007a4c <__sflush_r+0x20>
 8007a40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dc02      	bgt.n	8007a4c <__sflush_r+0x20>
 8007a46:	2000      	movs	r0, #0
 8007a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a4e:	2e00      	cmp	r6, #0
 8007a50:	d0f9      	beq.n	8007a46 <__sflush_r+0x1a>
 8007a52:	2300      	movs	r3, #0
 8007a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a58:	682f      	ldr	r7, [r5, #0]
 8007a5a:	6a21      	ldr	r1, [r4, #32]
 8007a5c:	602b      	str	r3, [r5, #0]
 8007a5e:	d032      	beq.n	8007ac6 <__sflush_r+0x9a>
 8007a60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	075a      	lsls	r2, r3, #29
 8007a66:	d505      	bpl.n	8007a74 <__sflush_r+0x48>
 8007a68:	6863      	ldr	r3, [r4, #4]
 8007a6a:	1ac0      	subs	r0, r0, r3
 8007a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a6e:	b10b      	cbz	r3, 8007a74 <__sflush_r+0x48>
 8007a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a72:	1ac0      	subs	r0, r0, r3
 8007a74:	2300      	movs	r3, #0
 8007a76:	4602      	mov	r2, r0
 8007a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a7a:	6a21      	ldr	r1, [r4, #32]
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b0      	blx	r6
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	d106      	bne.n	8007a94 <__sflush_r+0x68>
 8007a86:	6829      	ldr	r1, [r5, #0]
 8007a88:	291d      	cmp	r1, #29
 8007a8a:	d82b      	bhi.n	8007ae4 <__sflush_r+0xb8>
 8007a8c:	4a29      	ldr	r2, [pc, #164]	; (8007b34 <__sflush_r+0x108>)
 8007a8e:	410a      	asrs	r2, r1
 8007a90:	07d6      	lsls	r6, r2, #31
 8007a92:	d427      	bmi.n	8007ae4 <__sflush_r+0xb8>
 8007a94:	2200      	movs	r2, #0
 8007a96:	6062      	str	r2, [r4, #4]
 8007a98:	04d9      	lsls	r1, r3, #19
 8007a9a:	6922      	ldr	r2, [r4, #16]
 8007a9c:	6022      	str	r2, [r4, #0]
 8007a9e:	d504      	bpl.n	8007aaa <__sflush_r+0x7e>
 8007aa0:	1c42      	adds	r2, r0, #1
 8007aa2:	d101      	bne.n	8007aa8 <__sflush_r+0x7c>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b903      	cbnz	r3, 8007aaa <__sflush_r+0x7e>
 8007aa8:	6560      	str	r0, [r4, #84]	; 0x54
 8007aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aac:	602f      	str	r7, [r5, #0]
 8007aae:	2900      	cmp	r1, #0
 8007ab0:	d0c9      	beq.n	8007a46 <__sflush_r+0x1a>
 8007ab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ab6:	4299      	cmp	r1, r3
 8007ab8:	d002      	beq.n	8007ac0 <__sflush_r+0x94>
 8007aba:	4628      	mov	r0, r5
 8007abc:	f7ff f9e2 	bl	8006e84 <_free_r>
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ac4:	e7c0      	b.n	8007a48 <__sflush_r+0x1c>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4628      	mov	r0, r5
 8007aca:	47b0      	blx	r6
 8007acc:	1c41      	adds	r1, r0, #1
 8007ace:	d1c8      	bne.n	8007a62 <__sflush_r+0x36>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0c5      	beq.n	8007a62 <__sflush_r+0x36>
 8007ad6:	2b1d      	cmp	r3, #29
 8007ad8:	d001      	beq.n	8007ade <__sflush_r+0xb2>
 8007ada:	2b16      	cmp	r3, #22
 8007adc:	d101      	bne.n	8007ae2 <__sflush_r+0xb6>
 8007ade:	602f      	str	r7, [r5, #0]
 8007ae0:	e7b1      	b.n	8007a46 <__sflush_r+0x1a>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae8:	81a3      	strh	r3, [r4, #12]
 8007aea:	e7ad      	b.n	8007a48 <__sflush_r+0x1c>
 8007aec:	690f      	ldr	r7, [r1, #16]
 8007aee:	2f00      	cmp	r7, #0
 8007af0:	d0a9      	beq.n	8007a46 <__sflush_r+0x1a>
 8007af2:	0793      	lsls	r3, r2, #30
 8007af4:	680e      	ldr	r6, [r1, #0]
 8007af6:	bf08      	it	eq
 8007af8:	694b      	ldreq	r3, [r1, #20]
 8007afa:	600f      	str	r7, [r1, #0]
 8007afc:	bf18      	it	ne
 8007afe:	2300      	movne	r3, #0
 8007b00:	eba6 0807 	sub.w	r8, r6, r7
 8007b04:	608b      	str	r3, [r1, #8]
 8007b06:	f1b8 0f00 	cmp.w	r8, #0
 8007b0a:	dd9c      	ble.n	8007a46 <__sflush_r+0x1a>
 8007b0c:	6a21      	ldr	r1, [r4, #32]
 8007b0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b10:	4643      	mov	r3, r8
 8007b12:	463a      	mov	r2, r7
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b0      	blx	r6
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	dc06      	bgt.n	8007b2a <__sflush_r+0xfe>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b22:	81a3      	strh	r3, [r4, #12]
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	e78e      	b.n	8007a48 <__sflush_r+0x1c>
 8007b2a:	4407      	add	r7, r0
 8007b2c:	eba8 0800 	sub.w	r8, r8, r0
 8007b30:	e7e9      	b.n	8007b06 <__sflush_r+0xda>
 8007b32:	bf00      	nop
 8007b34:	dfbffffe 	.word	0xdfbffffe

08007b38 <_fflush_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	690b      	ldr	r3, [r1, #16]
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	b913      	cbnz	r3, 8007b48 <_fflush_r+0x10>
 8007b42:	2500      	movs	r5, #0
 8007b44:	4628      	mov	r0, r5
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	b118      	cbz	r0, 8007b52 <_fflush_r+0x1a>
 8007b4a:	6a03      	ldr	r3, [r0, #32]
 8007b4c:	b90b      	cbnz	r3, 8007b52 <_fflush_r+0x1a>
 8007b4e:	f7fe f9e1 	bl	8005f14 <__sinit>
 8007b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f3      	beq.n	8007b42 <_fflush_r+0xa>
 8007b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b5c:	07d0      	lsls	r0, r2, #31
 8007b5e:	d404      	bmi.n	8007b6a <_fflush_r+0x32>
 8007b60:	0599      	lsls	r1, r3, #22
 8007b62:	d402      	bmi.n	8007b6a <_fflush_r+0x32>
 8007b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b66:	f7fe fb00 	bl	800616a <__retarget_lock_acquire_recursive>
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	f7ff ff5d 	bl	8007a2c <__sflush_r>
 8007b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b74:	07da      	lsls	r2, r3, #31
 8007b76:	4605      	mov	r5, r0
 8007b78:	d4e4      	bmi.n	8007b44 <_fflush_r+0xc>
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	059b      	lsls	r3, r3, #22
 8007b7e:	d4e1      	bmi.n	8007b44 <_fflush_r+0xc>
 8007b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b82:	f7fe faf3 	bl	800616c <__retarget_lock_release_recursive>
 8007b86:	e7dd      	b.n	8007b44 <_fflush_r+0xc>

08007b88 <memmove>:
 8007b88:	4288      	cmp	r0, r1
 8007b8a:	b510      	push	{r4, lr}
 8007b8c:	eb01 0402 	add.w	r4, r1, r2
 8007b90:	d902      	bls.n	8007b98 <memmove+0x10>
 8007b92:	4284      	cmp	r4, r0
 8007b94:	4623      	mov	r3, r4
 8007b96:	d807      	bhi.n	8007ba8 <memmove+0x20>
 8007b98:	1e43      	subs	r3, r0, #1
 8007b9a:	42a1      	cmp	r1, r4
 8007b9c:	d008      	beq.n	8007bb0 <memmove+0x28>
 8007b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ba6:	e7f8      	b.n	8007b9a <memmove+0x12>
 8007ba8:	4402      	add	r2, r0
 8007baa:	4601      	mov	r1, r0
 8007bac:	428a      	cmp	r2, r1
 8007bae:	d100      	bne.n	8007bb2 <memmove+0x2a>
 8007bb0:	bd10      	pop	{r4, pc}
 8007bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bba:	e7f7      	b.n	8007bac <memmove+0x24>

08007bbc <_sbrk_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4d06      	ldr	r5, [pc, #24]	; (8007bd8 <_sbrk_r+0x1c>)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	602b      	str	r3, [r5, #0]
 8007bc8:	f7f9 fd5a 	bl	8001680 <_sbrk>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_sbrk_r+0x1a>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_sbrk_r+0x1a>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	200005f0 	.word	0x200005f0

08007bdc <__assert_func>:
 8007bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bde:	4614      	mov	r4, r2
 8007be0:	461a      	mov	r2, r3
 8007be2:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <__assert_func+0x2c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4605      	mov	r5, r0
 8007be8:	68d8      	ldr	r0, [r3, #12]
 8007bea:	b14c      	cbz	r4, 8007c00 <__assert_func+0x24>
 8007bec:	4b07      	ldr	r3, [pc, #28]	; (8007c0c <__assert_func+0x30>)
 8007bee:	9100      	str	r1, [sp, #0]
 8007bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bf4:	4906      	ldr	r1, [pc, #24]	; (8007c10 <__assert_func+0x34>)
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	f000 f872 	bl	8007ce0 <fiprintf>
 8007bfc:	f000 f882 	bl	8007d04 <abort>
 8007c00:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <__assert_func+0x38>)
 8007c02:	461c      	mov	r4, r3
 8007c04:	e7f3      	b.n	8007bee <__assert_func+0x12>
 8007c06:	bf00      	nop
 8007c08:	20000064 	.word	0x20000064
 8007c0c:	08008d37 	.word	0x08008d37
 8007c10:	08008d44 	.word	0x08008d44
 8007c14:	08008d72 	.word	0x08008d72

08007c18 <_calloc_r>:
 8007c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c1a:	fba1 2402 	umull	r2, r4, r1, r2
 8007c1e:	b94c      	cbnz	r4, 8007c34 <_calloc_r+0x1c>
 8007c20:	4611      	mov	r1, r2
 8007c22:	9201      	str	r2, [sp, #4]
 8007c24:	f7ff f9a2 	bl	8006f6c <_malloc_r>
 8007c28:	9a01      	ldr	r2, [sp, #4]
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	b930      	cbnz	r0, 8007c3c <_calloc_r+0x24>
 8007c2e:	4628      	mov	r0, r5
 8007c30:	b003      	add	sp, #12
 8007c32:	bd30      	pop	{r4, r5, pc}
 8007c34:	220c      	movs	r2, #12
 8007c36:	6002      	str	r2, [r0, #0]
 8007c38:	2500      	movs	r5, #0
 8007c3a:	e7f8      	b.n	8007c2e <_calloc_r+0x16>
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	f7fe fa16 	bl	800606e <memset>
 8007c42:	e7f4      	b.n	8007c2e <_calloc_r+0x16>

08007c44 <__ascii_mbtowc>:
 8007c44:	b082      	sub	sp, #8
 8007c46:	b901      	cbnz	r1, 8007c4a <__ascii_mbtowc+0x6>
 8007c48:	a901      	add	r1, sp, #4
 8007c4a:	b142      	cbz	r2, 8007c5e <__ascii_mbtowc+0x1a>
 8007c4c:	b14b      	cbz	r3, 8007c62 <__ascii_mbtowc+0x1e>
 8007c4e:	7813      	ldrb	r3, [r2, #0]
 8007c50:	600b      	str	r3, [r1, #0]
 8007c52:	7812      	ldrb	r2, [r2, #0]
 8007c54:	1e10      	subs	r0, r2, #0
 8007c56:	bf18      	it	ne
 8007c58:	2001      	movne	r0, #1
 8007c5a:	b002      	add	sp, #8
 8007c5c:	4770      	bx	lr
 8007c5e:	4610      	mov	r0, r2
 8007c60:	e7fb      	b.n	8007c5a <__ascii_mbtowc+0x16>
 8007c62:	f06f 0001 	mvn.w	r0, #1
 8007c66:	e7f8      	b.n	8007c5a <__ascii_mbtowc+0x16>

08007c68 <_realloc_r>:
 8007c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6c:	4680      	mov	r8, r0
 8007c6e:	4614      	mov	r4, r2
 8007c70:	460e      	mov	r6, r1
 8007c72:	b921      	cbnz	r1, 8007c7e <_realloc_r+0x16>
 8007c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c78:	4611      	mov	r1, r2
 8007c7a:	f7ff b977 	b.w	8006f6c <_malloc_r>
 8007c7e:	b92a      	cbnz	r2, 8007c8c <_realloc_r+0x24>
 8007c80:	f7ff f900 	bl	8006e84 <_free_r>
 8007c84:	4625      	mov	r5, r4
 8007c86:	4628      	mov	r0, r5
 8007c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c8c:	f000 f841 	bl	8007d12 <_malloc_usable_size_r>
 8007c90:	4284      	cmp	r4, r0
 8007c92:	4607      	mov	r7, r0
 8007c94:	d802      	bhi.n	8007c9c <_realloc_r+0x34>
 8007c96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c9a:	d812      	bhi.n	8007cc2 <_realloc_r+0x5a>
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	f7ff f964 	bl	8006f6c <_malloc_r>
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d0ed      	beq.n	8007c86 <_realloc_r+0x1e>
 8007caa:	42bc      	cmp	r4, r7
 8007cac:	4622      	mov	r2, r4
 8007cae:	4631      	mov	r1, r6
 8007cb0:	bf28      	it	cs
 8007cb2:	463a      	movcs	r2, r7
 8007cb4:	f7fe fa5b 	bl	800616e <memcpy>
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4640      	mov	r0, r8
 8007cbc:	f7ff f8e2 	bl	8006e84 <_free_r>
 8007cc0:	e7e1      	b.n	8007c86 <_realloc_r+0x1e>
 8007cc2:	4635      	mov	r5, r6
 8007cc4:	e7df      	b.n	8007c86 <_realloc_r+0x1e>

08007cc6 <__ascii_wctomb>:
 8007cc6:	b149      	cbz	r1, 8007cdc <__ascii_wctomb+0x16>
 8007cc8:	2aff      	cmp	r2, #255	; 0xff
 8007cca:	bf85      	ittet	hi
 8007ccc:	238a      	movhi	r3, #138	; 0x8a
 8007cce:	6003      	strhi	r3, [r0, #0]
 8007cd0:	700a      	strbls	r2, [r1, #0]
 8007cd2:	f04f 30ff 	movhi.w	r0, #4294967295
 8007cd6:	bf98      	it	ls
 8007cd8:	2001      	movls	r0, #1
 8007cda:	4770      	bx	lr
 8007cdc:	4608      	mov	r0, r1
 8007cde:	4770      	bx	lr

08007ce0 <fiprintf>:
 8007ce0:	b40e      	push	{r1, r2, r3}
 8007ce2:	b503      	push	{r0, r1, lr}
 8007ce4:	4601      	mov	r1, r0
 8007ce6:	ab03      	add	r3, sp, #12
 8007ce8:	4805      	ldr	r0, [pc, #20]	; (8007d00 <fiprintf+0x20>)
 8007cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cee:	6800      	ldr	r0, [r0, #0]
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	f000 f83f 	bl	8007d74 <_vfiprintf_r>
 8007cf6:	b002      	add	sp, #8
 8007cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cfc:	b003      	add	sp, #12
 8007cfe:	4770      	bx	lr
 8007d00:	20000064 	.word	0x20000064

08007d04 <abort>:
 8007d04:	b508      	push	{r3, lr}
 8007d06:	2006      	movs	r0, #6
 8007d08:	f000 fa0c 	bl	8008124 <raise>
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	f7f9 fc3f 	bl	8001590 <_exit>

08007d12 <_malloc_usable_size_r>:
 8007d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d16:	1f18      	subs	r0, r3, #4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bfbc      	itt	lt
 8007d1c:	580b      	ldrlt	r3, [r1, r0]
 8007d1e:	18c0      	addlt	r0, r0, r3
 8007d20:	4770      	bx	lr

08007d22 <__sfputc_r>:
 8007d22:	6893      	ldr	r3, [r2, #8]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	b410      	push	{r4}
 8007d2a:	6093      	str	r3, [r2, #8]
 8007d2c:	da08      	bge.n	8007d40 <__sfputc_r+0x1e>
 8007d2e:	6994      	ldr	r4, [r2, #24]
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	db01      	blt.n	8007d38 <__sfputc_r+0x16>
 8007d34:	290a      	cmp	r1, #10
 8007d36:	d103      	bne.n	8007d40 <__sfputc_r+0x1e>
 8007d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d3c:	f000 b934 	b.w	8007fa8 <__swbuf_r>
 8007d40:	6813      	ldr	r3, [r2, #0]
 8007d42:	1c58      	adds	r0, r3, #1
 8007d44:	6010      	str	r0, [r2, #0]
 8007d46:	7019      	strb	r1, [r3, #0]
 8007d48:	4608      	mov	r0, r1
 8007d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <__sfputs_r>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	4606      	mov	r6, r0
 8007d54:	460f      	mov	r7, r1
 8007d56:	4614      	mov	r4, r2
 8007d58:	18d5      	adds	r5, r2, r3
 8007d5a:	42ac      	cmp	r4, r5
 8007d5c:	d101      	bne.n	8007d62 <__sfputs_r+0x12>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	e007      	b.n	8007d72 <__sfputs_r+0x22>
 8007d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d66:	463a      	mov	r2, r7
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f7ff ffda 	bl	8007d22 <__sfputc_r>
 8007d6e:	1c43      	adds	r3, r0, #1
 8007d70:	d1f3      	bne.n	8007d5a <__sfputs_r+0xa>
 8007d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d74 <_vfiprintf_r>:
 8007d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d78:	460d      	mov	r5, r1
 8007d7a:	b09d      	sub	sp, #116	; 0x74
 8007d7c:	4614      	mov	r4, r2
 8007d7e:	4698      	mov	r8, r3
 8007d80:	4606      	mov	r6, r0
 8007d82:	b118      	cbz	r0, 8007d8c <_vfiprintf_r+0x18>
 8007d84:	6a03      	ldr	r3, [r0, #32]
 8007d86:	b90b      	cbnz	r3, 8007d8c <_vfiprintf_r+0x18>
 8007d88:	f7fe f8c4 	bl	8005f14 <__sinit>
 8007d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d8e:	07d9      	lsls	r1, r3, #31
 8007d90:	d405      	bmi.n	8007d9e <_vfiprintf_r+0x2a>
 8007d92:	89ab      	ldrh	r3, [r5, #12]
 8007d94:	059a      	lsls	r2, r3, #22
 8007d96:	d402      	bmi.n	8007d9e <_vfiprintf_r+0x2a>
 8007d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d9a:	f7fe f9e6 	bl	800616a <__retarget_lock_acquire_recursive>
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	071b      	lsls	r3, r3, #28
 8007da2:	d501      	bpl.n	8007da8 <_vfiprintf_r+0x34>
 8007da4:	692b      	ldr	r3, [r5, #16]
 8007da6:	b99b      	cbnz	r3, 8007dd0 <_vfiprintf_r+0x5c>
 8007da8:	4629      	mov	r1, r5
 8007daa:	4630      	mov	r0, r6
 8007dac:	f000 f93a 	bl	8008024 <__swsetup_r>
 8007db0:	b170      	cbz	r0, 8007dd0 <_vfiprintf_r+0x5c>
 8007db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007db4:	07dc      	lsls	r4, r3, #31
 8007db6:	d504      	bpl.n	8007dc2 <_vfiprintf_r+0x4e>
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	b01d      	add	sp, #116	; 0x74
 8007dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc2:	89ab      	ldrh	r3, [r5, #12]
 8007dc4:	0598      	lsls	r0, r3, #22
 8007dc6:	d4f7      	bmi.n	8007db8 <_vfiprintf_r+0x44>
 8007dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dca:	f7fe f9cf 	bl	800616c <__retarget_lock_release_recursive>
 8007dce:	e7f3      	b.n	8007db8 <_vfiprintf_r+0x44>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd4:	2320      	movs	r3, #32
 8007dd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dda:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dde:	2330      	movs	r3, #48	; 0x30
 8007de0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007f94 <_vfiprintf_r+0x220>
 8007de4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007de8:	f04f 0901 	mov.w	r9, #1
 8007dec:	4623      	mov	r3, r4
 8007dee:	469a      	mov	sl, r3
 8007df0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007df4:	b10a      	cbz	r2, 8007dfa <_vfiprintf_r+0x86>
 8007df6:	2a25      	cmp	r2, #37	; 0x25
 8007df8:	d1f9      	bne.n	8007dee <_vfiprintf_r+0x7a>
 8007dfa:	ebba 0b04 	subs.w	fp, sl, r4
 8007dfe:	d00b      	beq.n	8007e18 <_vfiprintf_r+0xa4>
 8007e00:	465b      	mov	r3, fp
 8007e02:	4622      	mov	r2, r4
 8007e04:	4629      	mov	r1, r5
 8007e06:	4630      	mov	r0, r6
 8007e08:	f7ff ffa2 	bl	8007d50 <__sfputs_r>
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	f000 80a9 	beq.w	8007f64 <_vfiprintf_r+0x1f0>
 8007e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e14:	445a      	add	r2, fp
 8007e16:	9209      	str	r2, [sp, #36]	; 0x24
 8007e18:	f89a 3000 	ldrb.w	r3, [sl]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 80a1 	beq.w	8007f64 <_vfiprintf_r+0x1f0>
 8007e22:	2300      	movs	r3, #0
 8007e24:	f04f 32ff 	mov.w	r2, #4294967295
 8007e28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e2c:	f10a 0a01 	add.w	sl, sl, #1
 8007e30:	9304      	str	r3, [sp, #16]
 8007e32:	9307      	str	r3, [sp, #28]
 8007e34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e38:	931a      	str	r3, [sp, #104]	; 0x68
 8007e3a:	4654      	mov	r4, sl
 8007e3c:	2205      	movs	r2, #5
 8007e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e42:	4854      	ldr	r0, [pc, #336]	; (8007f94 <_vfiprintf_r+0x220>)
 8007e44:	f7f8 f9c4 	bl	80001d0 <memchr>
 8007e48:	9a04      	ldr	r2, [sp, #16]
 8007e4a:	b9d8      	cbnz	r0, 8007e84 <_vfiprintf_r+0x110>
 8007e4c:	06d1      	lsls	r1, r2, #27
 8007e4e:	bf44      	itt	mi
 8007e50:	2320      	movmi	r3, #32
 8007e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e56:	0713      	lsls	r3, r2, #28
 8007e58:	bf44      	itt	mi
 8007e5a:	232b      	movmi	r3, #43	; 0x2b
 8007e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e60:	f89a 3000 	ldrb.w	r3, [sl]
 8007e64:	2b2a      	cmp	r3, #42	; 0x2a
 8007e66:	d015      	beq.n	8007e94 <_vfiprintf_r+0x120>
 8007e68:	9a07      	ldr	r2, [sp, #28]
 8007e6a:	4654      	mov	r4, sl
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	f04f 0c0a 	mov.w	ip, #10
 8007e72:	4621      	mov	r1, r4
 8007e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e78:	3b30      	subs	r3, #48	; 0x30
 8007e7a:	2b09      	cmp	r3, #9
 8007e7c:	d94d      	bls.n	8007f1a <_vfiprintf_r+0x1a6>
 8007e7e:	b1b0      	cbz	r0, 8007eae <_vfiprintf_r+0x13a>
 8007e80:	9207      	str	r2, [sp, #28]
 8007e82:	e014      	b.n	8007eae <_vfiprintf_r+0x13a>
 8007e84:	eba0 0308 	sub.w	r3, r0, r8
 8007e88:	fa09 f303 	lsl.w	r3, r9, r3
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	9304      	str	r3, [sp, #16]
 8007e90:	46a2      	mov	sl, r4
 8007e92:	e7d2      	b.n	8007e3a <_vfiprintf_r+0xc6>
 8007e94:	9b03      	ldr	r3, [sp, #12]
 8007e96:	1d19      	adds	r1, r3, #4
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	9103      	str	r1, [sp, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	bfbb      	ittet	lt
 8007ea0:	425b      	neglt	r3, r3
 8007ea2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ea6:	9307      	strge	r3, [sp, #28]
 8007ea8:	9307      	strlt	r3, [sp, #28]
 8007eaa:	bfb8      	it	lt
 8007eac:	9204      	strlt	r2, [sp, #16]
 8007eae:	7823      	ldrb	r3, [r4, #0]
 8007eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8007eb2:	d10c      	bne.n	8007ece <_vfiprintf_r+0x15a>
 8007eb4:	7863      	ldrb	r3, [r4, #1]
 8007eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb8:	d134      	bne.n	8007f24 <_vfiprintf_r+0x1b0>
 8007eba:	9b03      	ldr	r3, [sp, #12]
 8007ebc:	1d1a      	adds	r2, r3, #4
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	9203      	str	r2, [sp, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	bfb8      	it	lt
 8007ec6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007eca:	3402      	adds	r4, #2
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007fa4 <_vfiprintf_r+0x230>
 8007ed2:	7821      	ldrb	r1, [r4, #0]
 8007ed4:	2203      	movs	r2, #3
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	f7f8 f97a 	bl	80001d0 <memchr>
 8007edc:	b138      	cbz	r0, 8007eee <_vfiprintf_r+0x17a>
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	eba0 000a 	sub.w	r0, r0, sl
 8007ee4:	2240      	movs	r2, #64	; 0x40
 8007ee6:	4082      	lsls	r2, r0
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	3401      	adds	r4, #1
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef2:	4829      	ldr	r0, [pc, #164]	; (8007f98 <_vfiprintf_r+0x224>)
 8007ef4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ef8:	2206      	movs	r2, #6
 8007efa:	f7f8 f969 	bl	80001d0 <memchr>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d03f      	beq.n	8007f82 <_vfiprintf_r+0x20e>
 8007f02:	4b26      	ldr	r3, [pc, #152]	; (8007f9c <_vfiprintf_r+0x228>)
 8007f04:	bb1b      	cbnz	r3, 8007f4e <_vfiprintf_r+0x1da>
 8007f06:	9b03      	ldr	r3, [sp, #12]
 8007f08:	3307      	adds	r3, #7
 8007f0a:	f023 0307 	bic.w	r3, r3, #7
 8007f0e:	3308      	adds	r3, #8
 8007f10:	9303      	str	r3, [sp, #12]
 8007f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f14:	443b      	add	r3, r7
 8007f16:	9309      	str	r3, [sp, #36]	; 0x24
 8007f18:	e768      	b.n	8007dec <_vfiprintf_r+0x78>
 8007f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f1e:	460c      	mov	r4, r1
 8007f20:	2001      	movs	r0, #1
 8007f22:	e7a6      	b.n	8007e72 <_vfiprintf_r+0xfe>
 8007f24:	2300      	movs	r3, #0
 8007f26:	3401      	adds	r4, #1
 8007f28:	9305      	str	r3, [sp, #20]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	f04f 0c0a 	mov.w	ip, #10
 8007f30:	4620      	mov	r0, r4
 8007f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f36:	3a30      	subs	r2, #48	; 0x30
 8007f38:	2a09      	cmp	r2, #9
 8007f3a:	d903      	bls.n	8007f44 <_vfiprintf_r+0x1d0>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0c6      	beq.n	8007ece <_vfiprintf_r+0x15a>
 8007f40:	9105      	str	r1, [sp, #20]
 8007f42:	e7c4      	b.n	8007ece <_vfiprintf_r+0x15a>
 8007f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f48:	4604      	mov	r4, r0
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e7f0      	b.n	8007f30 <_vfiprintf_r+0x1bc>
 8007f4e:	ab03      	add	r3, sp, #12
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	462a      	mov	r2, r5
 8007f54:	4b12      	ldr	r3, [pc, #72]	; (8007fa0 <_vfiprintf_r+0x22c>)
 8007f56:	a904      	add	r1, sp, #16
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7fd fb89 	bl	8005670 <_printf_float>
 8007f5e:	4607      	mov	r7, r0
 8007f60:	1c78      	adds	r0, r7, #1
 8007f62:	d1d6      	bne.n	8007f12 <_vfiprintf_r+0x19e>
 8007f64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f66:	07d9      	lsls	r1, r3, #31
 8007f68:	d405      	bmi.n	8007f76 <_vfiprintf_r+0x202>
 8007f6a:	89ab      	ldrh	r3, [r5, #12]
 8007f6c:	059a      	lsls	r2, r3, #22
 8007f6e:	d402      	bmi.n	8007f76 <_vfiprintf_r+0x202>
 8007f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f72:	f7fe f8fb 	bl	800616c <__retarget_lock_release_recursive>
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	065b      	lsls	r3, r3, #25
 8007f7a:	f53f af1d 	bmi.w	8007db8 <_vfiprintf_r+0x44>
 8007f7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f80:	e71c      	b.n	8007dbc <_vfiprintf_r+0x48>
 8007f82:	ab03      	add	r3, sp, #12
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	462a      	mov	r2, r5
 8007f88:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <_vfiprintf_r+0x22c>)
 8007f8a:	a904      	add	r1, sp, #16
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f7fd fe13 	bl	8005bb8 <_printf_i>
 8007f92:	e7e4      	b.n	8007f5e <_vfiprintf_r+0x1ea>
 8007f94:	08008d1c 	.word	0x08008d1c
 8007f98:	08008d26 	.word	0x08008d26
 8007f9c:	08005671 	.word	0x08005671
 8007fa0:	08007d51 	.word	0x08007d51
 8007fa4:	08008d22 	.word	0x08008d22

08007fa8 <__swbuf_r>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	460e      	mov	r6, r1
 8007fac:	4614      	mov	r4, r2
 8007fae:	4605      	mov	r5, r0
 8007fb0:	b118      	cbz	r0, 8007fba <__swbuf_r+0x12>
 8007fb2:	6a03      	ldr	r3, [r0, #32]
 8007fb4:	b90b      	cbnz	r3, 8007fba <__swbuf_r+0x12>
 8007fb6:	f7fd ffad 	bl	8005f14 <__sinit>
 8007fba:	69a3      	ldr	r3, [r4, #24]
 8007fbc:	60a3      	str	r3, [r4, #8]
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	071a      	lsls	r2, r3, #28
 8007fc2:	d525      	bpl.n	8008010 <__swbuf_r+0x68>
 8007fc4:	6923      	ldr	r3, [r4, #16]
 8007fc6:	b31b      	cbz	r3, 8008010 <__swbuf_r+0x68>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	6922      	ldr	r2, [r4, #16]
 8007fcc:	1a98      	subs	r0, r3, r2
 8007fce:	6963      	ldr	r3, [r4, #20]
 8007fd0:	b2f6      	uxtb	r6, r6
 8007fd2:	4283      	cmp	r3, r0
 8007fd4:	4637      	mov	r7, r6
 8007fd6:	dc04      	bgt.n	8007fe2 <__swbuf_r+0x3a>
 8007fd8:	4621      	mov	r1, r4
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f7ff fdac 	bl	8007b38 <_fflush_r>
 8007fe0:	b9e0      	cbnz	r0, 800801c <__swbuf_r+0x74>
 8007fe2:	68a3      	ldr	r3, [r4, #8]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	60a3      	str	r3, [r4, #8]
 8007fe8:	6823      	ldr	r3, [r4, #0]
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	6022      	str	r2, [r4, #0]
 8007fee:	701e      	strb	r6, [r3, #0]
 8007ff0:	6962      	ldr	r2, [r4, #20]
 8007ff2:	1c43      	adds	r3, r0, #1
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d004      	beq.n	8008002 <__swbuf_r+0x5a>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	07db      	lsls	r3, r3, #31
 8007ffc:	d506      	bpl.n	800800c <__swbuf_r+0x64>
 8007ffe:	2e0a      	cmp	r6, #10
 8008000:	d104      	bne.n	800800c <__swbuf_r+0x64>
 8008002:	4621      	mov	r1, r4
 8008004:	4628      	mov	r0, r5
 8008006:	f7ff fd97 	bl	8007b38 <_fflush_r>
 800800a:	b938      	cbnz	r0, 800801c <__swbuf_r+0x74>
 800800c:	4638      	mov	r0, r7
 800800e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008010:	4621      	mov	r1, r4
 8008012:	4628      	mov	r0, r5
 8008014:	f000 f806 	bl	8008024 <__swsetup_r>
 8008018:	2800      	cmp	r0, #0
 800801a:	d0d5      	beq.n	8007fc8 <__swbuf_r+0x20>
 800801c:	f04f 37ff 	mov.w	r7, #4294967295
 8008020:	e7f4      	b.n	800800c <__swbuf_r+0x64>
	...

08008024 <__swsetup_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4b2a      	ldr	r3, [pc, #168]	; (80080d0 <__swsetup_r+0xac>)
 8008028:	4605      	mov	r5, r0
 800802a:	6818      	ldr	r0, [r3, #0]
 800802c:	460c      	mov	r4, r1
 800802e:	b118      	cbz	r0, 8008038 <__swsetup_r+0x14>
 8008030:	6a03      	ldr	r3, [r0, #32]
 8008032:	b90b      	cbnz	r3, 8008038 <__swsetup_r+0x14>
 8008034:	f7fd ff6e 	bl	8005f14 <__sinit>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800803e:	0718      	lsls	r0, r3, #28
 8008040:	d422      	bmi.n	8008088 <__swsetup_r+0x64>
 8008042:	06d9      	lsls	r1, r3, #27
 8008044:	d407      	bmi.n	8008056 <__swsetup_r+0x32>
 8008046:	2309      	movs	r3, #9
 8008048:	602b      	str	r3, [r5, #0]
 800804a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	f04f 30ff 	mov.w	r0, #4294967295
 8008054:	e034      	b.n	80080c0 <__swsetup_r+0x9c>
 8008056:	0758      	lsls	r0, r3, #29
 8008058:	d512      	bpl.n	8008080 <__swsetup_r+0x5c>
 800805a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800805c:	b141      	cbz	r1, 8008070 <__swsetup_r+0x4c>
 800805e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008062:	4299      	cmp	r1, r3
 8008064:	d002      	beq.n	800806c <__swsetup_r+0x48>
 8008066:	4628      	mov	r0, r5
 8008068:	f7fe ff0c 	bl	8006e84 <_free_r>
 800806c:	2300      	movs	r3, #0
 800806e:	6363      	str	r3, [r4, #52]	; 0x34
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008076:	81a3      	strh	r3, [r4, #12]
 8008078:	2300      	movs	r3, #0
 800807a:	6063      	str	r3, [r4, #4]
 800807c:	6923      	ldr	r3, [r4, #16]
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	f043 0308 	orr.w	r3, r3, #8
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	b94b      	cbnz	r3, 80080a0 <__swsetup_r+0x7c>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008096:	d003      	beq.n	80080a0 <__swsetup_r+0x7c>
 8008098:	4621      	mov	r1, r4
 800809a:	4628      	mov	r0, r5
 800809c:	f000 f884 	bl	80081a8 <__smakebuf_r>
 80080a0:	89a0      	ldrh	r0, [r4, #12]
 80080a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080a6:	f010 0301 	ands.w	r3, r0, #1
 80080aa:	d00a      	beq.n	80080c2 <__swsetup_r+0x9e>
 80080ac:	2300      	movs	r3, #0
 80080ae:	60a3      	str	r3, [r4, #8]
 80080b0:	6963      	ldr	r3, [r4, #20]
 80080b2:	425b      	negs	r3, r3
 80080b4:	61a3      	str	r3, [r4, #24]
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	b943      	cbnz	r3, 80080cc <__swsetup_r+0xa8>
 80080ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080be:	d1c4      	bne.n	800804a <__swsetup_r+0x26>
 80080c0:	bd38      	pop	{r3, r4, r5, pc}
 80080c2:	0781      	lsls	r1, r0, #30
 80080c4:	bf58      	it	pl
 80080c6:	6963      	ldrpl	r3, [r4, #20]
 80080c8:	60a3      	str	r3, [r4, #8]
 80080ca:	e7f4      	b.n	80080b6 <__swsetup_r+0x92>
 80080cc:	2000      	movs	r0, #0
 80080ce:	e7f7      	b.n	80080c0 <__swsetup_r+0x9c>
 80080d0:	20000064 	.word	0x20000064

080080d4 <_raise_r>:
 80080d4:	291f      	cmp	r1, #31
 80080d6:	b538      	push	{r3, r4, r5, lr}
 80080d8:	4604      	mov	r4, r0
 80080da:	460d      	mov	r5, r1
 80080dc:	d904      	bls.n	80080e8 <_raise_r+0x14>
 80080de:	2316      	movs	r3, #22
 80080e0:	6003      	str	r3, [r0, #0]
 80080e2:	f04f 30ff 	mov.w	r0, #4294967295
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80080ea:	b112      	cbz	r2, 80080f2 <_raise_r+0x1e>
 80080ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080f0:	b94b      	cbnz	r3, 8008106 <_raise_r+0x32>
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 f830 	bl	8008158 <_getpid_r>
 80080f8:	462a      	mov	r2, r5
 80080fa:	4601      	mov	r1, r0
 80080fc:	4620      	mov	r0, r4
 80080fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008102:	f000 b817 	b.w	8008134 <_kill_r>
 8008106:	2b01      	cmp	r3, #1
 8008108:	d00a      	beq.n	8008120 <_raise_r+0x4c>
 800810a:	1c59      	adds	r1, r3, #1
 800810c:	d103      	bne.n	8008116 <_raise_r+0x42>
 800810e:	2316      	movs	r3, #22
 8008110:	6003      	str	r3, [r0, #0]
 8008112:	2001      	movs	r0, #1
 8008114:	e7e7      	b.n	80080e6 <_raise_r+0x12>
 8008116:	2400      	movs	r4, #0
 8008118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800811c:	4628      	mov	r0, r5
 800811e:	4798      	blx	r3
 8008120:	2000      	movs	r0, #0
 8008122:	e7e0      	b.n	80080e6 <_raise_r+0x12>

08008124 <raise>:
 8008124:	4b02      	ldr	r3, [pc, #8]	; (8008130 <raise+0xc>)
 8008126:	4601      	mov	r1, r0
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	f7ff bfd3 	b.w	80080d4 <_raise_r>
 800812e:	bf00      	nop
 8008130:	20000064 	.word	0x20000064

08008134 <_kill_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4d07      	ldr	r5, [pc, #28]	; (8008154 <_kill_r+0x20>)
 8008138:	2300      	movs	r3, #0
 800813a:	4604      	mov	r4, r0
 800813c:	4608      	mov	r0, r1
 800813e:	4611      	mov	r1, r2
 8008140:	602b      	str	r3, [r5, #0]
 8008142:	f7f9 fa15 	bl	8001570 <_kill>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d102      	bne.n	8008150 <_kill_r+0x1c>
 800814a:	682b      	ldr	r3, [r5, #0]
 800814c:	b103      	cbz	r3, 8008150 <_kill_r+0x1c>
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	bd38      	pop	{r3, r4, r5, pc}
 8008152:	bf00      	nop
 8008154:	200005f0 	.word	0x200005f0

08008158 <_getpid_r>:
 8008158:	f7f9 ba02 	b.w	8001560 <_getpid>

0800815c <__swhatbuf_r>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	460c      	mov	r4, r1
 8008160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008164:	2900      	cmp	r1, #0
 8008166:	b096      	sub	sp, #88	; 0x58
 8008168:	4615      	mov	r5, r2
 800816a:	461e      	mov	r6, r3
 800816c:	da0d      	bge.n	800818a <__swhatbuf_r+0x2e>
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008174:	f04f 0100 	mov.w	r1, #0
 8008178:	bf0c      	ite	eq
 800817a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800817e:	2340      	movne	r3, #64	; 0x40
 8008180:	2000      	movs	r0, #0
 8008182:	6031      	str	r1, [r6, #0]
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	b016      	add	sp, #88	; 0x58
 8008188:	bd70      	pop	{r4, r5, r6, pc}
 800818a:	466a      	mov	r2, sp
 800818c:	f000 f848 	bl	8008220 <_fstat_r>
 8008190:	2800      	cmp	r0, #0
 8008192:	dbec      	blt.n	800816e <__swhatbuf_r+0x12>
 8008194:	9901      	ldr	r1, [sp, #4]
 8008196:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800819a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800819e:	4259      	negs	r1, r3
 80081a0:	4159      	adcs	r1, r3
 80081a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a6:	e7eb      	b.n	8008180 <__swhatbuf_r+0x24>

080081a8 <__smakebuf_r>:
 80081a8:	898b      	ldrh	r3, [r1, #12]
 80081aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081ac:	079d      	lsls	r5, r3, #30
 80081ae:	4606      	mov	r6, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	d507      	bpl.n	80081c4 <__smakebuf_r+0x1c>
 80081b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	6123      	str	r3, [r4, #16]
 80081bc:	2301      	movs	r3, #1
 80081be:	6163      	str	r3, [r4, #20]
 80081c0:	b002      	add	sp, #8
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	ab01      	add	r3, sp, #4
 80081c6:	466a      	mov	r2, sp
 80081c8:	f7ff ffc8 	bl	800815c <__swhatbuf_r>
 80081cc:	9900      	ldr	r1, [sp, #0]
 80081ce:	4605      	mov	r5, r0
 80081d0:	4630      	mov	r0, r6
 80081d2:	f7fe fecb 	bl	8006f6c <_malloc_r>
 80081d6:	b948      	cbnz	r0, 80081ec <__smakebuf_r+0x44>
 80081d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081dc:	059a      	lsls	r2, r3, #22
 80081de:	d4ef      	bmi.n	80081c0 <__smakebuf_r+0x18>
 80081e0:	f023 0303 	bic.w	r3, r3, #3
 80081e4:	f043 0302 	orr.w	r3, r3, #2
 80081e8:	81a3      	strh	r3, [r4, #12]
 80081ea:	e7e3      	b.n	80081b4 <__smakebuf_r+0xc>
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	6020      	str	r0, [r4, #0]
 80081f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f4:	81a3      	strh	r3, [r4, #12]
 80081f6:	9b00      	ldr	r3, [sp, #0]
 80081f8:	6163      	str	r3, [r4, #20]
 80081fa:	9b01      	ldr	r3, [sp, #4]
 80081fc:	6120      	str	r0, [r4, #16]
 80081fe:	b15b      	cbz	r3, 8008218 <__smakebuf_r+0x70>
 8008200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008204:	4630      	mov	r0, r6
 8008206:	f000 f81d 	bl	8008244 <_isatty_r>
 800820a:	b128      	cbz	r0, 8008218 <__smakebuf_r+0x70>
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	f023 0303 	bic.w	r3, r3, #3
 8008212:	f043 0301 	orr.w	r3, r3, #1
 8008216:	81a3      	strh	r3, [r4, #12]
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	431d      	orrs	r5, r3
 800821c:	81a5      	strh	r5, [r4, #12]
 800821e:	e7cf      	b.n	80081c0 <__smakebuf_r+0x18>

08008220 <_fstat_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d07      	ldr	r5, [pc, #28]	; (8008240 <_fstat_r+0x20>)
 8008224:	2300      	movs	r3, #0
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	4611      	mov	r1, r2
 800822c:	602b      	str	r3, [r5, #0]
 800822e:	f7f9 f9fe 	bl	800162e <_fstat>
 8008232:	1c43      	adds	r3, r0, #1
 8008234:	d102      	bne.n	800823c <_fstat_r+0x1c>
 8008236:	682b      	ldr	r3, [r5, #0]
 8008238:	b103      	cbz	r3, 800823c <_fstat_r+0x1c>
 800823a:	6023      	str	r3, [r4, #0]
 800823c:	bd38      	pop	{r3, r4, r5, pc}
 800823e:	bf00      	nop
 8008240:	200005f0 	.word	0x200005f0

08008244 <_isatty_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d06      	ldr	r5, [pc, #24]	; (8008260 <_isatty_r+0x1c>)
 8008248:	2300      	movs	r3, #0
 800824a:	4604      	mov	r4, r0
 800824c:	4608      	mov	r0, r1
 800824e:	602b      	str	r3, [r5, #0]
 8008250:	f7f9 f9fd 	bl	800164e <_isatty>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d102      	bne.n	800825e <_isatty_r+0x1a>
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	b103      	cbz	r3, 800825e <_isatty_r+0x1a>
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	200005f0 	.word	0x200005f0

08008264 <_init>:
 8008264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008266:	bf00      	nop
 8008268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826a:	bc08      	pop	{r3}
 800826c:	469e      	mov	lr, r3
 800826e:	4770      	bx	lr

08008270 <_fini>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	bf00      	nop
 8008274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008276:	bc08      	pop	{r3}
 8008278:	469e      	mov	lr, r3
 800827a:	4770      	bx	lr
